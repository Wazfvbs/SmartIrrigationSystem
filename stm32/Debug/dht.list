
dht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa6c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002138  0800ab80  0800ab80  0001ab80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccb8  0800ccb8  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800ccb8  0800ccb8  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ccb8  0800ccb8  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccb8  0800ccb8  0001ccb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccbc  0800ccbc  0001ccbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800ccc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  20000210  0800ced0  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009b8  0800ced0  000209b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019077  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003885  00000000  00000000  000392b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  0003cb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  0003de58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1a8  00000000  00000000  0003f008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e52  00000000  00000000  0005a1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009472b  00000000  00000000  00073002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010772d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006450  00000000  00000000  00107780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ab64 	.word	0x0800ab64

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	0800ab64 	.word	0x0800ab64

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__aeabi_f2uiz>:
 8001038:	0042      	lsls	r2, r0, #1
 800103a:	d20e      	bcs.n	800105a <__aeabi_f2uiz+0x22>
 800103c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001040:	d30b      	bcc.n	800105a <__aeabi_f2uiz+0x22>
 8001042:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001046:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800104a:	d409      	bmi.n	8001060 <__aeabi_f2uiz+0x28>
 800104c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001050:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001054:	fa23 f002 	lsr.w	r0, r3, r2
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2uiz+0x32>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d102      	bne.n	8001070 <__aeabi_f2uiz+0x38>
 800106a:	f04f 30ff 	mov.w	r0, #4294967295
 800106e:	4770      	bx	lr
 8001070:	f04f 0000 	mov.w	r0, #0
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <__aeabi_d2lz>:
 8001078:	b538      	push	{r3, r4, r5, lr}
 800107a:	460c      	mov	r4, r1
 800107c:	4605      	mov	r5, r0
 800107e:	4621      	mov	r1, r4
 8001080:	4628      	mov	r0, r5
 8001082:	2200      	movs	r2, #0
 8001084:	2300      	movs	r3, #0
 8001086:	f7ff fca3 	bl	80009d0 <__aeabi_dcmplt>
 800108a:	b928      	cbnz	r0, 8001098 <__aeabi_d2lz+0x20>
 800108c:	4628      	mov	r0, r5
 800108e:	4621      	mov	r1, r4
 8001090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001094:	f000 b80a 	b.w	80010ac <__aeabi_d2ulz>
 8001098:	4628      	mov	r0, r5
 800109a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800109e:	f000 f805 	bl	80010ac <__aeabi_d2ulz>
 80010a2:	4240      	negs	r0, r0
 80010a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a8:	bd38      	pop	{r3, r4, r5, pc}
 80010aa:	bf00      	nop

080010ac <__aeabi_d2ulz>:
 80010ac:	b5d0      	push	{r4, r6, r7, lr}
 80010ae:	2200      	movs	r2, #0
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <__aeabi_d2ulz+0x34>)
 80010b2:	4606      	mov	r6, r0
 80010b4:	460f      	mov	r7, r1
 80010b6:	f7ff fa19 	bl	80004ec <__aeabi_dmul>
 80010ba:	f7ff fcef 	bl	8000a9c <__aeabi_d2uiz>
 80010be:	4604      	mov	r4, r0
 80010c0:	f7ff f99a 	bl	80003f8 <__aeabi_ui2d>
 80010c4:	2200      	movs	r2, #0
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <__aeabi_d2ulz+0x38>)
 80010c8:	f7ff fa10 	bl	80004ec <__aeabi_dmul>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4630      	mov	r0, r6
 80010d2:	4639      	mov	r1, r7
 80010d4:	f7ff f852 	bl	800017c <__aeabi_dsub>
 80010d8:	f7ff fce0 	bl	8000a9c <__aeabi_d2uiz>
 80010dc:	4621      	mov	r1, r4
 80010de:	bdd0      	pop	{r4, r6, r7, pc}
 80010e0:	3df00000 	.word	0x3df00000
 80010e4:	41f00000 	.word	0x41f00000

080010e8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <MX_ADC1_Init+0x74>)
 80010fa:	4a19      	ldr	r2, [pc, #100]	; (8001160 <MX_ADC1_Init+0x78>)
 80010fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_ADC1_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_ADC1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_ADC1_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_ADC1_Init+0x74>)
 8001112:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001116:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <MX_ADC1_Init+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_ADC1_Init+0x74>)
 8001120:	2201      	movs	r2, #1
 8001122:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_ADC1_Init+0x74>)
 8001126:	f001 fe9f 	bl	8002e68 <HAL_ADC_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001130:	f000 fe24 	bl	8001d7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001134:	2305      	movs	r3, #5
 8001136:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001138:	2301      	movs	r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_ADC1_Init+0x74>)
 8001146:	f002 f953 	bl	80033f0 <HAL_ADC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001150:	f000 fe14 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000408 	.word	0x20000408
 8001160:	40012400 	.word	0x40012400

08001164 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <HAL_ADC_MspInit+0x6c>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d121      	bne.n	80011c8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <HAL_ADC_MspInit+0x70>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <HAL_ADC_MspInit+0x70>)
 800118a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_ADC_MspInit+0x70>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <HAL_ADC_MspInit+0x70>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <HAL_ADC_MspInit+0x70>)
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_ADC_MspInit+0x70>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5;
 80011b4:	2326      	movs	r3, #38	; 0x26
 80011b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b8:	2303      	movs	r3, #3
 80011ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4619      	mov	r1, r3
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_ADC_MspInit+0x74>)
 80011c4:	f002 fdca 	bl	8003d5c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011c8:	bf00      	nop
 80011ca:	3720      	adds	r7, #32
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40012400 	.word	0x40012400
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010800 	.word	0x40010800

080011dc <delay_us>:
/**
  * @brief  微秒级延时
  * @param  xus 延时时长，范围：0~233015
  * @retval 无
  */
void delay_us(uint16_t delay) {
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_DISABLE(&htim3);
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <delay_us+0xa4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6a1a      	ldr	r2, [r3, #32]
 80011ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10f      	bne.n	8001216 <delay_us+0x3a>
 80011f6:	4b22      	ldr	r3, [pc, #136]	; (8001280 <delay_us+0xa4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6a1a      	ldr	r2, [r3, #32]
 80011fc:	f240 4344 	movw	r3, #1092	; 0x444
 8001200:	4013      	ands	r3, r2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d107      	bne.n	8001216 <delay_us+0x3a>
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <delay_us+0xa4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <delay_us+0xa4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0201 	bic.w	r2, r2, #1
 8001214:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <delay_us+0xa4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2200      	movs	r2, #0
 800121c:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_ENABLE(&htim3);
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <delay_us+0xa4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <delay_us+0xa4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 0201 	orr.w	r2, r2, #1
 800122c:	601a      	str	r2, [r3, #0]
    uint16_t curCnt = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	81fb      	strh	r3, [r7, #14]
    while (1) {
        curCnt = __HAL_TIM_GET_COUNTER(&htim3);
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <delay_us+0xa4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	81fb      	strh	r3, [r7, #14]
        if (curCnt >= delay)
 800123a:	89fa      	ldrh	r2, [r7, #14]
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	429a      	cmp	r2, r3
 8001240:	d200      	bcs.n	8001244 <delay_us+0x68>
        curCnt = __HAL_TIM_GET_COUNTER(&htim3);
 8001242:	e7f6      	b.n	8001232 <delay_us+0x56>
            break;
 8001244:	bf00      	nop
    }
    __HAL_TIM_DISABLE(&htim3);
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <delay_us+0xa4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6a1a      	ldr	r2, [r3, #32]
 800124c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001250:	4013      	ands	r3, r2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10f      	bne.n	8001276 <delay_us+0x9a>
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <delay_us+0xa4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6a1a      	ldr	r2, [r3, #32]
 800125c:	f240 4344 	movw	r3, #1092	; 0x444
 8001260:	4013      	ands	r3, r2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d107      	bne.n	8001276 <delay_us+0x9a>
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <delay_us+0xa4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <delay_us+0xa4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0201 	bic.w	r2, r2, #1
 8001274:	601a      	str	r2, [r3, #0]
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	2000088c 	.word	0x2000088c

08001284 <delay_ms>:
  * @brief  毫秒级延时
  * @param  xms 延时时长，范围：0~4294967295
  * @retval 无
  */
void delay_ms(uint16_t delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	80fb      	strh	r3, [r7, #6]
	while(delay--)
 800128e:	e003      	b.n	8001298 <delay_ms+0x14>
	{
		delay_us(1000);
 8001290:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001294:	f7ff ffa2 	bl	80011dc <delay_us>
	while(delay--)
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	1e5a      	subs	r2, r3, #1
 800129c:	80fa      	strh	r2, [r7, #6]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f6      	bne.n	8001290 <delay_ms+0xc>
	}
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <Dht11_DATA_OUT>:
#include "dht11.h"
#include "tim.h"
#include "delay.h"


void Dht11_DATA_OUT(void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	463b      	mov	r3, r7
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c2:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d0:	463b      	mov	r3, r7
 80012d2:	4619      	mov	r1, r3
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <Dht11_DATA_OUT+0x38>)
 80012d6:	f002 fd41 	bl	8003d5c <HAL_GPIO_Init>
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40010c00 	.word	0x40010c00

080012e8 <Dht11_DATA_IN>:

void Dht11_DATA_IN(void) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ee:	463b      	mov	r3, r7
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fe:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001304:	2301      	movs	r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	4803      	ldr	r0, [pc, #12]	; (800131c <Dht11_DATA_IN+0x34>)
 800130e:	f002 fd25 	bl	8003d5c <HAL_GPIO_Init>
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40010c00 	.word	0x40010c00

08001320 <DHT11_Rst>:

void DHT11_Rst(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
    Dht11_DATA_OUT();
 8001324:	f7ff ffc2 	bl	80012ac <Dht11_DATA_OUT>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800132e:	4808      	ldr	r0, [pc, #32]	; (8001350 <DHT11_Rst+0x30>)
 8001330:	f002 feaf 	bl	8004092 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8001334:	2014      	movs	r0, #20
 8001336:	f001 fd73 	bl	8002e20 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001340:	4803      	ldr	r0, [pc, #12]	; (8001350 <DHT11_Rst+0x30>)
 8001342:	f002 fea6 	bl	8004092 <HAL_GPIO_WritePin>
    delay_us(30);
 8001346:	201e      	movs	r0, #30
 8001348:	f7ff ff48 	bl	80011dc <delay_us>
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40010c00 	.word	0x40010c00

08001354 <DHT11_Check>:

uint8_t DHT11_Check(void) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
    uint8_t retry = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	71fb      	strb	r3, [r7, #7]
    Dht11_DATA_IN();
 800135e:	f7ff ffc3 	bl	80012e8 <Dht11_DATA_IN>
    while (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) && retry < 200) {
 8001362:	e005      	b.n	8001370 <DHT11_Check+0x1c>
        retry++;
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	3301      	adds	r3, #1
 8001368:	71fb      	strb	r3, [r7, #7]
        delay_us(1);
 800136a:	2001      	movs	r0, #1
 800136c:	f7ff ff36 	bl	80011dc <delay_us>
    while (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) && retry < 200) {
 8001370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001374:	4815      	ldr	r0, [pc, #84]	; (80013cc <DHT11_Check+0x78>)
 8001376:	f002 fe75 	bl	8004064 <HAL_GPIO_ReadPin>
 800137a:	4603      	mov	r3, r0
 800137c:	2b01      	cmp	r3, #1
 800137e:	d102      	bne.n	8001386 <DHT11_Check+0x32>
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	2bc7      	cmp	r3, #199	; 0xc7
 8001384:	d9ee      	bls.n	8001364 <DHT11_Check+0x10>
    }
    if (retry >= 100) return 1;
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	2b63      	cmp	r3, #99	; 0x63
 800138a:	d901      	bls.n	8001390 <DHT11_Check+0x3c>
 800138c:	2301      	movs	r3, #1
 800138e:	e019      	b.n	80013c4 <DHT11_Check+0x70>

    retry = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	71fb      	strb	r3, [r7, #7]
    while (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) && retry < 200) {
 8001394:	e005      	b.n	80013a2 <DHT11_Check+0x4e>
        retry++;
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	3301      	adds	r3, #1
 800139a:	71fb      	strb	r3, [r7, #7]
        delay_us(1);
 800139c:	2001      	movs	r0, #1
 800139e:	f7ff ff1d 	bl	80011dc <delay_us>
    while (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) && retry < 200) {
 80013a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a6:	4809      	ldr	r0, [pc, #36]	; (80013cc <DHT11_Check+0x78>)
 80013a8:	f002 fe5c 	bl	8004064 <HAL_GPIO_ReadPin>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d102      	bne.n	80013b8 <DHT11_Check+0x64>
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2bc7      	cmp	r3, #199	; 0xc7
 80013b6:	d9ee      	bls.n	8001396 <DHT11_Check+0x42>
    }
    if (retry >= 100) return 1;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	2b63      	cmp	r3, #99	; 0x63
 80013bc:	d901      	bls.n	80013c2 <DHT11_Check+0x6e>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <DHT11_Check+0x70>
    return 0;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40010c00 	.word	0x40010c00

080013d0 <DHT11_Read_Bit>:

uint8_t DHT11_Read_Bit(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
    uint8_t retry = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	71fb      	strb	r3, [r7, #7]
    while (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) && retry < 100) {
 80013da:	e005      	b.n	80013e8 <DHT11_Read_Bit+0x18>
        retry++;
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	3301      	adds	r3, #1
 80013e0:	71fb      	strb	r3, [r7, #7]
        delay_us(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f7ff fefa 	bl	80011dc <delay_us>
    while (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) && retry < 100) {
 80013e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ec:	4817      	ldr	r0, [pc, #92]	; (800144c <DHT11_Read_Bit+0x7c>)
 80013ee:	f002 fe39 	bl	8004064 <HAL_GPIO_ReadPin>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d102      	bne.n	80013fe <DHT11_Read_Bit+0x2e>
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2b63      	cmp	r3, #99	; 0x63
 80013fc:	d9ee      	bls.n	80013dc <DHT11_Read_Bit+0xc>
    }
    retry = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	71fb      	strb	r3, [r7, #7]
    while (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) && retry < 100) {
 8001402:	e005      	b.n	8001410 <DHT11_Read_Bit+0x40>
        retry++;
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	3301      	adds	r3, #1
 8001408:	71fb      	strb	r3, [r7, #7]
        delay_us(1);
 800140a:	2001      	movs	r0, #1
 800140c:	f7ff fee6 	bl	80011dc <delay_us>
    while (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) && retry < 100) {
 8001410:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <DHT11_Read_Bit+0x7c>)
 8001416:	f002 fe25 	bl	8004064 <HAL_GPIO_ReadPin>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <DHT11_Read_Bit+0x56>
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b63      	cmp	r3, #99	; 0x63
 8001424:	d9ee      	bls.n	8001404 <DHT11_Read_Bit+0x34>
    }
    delay_us(40);
 8001426:	2028      	movs	r0, #40	; 0x28
 8001428:	f7ff fed8 	bl	80011dc <delay_us>

    return GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 800142c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001430:	4806      	ldr	r0, [pc, #24]	; (800144c <DHT11_Read_Bit+0x7c>)
 8001432:	f002 fe17 	bl	8004064 <HAL_GPIO_ReadPin>
 8001436:	4603      	mov	r3, r0
 8001438:	2b01      	cmp	r3, #1
 800143a:	bf0c      	ite	eq
 800143c:	2301      	moveq	r3, #1
 800143e:	2300      	movne	r3, #0
 8001440:	b2db      	uxtb	r3, r3
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40010c00 	.word	0x40010c00

08001450 <DHT11_Read_Byte>:

uint8_t DHT11_Read_Byte(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
    uint8_t dat = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 800145a:	2300      	movs	r3, #0
 800145c:	71bb      	strb	r3, [r7, #6]
 800145e:	e00c      	b.n	800147a <DHT11_Read_Byte+0x2a>
        dat <<= 1;
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	71fb      	strb	r3, [r7, #7]
        dat |= DHT11_Read_Bit();
 8001466:	f7ff ffb3 	bl	80013d0 <DHT11_Read_Bit>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	4313      	orrs	r3, r2
 8001472:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 8001474:	79bb      	ldrb	r3, [r7, #6]
 8001476:	3301      	adds	r3, #1
 8001478:	71bb      	strb	r3, [r7, #6]
 800147a:	79bb      	ldrb	r3, [r7, #6]
 800147c:	2b07      	cmp	r3, #7
 800147e:	d9ef      	bls.n	8001460 <DHT11_Read_Byte+0x10>
    }
    return dat;
 8001480:	79fb      	ldrb	r3, [r7, #7]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <DHT11_Read_Data>:

uint8_t DHT11_Read_Data(uint8_t *humi, uint8_t *temp) {
 800148a:	b590      	push	{r4, r7, lr}
 800148c:	b085      	sub	sp, #20
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
    uint8_t buf[5];
    DHT11_Rst();
 8001494:	f7ff ff44 	bl	8001320 <DHT11_Rst>
    if (DHT11_Check() == 0) {
 8001498:	f7ff ff5c 	bl	8001354 <DHT11_Check>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d124      	bne.n	80014ec <DHT11_Read_Data+0x62>
        for (uint8_t i = 0; i < 5; i++) buf[i] = DHT11_Read_Byte();
 80014a2:	2300      	movs	r3, #0
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	e00c      	b.n	80014c2 <DHT11_Read_Data+0x38>
 80014a8:	7bfc      	ldrb	r4, [r7, #15]
 80014aa:	f7ff ffd1 	bl	8001450 <DHT11_Read_Byte>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461a      	mov	r2, r3
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	4423      	add	r3, r4
 80014b8:	f803 2c08 	strb.w	r2, [r3, #-8]
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	3301      	adds	r3, #1
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d9ef      	bls.n	80014a8 <DHT11_Read_Data+0x1e>
        if ((buf[0] + buf[1] + buf[2] + buf[3]) == buf[4]) {
 80014c8:	7a3b      	ldrb	r3, [r7, #8]
 80014ca:	461a      	mov	r2, r3
 80014cc:	7a7b      	ldrb	r3, [r7, #9]
 80014ce:	4413      	add	r3, r2
 80014d0:	7aba      	ldrb	r2, [r7, #10]
 80014d2:	4413      	add	r3, r2
 80014d4:	7afa      	ldrb	r2, [r7, #11]
 80014d6:	4413      	add	r3, r2
 80014d8:	7b3a      	ldrb	r2, [r7, #12]
 80014da:	4293      	cmp	r3, r2
 80014dc:	d108      	bne.n	80014f0 <DHT11_Read_Data+0x66>
            *humi = buf[0];
 80014de:	7a3a      	ldrb	r2, [r7, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	701a      	strb	r2, [r3, #0]
            *temp = buf[2];
 80014e4:	7aba      	ldrb	r2, [r7, #10]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	e001      	b.n	80014f0 <DHT11_Read_Data+0x66>
        }
    } else {
        return 1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <DHT11_Read_Data+0x68>
    }
    return 0;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd90      	pop	{r4, r7, pc}
	...

080014fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <MX_DMA_Init+0x48>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <MX_DMA_Init+0x48>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6153      	str	r3, [r2, #20]
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <MX_DMA_Init+0x48>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	200e      	movs	r0, #14
 8001520:	f002 f9d1 	bl	80038c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001524:	200e      	movs	r0, #14
 8001526:	f002 f9ea 	bl	80038fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	200f      	movs	r0, #15
 8001530:	f002 f9c9 	bl	80038c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001534:	200f      	movs	r0, #15
 8001536:	f002 f9e2 	bl	80038fe <HAL_NVIC_EnableIRQ>

}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000

08001548 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155c:	4b28      	ldr	r3, [pc, #160]	; (8001600 <MX_GPIO_Init+0xb8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a27      	ldr	r2, [pc, #156]	; (8001600 <MX_GPIO_Init+0xb8>)
 8001562:	f043 0320 	orr.w	r3, r3, #32
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b25      	ldr	r3, [pc, #148]	; (8001600 <MX_GPIO_Init+0xb8>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0320 	and.w	r3, r3, #32
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <MX_GPIO_Init+0xb8>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a21      	ldr	r2, [pc, #132]	; (8001600 <MX_GPIO_Init+0xb8>)
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <MX_GPIO_Init+0xb8>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158c:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <MX_GPIO_Init+0xb8>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <MX_GPIO_Init+0xb8>)
 8001592:	f043 0308 	orr.w	r3, r3, #8
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <MX_GPIO_Init+0xb8>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015aa:	4816      	ldr	r0, [pc, #88]	; (8001604 <MX_GPIO_Init+0xbc>)
 80015ac:	f002 fd71 	bl	8004092 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b6:	4814      	ldr	r0, [pc, #80]	; (8001608 <MX_GPIO_Init+0xc0>)
 80015b8:	f002 fd6b 	bl	8004092 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	4619      	mov	r1, r3
 80015d4:	480b      	ldr	r0, [pc, #44]	; (8001604 <MX_GPIO_Init+0xbc>)
 80015d6:	f002 fbc1 	bl	8003d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2302      	movs	r3, #2
 80015ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	4619      	mov	r1, r3
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_GPIO_Init+0xc0>)
 80015f4:	f002 fbb2 	bl	8003d5c <HAL_GPIO_Init>

}
 80015f8:	bf00      	nop
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000
 8001604:	40010c00 	.word	0x40010c00
 8001608:	40010800 	.word	0x40010800

0800160c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <MX_I2C2_Init+0x50>)
 8001612:	4a13      	ldr	r2, [pc, #76]	; (8001660 <MX_I2C2_Init+0x54>)
 8001614:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <MX_I2C2_Init+0x50>)
 8001618:	4a12      	ldr	r2, [pc, #72]	; (8001664 <MX_I2C2_Init+0x58>)
 800161a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MX_I2C2_Init+0x50>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <MX_I2C2_Init+0x50>)
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_I2C2_Init+0x50>)
 800162a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800162e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <MX_I2C2_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_I2C2_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <MX_I2C2_Init+0x50>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_I2C2_Init+0x50>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001648:	4804      	ldr	r0, [pc, #16]	; (800165c <MX_I2C2_Init+0x50>)
 800164a:	f002 fd3b 	bl	80040c4 <HAL_I2C_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001654:	f000 fb92 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000438 	.word	0x20000438
 8001660:	40005800 	.word	0x40005800
 8001664:	00061a80 	.word	0x00061a80

08001668 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a16      	ldr	r2, [pc, #88]	; (80016dc <HAL_I2C_MspInit+0x74>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d124      	bne.n	80016d2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HAL_I2C_MspInit+0x78>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <HAL_I2C_MspInit+0x78>)
 800168e:	f043 0308 	orr.w	r3, r3, #8
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_I2C_MspInit+0x78>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a6:	2312      	movs	r3, #18
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	4619      	mov	r1, r3
 80016b4:	480b      	ldr	r0, [pc, #44]	; (80016e4 <HAL_I2C_MspInit+0x7c>)
 80016b6:	f002 fb51 	bl	8003d5c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_I2C_MspInit+0x78>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <HAL_I2C_MspInit+0x78>)
 80016c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016c4:	61d3      	str	r3, [r2, #28]
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_I2C_MspInit+0x78>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80016d2:	bf00      	nop
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40005800 	.word	0x40005800
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010c00 	.word	0x40010c00

080016e8 <HAL_UARTEx_RxEventCallback>:
 * CHANGED / ADDED:
 *  使用空闲中断回调方式，处理每次接收的数据块，并在其中查找换行符 '\n'
 *  如果找到，则分割出一条完整命令，调用 parseCommand() 解析
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b09e      	sub	sp, #120	; 0x78
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]

	if (huart == &huart1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a3c      	ldr	r2, [pc, #240]	; (80017e8 <HAL_UARTEx_RxEventCallback+0x100>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d170      	bne.n	80017de <HAL_UARTEx_RxEventCallback+0xf6>
  {
    /* 1) 将 DMA_Buffer 中 [0..Size-1] 的字节 复制到 mainBuf */
    for(uint16_t i = 0; i < Size; i++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8001702:	e01e      	b.n	8001742 <HAL_UARTEx_RxEventCallback+0x5a>
    {
      // 如果满了，就清空或做其他处理，这里简单清空
      if(mainBufIndex >= MAIN_BUF_SIZE - 1)
 8001704:	4b39      	ldr	r3, [pc, #228]	; (80017ec <HAL_UARTEx_RxEventCallback+0x104>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	2bfe      	cmp	r3, #254	; 0xfe
 800170a:	d908      	bls.n	800171e <HAL_UARTEx_RxEventCallback+0x36>
      {
        mainBufIndex = 0;
 800170c:	4b37      	ldr	r3, [pc, #220]	; (80017ec <HAL_UARTEx_RxEventCallback+0x104>)
 800170e:	2200      	movs	r2, #0
 8001710:	801a      	strh	r2, [r3, #0]
        memset(mainBuf, 0, MAIN_BUF_SIZE);
 8001712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001716:	2100      	movs	r1, #0
 8001718:	4835      	ldr	r0, [pc, #212]	; (80017f0 <HAL_UARTEx_RxEventCallback+0x108>)
 800171a:	f005 f84b 	bl	80067b4 <memset>
      }
      mainBuf[mainBufIndex++] = DMA_Buffer[i];
 800171e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001722:	4b32      	ldr	r3, [pc, #200]	; (80017ec <HAL_UARTEx_RxEventCallback+0x104>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	1c59      	adds	r1, r3, #1
 8001728:	b288      	uxth	r0, r1
 800172a:	4930      	ldr	r1, [pc, #192]	; (80017ec <HAL_UARTEx_RxEventCallback+0x104>)
 800172c:	8008      	strh	r0, [r1, #0]
 800172e:	4619      	mov	r1, r3
 8001730:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001732:	5c9a      	ldrb	r2, [r3, r2]
 8001734:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <HAL_UARTEx_RxEventCallback+0x108>)
 8001736:	545a      	strb	r2, [r3, r1]
    for(uint16_t i = 0; i < Size; i++)
 8001738:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800173c:	3301      	adds	r3, #1
 800173e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8001742:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001746:	887b      	ldrh	r3, [r7, #2]
 8001748:	429a      	cmp	r2, r3
 800174a:	d3db      	bcc.n	8001704 <HAL_UARTEx_RxEventCallback+0x1c>
    }
    /* 2) 在 mainBuf 中查找 '\n' 以判断是否有一条完整命令  */
    // CHANGED: 只要检测到第一条 '\n'，就解析并清空缓冲区，等待下条命令
    for(uint16_t i = 0; i < mainBufIndex; i++)
 800174c:	2300      	movs	r3, #0
 800174e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8001752:	e039      	b.n	80017c8 <HAL_UARTEx_RxEventCallback+0xe0>
    {
      if(mainBuf[i] == '\n')
 8001754:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001758:	4a25      	ldr	r2, [pc, #148]	; (80017f0 <HAL_UARTEx_RxEventCallback+0x108>)
 800175a:	5cd3      	ldrb	r3, [r2, r3]
 800175c:	2b0a      	cmp	r3, #10
 800175e:	d12e      	bne.n	80017be <HAL_UARTEx_RxEventCallback+0xd6>
      {
        // 截取 [0 .. i-1] 作为一条命令   (startPos = 0)
        mainBuf[i] = '\0'; // 把换行符替换为字符串结束符
 8001760:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001764:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <HAL_UARTEx_RxEventCallback+0x108>)
 8001766:	2100      	movs	r1, #0
 8001768:	54d1      	strb	r1, [r2, r3]

        // 提取该条命令
        char cmdBuf[100];
        uint16_t cmdLen = i; // 从0到i-1
 800176a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800176e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        if(cmdLen >= sizeof(cmdBuf)) {
 8001772:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8001776:	2b63      	cmp	r3, #99	; 0x63
 8001778:	d902      	bls.n	8001780 <HAL_UARTEx_RxEventCallback+0x98>
          cmdLen = sizeof(cmdBuf) - 1;
 800177a:	2363      	movs	r3, #99	; 0x63
 800177c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        }
        strncpy(cmdBuf, (char*)&mainBuf[0], cmdLen);
 8001780:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	4919      	ldr	r1, [pc, #100]	; (80017f0 <HAL_UARTEx_RxEventCallback+0x108>)
 800178a:	4618      	mov	r0, r3
 800178c:	f005 fc9a 	bl	80070c4 <strncpy>
        cmdBuf[cmdLen] = '\0';
 8001790:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8001794:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001798:	4413      	add	r3, r2
 800179a:	2200      	movs	r2, #0
 800179c:	f803 2c6c 	strb.w	r2, [r3, #-108]
        // 调用 parseCommand() 来解析
        parseCommand(cmdBuf);
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 f91f 	bl	80019e8 <parseCommand>

        // CHANGED / ADDED: 清空所有缓冲区并将 mainBufIndex 置0
        memset(mainBuf, 0, MAIN_BUF_SIZE);
 80017aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ae:	2100      	movs	r1, #0
 80017b0:	480f      	ldr	r0, [pc, #60]	; (80017f0 <HAL_UARTEx_RxEventCallback+0x108>)
 80017b2:	f004 ffff 	bl	80067b4 <memset>
        mainBufIndex = 0;
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <HAL_UARTEx_RxEventCallback+0x104>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	801a      	strh	r2, [r3, #0]

        // 因为你只想处理第一条指令就重置缓存，因此可以直接 break
        break;
 80017bc:	e00a      	b.n	80017d4 <HAL_UARTEx_RxEventCallback+0xec>
    for(uint16_t i = 0; i < mainBufIndex; i++)
 80017be:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80017c2:	3301      	adds	r3, #1
 80017c4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <HAL_UARTEx_RxEventCallback+0x104>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d3bf      	bcc.n	8001754 <HAL_UARTEx_RxEventCallback+0x6c>
      }
    }

    /* 3) 重新启动接收：非常重要，否则只能接收一次 */
    // CHANGED: 不再做剩余数据前移，因为你希望清空后只等下一条命令
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, DMA_Buffer, DMA_BUF_SIZE);
 80017d4:	2240      	movs	r2, #64	; 0x40
 80017d6:	4907      	ldr	r1, [pc, #28]	; (80017f4 <HAL_UARTEx_RxEventCallback+0x10c>)
 80017d8:	4803      	ldr	r0, [pc, #12]	; (80017e8 <HAL_UARTEx_RxEventCallback+0x100>)
 80017da:	f004 f9dc 	bl	8005b96 <HAL_UARTEx_ReceiveToIdle_IT>
  }
}
 80017de:	bf00      	nop
 80017e0:	3778      	adds	r7, #120	; 0x78
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000095c 	.word	0x2000095c
 80017ec:	20000370 	.word	0x20000370
 80017f0:	20000270 	.word	0x20000270
 80017f4:	20000230 	.word	0x20000230

080017f8 <main>:

/**
  * @brief  The application entry point.
  */
int main(void)
{
 80017f8:	b5b0      	push	{r4, r5, r7, lr}
 80017fa:	b0c6      	sub	sp, #280	; 0x118
 80017fc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  uint8_t temperature = 1;
 80017fe:	2301      	movs	r3, #1
 8001800:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
  uint8_t humidity    = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102

  char* CntState = "No Connect!\r\n";
 800180a:	4b41      	ldr	r3, [pc, #260]	; (8001910 <main+0x118>)
 800180c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint8_t messages[250];
  Sensor_DataTypeDef sensorData;
  /* USER CODE END 1 */

  HAL_Init();
 8001810:	f001 faa4 	bl	8002d5c <HAL_Init>
  SystemClock_Config();
 8001814:	f000 f88c 	bl	8001930 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001818:	f7ff fe96 	bl	8001548 <MX_GPIO_Init>
  MX_TIM3_Init();
 800181c:	f001 f938 	bl	8002a90 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001820:	f001 f9a2 	bl	8002b68 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001824:	f7ff fef2 	bl	800160c <MX_I2C2_Init>
  MX_DMA_Init();
 8001828:	f7ff fe68 	bl	80014fc <MX_DMA_Init>
  MX_ADC1_Init();
 800182c:	f7ff fc5c 	bl	80010e8 <MX_ADC1_Init>

  /* USER CODE BEGIN 2 */
  DHT11_Rst();
 8001830:	f7ff fd76 	bl	8001320 <DHT11_Rst>

  while(DHT11_Check())
 8001834:	e00f      	b.n	8001856 <main+0x5e>
  {
    HAL_UART_Transmit(&huart1, (uint8_t*)CntState, strlen(CntState), 200);
 8001836:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 800183a:	f7fe fc93 	bl	8000164 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	b29a      	uxth	r2, r3
 8001842:	23c8      	movs	r3, #200	; 0xc8
 8001844:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001848:	4832      	ldr	r0, [pc, #200]	; (8001914 <main+0x11c>)
 800184a:	f004 f919 	bl	8005a80 <HAL_UART_Transmit>
    HAL_Delay(500);
 800184e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001852:	f001 fae5 	bl	8002e20 <HAL_Delay>
  while(DHT11_Check())
 8001856:	f7ff fd7d 	bl	8001354 <DHT11_Check>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1ea      	bne.n	8001836 <main+0x3e>
  }

  CntState = "Success!\r\n";
 8001860:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <main+0x120>)
 8001862:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  HAL_UART_Transmit(&huart1, (uint8_t*)CntState, strlen(CntState), 200);
 8001866:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 800186a:	f7fe fc7b 	bl	8000164 <strlen>
 800186e:	4603      	mov	r3, r0
 8001870:	b29a      	uxth	r2, r3
 8001872:	23c8      	movs	r3, #200	; 0xc8
 8001874:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001878:	4826      	ldr	r0, [pc, #152]	; (8001914 <main+0x11c>)
 800187a:	f004 f901 	bl	8005a80 <HAL_UART_Transmit>

  HAL_Delay(20);
 800187e:	2014      	movs	r0, #20
 8001880:	f001 face 	bl	8002e20 <HAL_Delay>
  OLED_Init();
 8001884:	f000 faa8 	bl	8001dd8 <OLED_Init>
  SENSORS_Init();
 8001888:	f000 feae 	bl	80025e8 <SENSORS_Init>

  /* CHANGED / ADDED: 启动 USART1 的空闲中断接收 */

  HAL_UARTEx_ReceiveToIdle_IT(&huart1, DMA_Buffer, DMA_BUF_SIZE);
 800188c:	2240      	movs	r2, #64	; 0x40
 800188e:	4923      	ldr	r1, [pc, #140]	; (800191c <main+0x124>)
 8001890:	4820      	ldr	r0, [pc, #128]	; (8001914 <main+0x11c>)
 8001892:	f004 f980 	bl	8005b96 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  while (1)
  {
    /* 读取传感器数据并打印示例 */
    SENSORS_ReadAll(&sensorData);
 8001896:	463b      	mov	r3, r7
 8001898:	4618      	mov	r0, r3
 800189a:	f000 ff55 	bl	8002748 <SENSORS_ReadAll>

    //sprintf((char*)messages,"环境温度 %d ℃  环境湿度 %d %%  土壤湿度 %u %%  水位深度 %u cm  光照强度 %u\r\n",sensorData.temperature,sensorData.humidity,sensorData.soilADC, sensorData.waterADC,sensorData.lightADC);
    sprintf((char*)messages,"T=%d,H=%d,soil=%u,water=%u,light=%u\r\n",sensorData.temperature,sensorData.humidity,sensorData.soilADC, sensorData.waterADC,sensorData.lightADC);
 800189e:	463b      	mov	r3, r7
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	461c      	mov	r4, r3
 80018a4:	463b      	mov	r3, r7
 80018a6:	785b      	ldrb	r3, [r3, #1]
 80018a8:	461d      	mov	r5, r3
 80018aa:	463b      	mov	r3, r7
 80018ac:	885b      	ldrh	r3, [r3, #2]
 80018ae:	461a      	mov	r2, r3
 80018b0:	463b      	mov	r3, r7
 80018b2:	889b      	ldrh	r3, [r3, #4]
 80018b4:	4619      	mov	r1, r3
 80018b6:	463b      	mov	r3, r7
 80018b8:	88db      	ldrh	r3, [r3, #6]
 80018ba:	f107 0008 	add.w	r0, r7, #8
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	9101      	str	r1, [sp, #4]
 80018c2:	9200      	str	r2, [sp, #0]
 80018c4:	462b      	mov	r3, r5
 80018c6:	4622      	mov	r2, r4
 80018c8:	4915      	ldr	r1, [pc, #84]	; (8001920 <main+0x128>)
 80018ca:	f005 fbdb 	bl	8007084 <siprintf>

    HAL_UART_Transmit(&huart1, messages, strlen((const char*)messages), 250);
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fc46 	bl	8000164 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f107 0108 	add.w	r1, r7, #8
 80018e0:	23fa      	movs	r3, #250	; 0xfa
 80018e2:	480c      	ldr	r0, [pc, #48]	; (8001914 <main+0x11c>)
 80018e4:	f004 f8cc 	bl	8005a80 <HAL_UART_Transmit>

    /* 可以再读 DHT11 ，如果需要 */
    DHT11_Read_Data(&humidity, &temperature);
 80018e8:	f207 1203 	addw	r2, r7, #259	; 0x103
 80018ec:	f507 7381 	add.w	r3, r7, #258	; 0x102
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fdc9 	bl	800148a <DHT11_Read_Data>

    /* 刷新 OLED 状态 */
    OLED_UpdateDisplay(g_oledState, &sensorData, g_deviceNickname, g_plantSpecies);
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <main+0x12c>)
 80018fa:	7818      	ldrb	r0, [r3, #0]
 80018fc:	4639      	mov	r1, r7
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <main+0x130>)
 8001900:	4a0a      	ldr	r2, [pc, #40]	; (800192c <main+0x134>)
 8001902:	f000 fdaf 	bl	8002464 <OLED_UpdateDisplay>

    HAL_Delay(1000);
 8001906:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800190a:	f001 fa89 	bl	8002e20 <HAL_Delay>
    SENSORS_ReadAll(&sensorData);
 800190e:	e7c2      	b.n	8001896 <main+0x9e>
 8001910:	0800ab80 	.word	0x0800ab80
 8001914:	2000095c 	.word	0x2000095c
 8001918:	0800ab90 	.word	0x0800ab90
 800191c:	20000230 	.word	0x20000230
 8001920:	0800ab9c 	.word	0x0800ab9c
 8001924:	2000022c 	.word	0x2000022c
 8001928:	2000001c 	.word	0x2000001c
 800192c:	20000008 	.word	0x20000008

08001930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b094      	sub	sp, #80	; 0x50
 8001934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001936:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800193a:	2228      	movs	r2, #40	; 0x28
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f004 ff38 	bl	80067b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001960:	2301      	movs	r3, #1
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001964:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800196a:	2300      	movs	r3, #0
 800196c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800196e:	2301      	movs	r3, #1
 8001970:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001972:	2302      	movs	r3, #2
 8001974:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001976:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800197a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800197c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001980:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001986:	4618      	mov	r0, r3
 8001988:	f003 f838 	bl	80049fc <HAL_RCC_OscConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001992:	f000 f9f3 	bl	8001d7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001996:	230f      	movs	r3, #15
 8001998:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800199a:	2302      	movs	r3, #2
 800199c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2102      	movs	r1, #2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f003 faa2 	bl	8004efc <HAL_RCC_ClockConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80019be:	f000 f9dd 	bl	8001d7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019c2:	2302      	movs	r3, #2
 80019c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80019c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019ca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 fc22 	bl	8005218 <HAL_RCCEx_PeriphCLKConfig>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80019da:	f000 f9cf 	bl	8001d7c <Error_Handler>
  }
}
 80019de:	bf00      	nop
 80019e0:	3750      	adds	r7, #80	; 0x50
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <parseCommand>:
// 解析命令函数
// 格式: <DEVICE_ID>:<COMMAND_TYPE>:<DATA>
// �??: "MCU01:p1:" or "MCU01:oled:listen" or "MCU01:nickname:小花"
// ------------------------------------------------
void parseCommand(const char* cmd)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b0ae      	sub	sp, #184	; 0xb8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  // 1. 拆分字符�??
  //    假设�??单处理，使用 strtok 来分�?? ":"
  char buffer[100];
  strncpy(buffer, cmd, sizeof(buffer)-1);
 80019f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019f4:	2263      	movs	r2, #99	; 0x63
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f005 fb63 	bl	80070c4 <strncpy>
  buffer[sizeof(buffer)-1] = '\0';
 80019fe:	2300      	movs	r3, #0
 8001a00:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  // 分割得到 3 段： DEVICE_ID, COMMAND_TYPE, DATA
  char* pDevice  = strtok(buffer, ":");
 8001a04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a08:	49af      	ldr	r1, [pc, #700]	; (8001cc8 <parseCommand+0x2e0>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f006 f990 	bl	8007d30 <strtok>
 8001a10:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
  char* pCommand = strtok(NULL, ":");
 8001a14:	49ac      	ldr	r1, [pc, #688]	; (8001cc8 <parseCommand+0x2e0>)
 8001a16:	2000      	movs	r0, #0
 8001a18:	f006 f98a 	bl	8007d30 <strtok>
 8001a1c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
  char* pData    = strtok(NULL, ":");
 8001a20:	49a9      	ldr	r1, [pc, #676]	; (8001cc8 <parseCommand+0x2e0>)
 8001a22:	2000      	movs	r0, #0
 8001a24:	f006 f984 	bl	8007d30 <strtok>
 8001a28:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

  if(pDevice == NULL || pCommand == NULL) {
 8001a2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 8143 	beq.w	8001cbc <parseCommand+0x2d4>
 8001a36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 813e 	beq.w	8001cbc <parseCommand+0x2d4>
    return; // 格式不正确，直接返回
  }

  // 2. 判断是否为本设备ID
  if(strcmp(pDevice, THIS_DEVICE_ID) != 0) {
 8001a40:	49a2      	ldr	r1, [pc, #648]	; (8001ccc <parseCommand+0x2e4>)
 8001a42:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001a46:	f7fe fb83 	bl	8000150 <strcmp>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f040 8137 	bne.w	8001cc0 <parseCommand+0x2d8>
    // 不是发给我们的，忽略
    return;
  }

  // 3. 根据 COMMAND_TYPE 判断执行动作
  if(strcmp(pCommand, "p1") == 0) {
 8001a52:	499f      	ldr	r1, [pc, #636]	; (8001cd0 <parseCommand+0x2e8>)
 8001a54:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001a58:	f7fe fb7a 	bl	8000150 <strcmp>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <parseCommand+0x88>
    // 将PA8置高
    setPumpState(1);
 8001a62:	2001      	movs	r0, #1
 8001a64:	f000 f95e 	bl	8001d24 <setPumpState>
    updateOLEDState(OLED_STATE_WATERING);
 8001a68:	2003      	movs	r0, #3
 8001a6a:	f000 f977 	bl	8001d5c <updateOLEDState>
 8001a6e:	e128      	b.n	8001cc2 <parseCommand+0x2da>
  }
  else if(strcmp(pCommand, "p0") == 0) {
 8001a70:	4998      	ldr	r1, [pc, #608]	; (8001cd4 <parseCommand+0x2ec>)
 8001a72:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001a76:	f7fe fb6b 	bl	8000150 <strcmp>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d106      	bne.n	8001a8e <parseCommand+0xa6>
    // 将PA15置低
    setPumpState(0);
 8001a80:	2000      	movs	r0, #0
 8001a82:	f000 f94f 	bl	8001d24 <setPumpState>
    updateOLEDState(OLED_STATE_NORMAL);
 8001a86:	2000      	movs	r0, #0
 8001a88:	f000 f968 	bl	8001d5c <updateOLEDState>
 8001a8c:	e119      	b.n	8001cc2 <parseCommand+0x2da>
  }
  else if(strcmp(pCommand, "oled") == 0) {
 8001a8e:	4992      	ldr	r1, [pc, #584]	; (8001cd8 <parseCommand+0x2f0>)
 8001a90:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001a94:	f7fe fb5c 	bl	8000150 <strcmp>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d135      	bne.n	8001b0a <parseCommand+0x122>
    // 切换OLED状�??
    // pData 可能�?? "normal", "listen", "talk", "water"
    if(pData) {
 8001a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 810d 	beq.w	8001cc2 <parseCommand+0x2da>
      if(strcmp(pData, "normal") == 0) {
 8001aa8:	498c      	ldr	r1, [pc, #560]	; (8001cdc <parseCommand+0x2f4>)
 8001aaa:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001aae:	f7fe fb4f 	bl	8000150 <strcmp>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d103      	bne.n	8001ac0 <parseCommand+0xd8>
        updateOLEDState(OLED_STATE_NORMAL);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f000 f94f 	bl	8001d5c <updateOLEDState>
 8001abe:	e100      	b.n	8001cc2 <parseCommand+0x2da>
      } else if(strcmp(pData, "listen") == 0) {
 8001ac0:	4987      	ldr	r1, [pc, #540]	; (8001ce0 <parseCommand+0x2f8>)
 8001ac2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001ac6:	f7fe fb43 	bl	8000150 <strcmp>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d103      	bne.n	8001ad8 <parseCommand+0xf0>
        updateOLEDState(OLED_STATE_LISTENING);
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f000 f943 	bl	8001d5c <updateOLEDState>
 8001ad6:	e0f4      	b.n	8001cc2 <parseCommand+0x2da>
      } else if(strcmp(pData, "talk") == 0) {
 8001ad8:	4982      	ldr	r1, [pc, #520]	; (8001ce4 <parseCommand+0x2fc>)
 8001ada:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001ade:	f7fe fb37 	bl	8000150 <strcmp>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d103      	bne.n	8001af0 <parseCommand+0x108>
        updateOLEDState(OLED_STATE_TALKING);
 8001ae8:	2002      	movs	r0, #2
 8001aea:	f000 f937 	bl	8001d5c <updateOLEDState>
 8001aee:	e0e8      	b.n	8001cc2 <parseCommand+0x2da>
      } else if(strcmp(pData, "water") == 0) {
 8001af0:	497d      	ldr	r1, [pc, #500]	; (8001ce8 <parseCommand+0x300>)
 8001af2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001af6:	f7fe fb2b 	bl	8000150 <strcmp>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f040 80e0 	bne.w	8001cc2 <parseCommand+0x2da>
        updateOLEDState(OLED_STATE_WATERING);
 8001b02:	2003      	movs	r0, #3
 8001b04:	f000 f92a 	bl	8001d5c <updateOLEDState>
 8001b08:	e0db      	b.n	8001cc2 <parseCommand+0x2da>
      }
    }
  }
  else if(strcmp(pCommand, "threshold0") == 0) {
 8001b0a:	4978      	ldr	r1, [pc, #480]	; (8001cec <parseCommand+0x304>)
 8001b0c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001b10:	f7fe fb1e 	bl	8000150 <strcmp>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d130      	bne.n	8001b7c <parseCommand+0x194>
    // 设置浇水阈�??
    if(pData) {
 8001b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 80cf 	beq.w	8001cc2 <parseCommand+0x2da>
      float newVal = atof(pData);
 8001b24:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001b28:	f004 fdfa 	bl	8006720 <atof>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7fe ffd2 	bl	8000adc <__aeabi_d2f>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      g_wateringThreshold0 = newVal;
 8001b3e:	4a6c      	ldr	r2, [pc, #432]	; (8001cf0 <parseCommand+0x308>)
 8001b40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b44:	6013      	str	r3, [r2, #0]
      char ack[50];
      sprintf(ack, "设置浇水下限设置为%u\r\n", g_wateringThreshold0);
 8001b46:	4b6a      	ldr	r3, [pc, #424]	; (8001cf0 <parseCommand+0x308>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fc76 	bl	800043c <__aeabi_f2d>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	f107 0008 	add.w	r0, r7, #8
 8001b58:	4966      	ldr	r1, [pc, #408]	; (8001cf4 <parseCommand+0x30c>)
 8001b5a:	f005 fa93 	bl	8007084 <siprintf>

      HAL_UART_Transmit(&huart1, (uint8_t*)ack, strlen(ack), HAL_MAX_DELAY);
 8001b5e:	f107 0308 	add.w	r3, r7, #8
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fafe 	bl	8000164 <strlen>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	f107 0108 	add.w	r1, r7, #8
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
 8001b74:	4860      	ldr	r0, [pc, #384]	; (8001cf8 <parseCommand+0x310>)
 8001b76:	f003 ff83 	bl	8005a80 <HAL_UART_Transmit>
 8001b7a:	e0a2      	b.n	8001cc2 <parseCommand+0x2da>
    }
  }
  else if(strcmp(pCommand, "threshold1") == 0) {
 8001b7c:	495f      	ldr	r1, [pc, #380]	; (8001cfc <parseCommand+0x314>)
 8001b7e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001b82:	f7fe fae5 	bl	8000150 <strcmp>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d130      	bne.n	8001bee <parseCommand+0x206>
      // 设置浇水阈�??
      if(pData) {
 8001b8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 8096 	beq.w	8001cc2 <parseCommand+0x2da>
        float newVal = atof(pData);
 8001b96:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001b9a:	f004 fdc1 	bl	8006720 <atof>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f7fe ff99 	bl	8000adc <__aeabi_d2f>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        g_wateringThreshold1 = newVal;
 8001bb0:	4a53      	ldr	r2, [pc, #332]	; (8001d00 <parseCommand+0x318>)
 8001bb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bb6:	6013      	str	r3, [r2, #0]
        char ack[50];
        sprintf(ack, "设置浇水上限设置为%u\r\n", g_wateringThreshold1);
 8001bb8:	4b51      	ldr	r3, [pc, #324]	; (8001d00 <parseCommand+0x318>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fc3d 	bl	800043c <__aeabi_f2d>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	f107 0008 	add.w	r0, r7, #8
 8001bca:	494e      	ldr	r1, [pc, #312]	; (8001d04 <parseCommand+0x31c>)
 8001bcc:	f005 fa5a 	bl	8007084 <siprintf>

        HAL_UART_Transmit(&huart1, (uint8_t*)ack, strlen(ack), HAL_MAX_DELAY);
 8001bd0:	f107 0308 	add.w	r3, r7, #8
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fac5 	bl	8000164 <strlen>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	f107 0108 	add.w	r1, r7, #8
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	4844      	ldr	r0, [pc, #272]	; (8001cf8 <parseCommand+0x310>)
 8001be8:	f003 ff4a 	bl	8005a80 <HAL_UART_Transmit>
 8001bec:	e069      	b.n	8001cc2 <parseCommand+0x2da>
      }
    }
  else if(strcmp(pCommand, "nickname") == 0) {
 8001bee:	4946      	ldr	r1, [pc, #280]	; (8001d08 <parseCommand+0x320>)
 8001bf0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001bf4:	f7fe faac 	bl	8000150 <strcmp>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d122      	bne.n	8001c44 <parseCommand+0x25c>
    // 设置设备昵称
    if(pData) {
 8001bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d05d      	beq.n	8001cc2 <parseCommand+0x2da>
      strncpy(g_deviceNickname, pData, sizeof(g_deviceNickname)-1);
 8001c06:	2213      	movs	r2, #19
 8001c08:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001c0c:	483f      	ldr	r0, [pc, #252]	; (8001d0c <parseCommand+0x324>)
 8001c0e:	f005 fa59 	bl	80070c4 <strncpy>
      g_deviceNickname[sizeof(g_deviceNickname)-1] = '\0';
 8001c12:	4b3e      	ldr	r3, [pc, #248]	; (8001d0c <parseCommand+0x324>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	74da      	strb	r2, [r3, #19]
      char ack[50];
      sprintf(ack, "昵称设置为%s\r\n", g_deviceNickname);
 8001c18:	f107 0308 	add.w	r3, r7, #8
 8001c1c:	4a3b      	ldr	r2, [pc, #236]	; (8001d0c <parseCommand+0x324>)
 8001c1e:	493c      	ldr	r1, [pc, #240]	; (8001d10 <parseCommand+0x328>)
 8001c20:	4618      	mov	r0, r3
 8001c22:	f005 fa2f 	bl	8007084 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)ack, strlen(ack), HAL_MAX_DELAY);
 8001c26:	f107 0308 	add.w	r3, r7, #8
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fa9a 	bl	8000164 <strlen>
 8001c30:	4603      	mov	r3, r0
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	f107 0108 	add.w	r1, r7, #8
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3c:	482e      	ldr	r0, [pc, #184]	; (8001cf8 <parseCommand+0x310>)
 8001c3e:	f003 ff1f 	bl	8005a80 <HAL_UART_Transmit>
 8001c42:	e03e      	b.n	8001cc2 <parseCommand+0x2da>
    }
  }
  else if(strcmp(pCommand, "plant") == 0) {
 8001c44:	4933      	ldr	r1, [pc, #204]	; (8001d14 <parseCommand+0x32c>)
 8001c46:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001c4a:	f7fe fa81 	bl	8000150 <strcmp>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d122      	bne.n	8001c9a <parseCommand+0x2b2>
    // 设置植物类型
    if(pData) {
 8001c54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d032      	beq.n	8001cc2 <parseCommand+0x2da>
      strncpy(g_plantSpecies, pData, sizeof(g_plantSpecies)-1);
 8001c5c:	2213      	movs	r2, #19
 8001c5e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001c62:	482d      	ldr	r0, [pc, #180]	; (8001d18 <parseCommand+0x330>)
 8001c64:	f005 fa2e 	bl	80070c4 <strncpy>
      g_plantSpecies[sizeof(g_plantSpecies)-1] = '\0';
 8001c68:	4b2b      	ldr	r3, [pc, #172]	; (8001d18 <parseCommand+0x330>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	74da      	strb	r2, [r3, #19]
      char ack[50];
      sprintf(ack, "植物设置为%s\r\n", g_plantSpecies);
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	4a29      	ldr	r2, [pc, #164]	; (8001d18 <parseCommand+0x330>)
 8001c74:	4929      	ldr	r1, [pc, #164]	; (8001d1c <parseCommand+0x334>)
 8001c76:	4618      	mov	r0, r3
 8001c78:	f005 fa04 	bl	8007084 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)ack, strlen(ack), HAL_MAX_DELAY);
 8001c7c:	f107 0308 	add.w	r3, r7, #8
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fa6f 	bl	8000164 <strlen>
 8001c86:	4603      	mov	r3, r0
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	f107 0108 	add.w	r1, r7, #8
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	4819      	ldr	r0, [pc, #100]	; (8001cf8 <parseCommand+0x310>)
 8001c94:	f003 fef4 	bl	8005a80 <HAL_UART_Transmit>
 8001c98:	e013      	b.n	8001cc2 <parseCommand+0x2da>
    }
  }
  else {
    // 未知命令
    const char* unknown = "Unknown Command.\r\n";
 8001c9a:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <parseCommand+0x338>)
 8001c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    HAL_UART_Transmit(&huart1, (uint8_t*)unknown, strlen(unknown), HAL_MAX_DELAY);
 8001ca0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001ca4:	f7fe fa5e 	bl	8000164 <strlen>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001cb4:	4810      	ldr	r0, [pc, #64]	; (8001cf8 <parseCommand+0x310>)
 8001cb6:	f003 fee3 	bl	8005a80 <HAL_UART_Transmit>
 8001cba:	e002      	b.n	8001cc2 <parseCommand+0x2da>
    return; // 格式不正确，直接返回
 8001cbc:	bf00      	nop
 8001cbe:	e000      	b.n	8001cc2 <parseCommand+0x2da>
    return;
 8001cc0:	bf00      	nop
  }
}
 8001cc2:	37b8      	adds	r7, #184	; 0xb8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	0800abc4 	.word	0x0800abc4
 8001ccc:	0800abc8 	.word	0x0800abc8
 8001cd0:	0800abd0 	.word	0x0800abd0
 8001cd4:	0800abd4 	.word	0x0800abd4
 8001cd8:	0800abd8 	.word	0x0800abd8
 8001cdc:	0800abe0 	.word	0x0800abe0
 8001ce0:	0800abe8 	.word	0x0800abe8
 8001ce4:	0800abf0 	.word	0x0800abf0
 8001ce8:	0800abf8 	.word	0x0800abf8
 8001cec:	0800ac00 	.word	0x0800ac00
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	0800ac0c 	.word	0x0800ac0c
 8001cf8:	2000095c 	.word	0x2000095c
 8001cfc:	0800ac2c 	.word	0x0800ac2c
 8001d00:	20000004 	.word	0x20000004
 8001d04:	0800ac38 	.word	0x0800ac38
 8001d08:	0800ac58 	.word	0x0800ac58
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	0800ac64 	.word	0x0800ac64
 8001d14:	0800ac78 	.word	0x0800ac78
 8001d18:	2000001c 	.word	0x2000001c
 8001d1c:	0800ac80 	.word	0x0800ac80
 8001d20:	0800ac94 	.word	0x0800ac94

08001d24 <setPumpState>:
// --------------------------------------------
// 控制水泵引脚
// p1 -> high, p0 -> low
// --------------------------------------------
void setPumpState(uint8_t on)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  if(on) {
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d006      	beq.n	8001d42 <setPumpState+0x1e>
    HAL_GPIO_WritePin(PUMP_GPIO_PORT, PUMP_GPIO_PIN, GPIO_PIN_SET);
 8001d34:	2201      	movs	r2, #1
 8001d36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d3a:	4807      	ldr	r0, [pc, #28]	; (8001d58 <setPumpState+0x34>)
 8001d3c:	f002 f9a9 	bl	8004092 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(PUMP_GPIO_PORT, PUMP_GPIO_PIN, GPIO_PIN_RESET);
  }
}
 8001d40:	e005      	b.n	8001d4e <setPumpState+0x2a>
    HAL_GPIO_WritePin(PUMP_GPIO_PORT, PUMP_GPIO_PIN, GPIO_PIN_RESET);
 8001d42:	2200      	movs	r2, #0
 8001d44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d48:	4803      	ldr	r0, [pc, #12]	; (8001d58 <setPumpState+0x34>)
 8001d4a:	f002 f9a2 	bl	8004092 <HAL_GPIO_WritePin>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40010800 	.word	0x40010800

08001d5c <updateOLEDState>:

// --------------------------------------------
// 更新全局OLED状�??
// --------------------------------------------
void updateOLEDState(OledDisplayState newState)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  g_oledState = newState;
 8001d66:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <updateOLEDState+0x1c>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	7013      	strb	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	2000022c 	.word	0x2000022c

08001d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d80:	b672      	cpsid	i
}
 8001d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <Error_Handler+0x8>
	...

08001d88 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c2, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9c:	9200      	str	r2, [sp, #0]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	2178      	movs	r1, #120	; 0x78
 8001da2:	4803      	ldr	r0, [pc, #12]	; (8001db0 <OLED_Send+0x28>)
 8001da4:	f002 fad2 	bl	800434c <HAL_I2C_Master_Transmit>
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000438 	.word	0x20000438

08001db4 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8001dbe:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <OLED_SendCmd+0x20>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8001dc4:	2102      	movs	r1, #2
 8001dc6:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <OLED_SendCmd+0x20>)
 8001dc8:	f7ff ffde 	bl	8001d88 <OLED_Send>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000374 	.word	0x20000374

08001dd8 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8001ddc:	20ae      	movs	r0, #174	; 0xae
 8001dde:	f7ff ffe9 	bl	8001db4 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8001de2:	2020      	movs	r0, #32
 8001de4:	f7ff ffe6 	bl	8001db4 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001de8:	2010      	movs	r0, #16
 8001dea:	f7ff ffe3 	bl	8001db4 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8001dee:	20b0      	movs	r0, #176	; 0xb0
 8001df0:	f7ff ffe0 	bl	8001db4 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8001df4:	20c8      	movs	r0, #200	; 0xc8
 8001df6:	f7ff ffdd 	bl	8001db4 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7ff ffda 	bl	8001db4 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001e00:	2010      	movs	r0, #16
 8001e02:	f7ff ffd7 	bl	8001db4 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 8001e06:	2040      	movs	r0, #64	; 0x40
 8001e08:	f7ff ffd4 	bl	8001db4 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 8001e0c:	2081      	movs	r0, #129	; 0x81
 8001e0e:	f7ff ffd1 	bl	8001db4 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8001e12:	20df      	movs	r0, #223	; 0xdf
 8001e14:	f7ff ffce 	bl	8001db4 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8001e18:	20a1      	movs	r0, #161	; 0xa1
 8001e1a:	f7ff ffcb 	bl	8001db4 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 8001e1e:	20a6      	movs	r0, #166	; 0xa6
 8001e20:	f7ff ffc8 	bl	8001db4 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8001e24:	20a8      	movs	r0, #168	; 0xa8
 8001e26:	f7ff ffc5 	bl	8001db4 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 8001e2a:	203f      	movs	r0, #63	; 0x3f
 8001e2c:	f7ff ffc2 	bl	8001db4 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8001e30:	20a4      	movs	r0, #164	; 0xa4
 8001e32:	f7ff ffbf 	bl	8001db4 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8001e36:	20d3      	movs	r0, #211	; 0xd3
 8001e38:	f7ff ffbc 	bl	8001db4 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7ff ffb9 	bl	8001db4 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8001e42:	20d5      	movs	r0, #213	; 0xd5
 8001e44:	f7ff ffb6 	bl	8001db4 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8001e48:	20f0      	movs	r0, #240	; 0xf0
 8001e4a:	f7ff ffb3 	bl	8001db4 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 8001e4e:	20d9      	movs	r0, #217	; 0xd9
 8001e50:	f7ff ffb0 	bl	8001db4 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8001e54:	2022      	movs	r0, #34	; 0x22
 8001e56:	f7ff ffad 	bl	8001db4 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 8001e5a:	20da      	movs	r0, #218	; 0xda
 8001e5c:	f7ff ffaa 	bl	8001db4 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8001e60:	2012      	movs	r0, #18
 8001e62:	f7ff ffa7 	bl	8001db4 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8001e66:	20db      	movs	r0, #219	; 0xdb
 8001e68:	f7ff ffa4 	bl	8001db4 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8001e6c:	2020      	movs	r0, #32
 8001e6e:	f7ff ffa1 	bl	8001db4 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8001e72:	208d      	movs	r0, #141	; 0x8d
 8001e74:	f7ff ff9e 	bl	8001db4 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8001e78:	2014      	movs	r0, #20
 8001e7a:	f7ff ff9b 	bl	8001db4 <OLED_SendCmd>

  OLED_NewFrame();
 8001e7e:	f000 f807 	bl	8001e90 <OLED_NewFrame>
  OLED_ShowFrame();
 8001e82:	f000 f811 	bl	8001ea8 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8001e86:	20af      	movs	r0, #175	; 0xaf
 8001e88:	f7ff ff94 	bl	8001db4 <OLED_SendCmd>
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8001e94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <OLED_NewFrame+0x14>)
 8001e9c:	f004 fc8a 	bl	80067b4 <memset>
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2000048c 	.word	0x2000048c

08001ea8 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <OLED_ShowFrame+0x5c>)
 8001eb0:	2240      	movs	r2, #64	; 0x40
 8001eb2:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	71fb      	strb	r3, [r7, #7]
 8001eb8:	e01b      	b.n	8001ef2 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	3b50      	subs	r3, #80	; 0x50
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff77 	bl	8001db4 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f7ff ff74 	bl	8001db4 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8001ecc:	2010      	movs	r0, #16
 8001ece:	f7ff ff71 	bl	8001db4 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8001ed2:	480d      	ldr	r0, [pc, #52]	; (8001f08 <OLED_ShowFrame+0x60>)
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	01db      	lsls	r3, r3, #7
 8001ed8:	4a0c      	ldr	r2, [pc, #48]	; (8001f0c <OLED_ShowFrame+0x64>)
 8001eda:	4413      	add	r3, r2
 8001edc:	2280      	movs	r2, #128	; 0x80
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f004 fc5a 	bl	8006798 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8001ee4:	2181      	movs	r1, #129	; 0x81
 8001ee6:	4807      	ldr	r0, [pc, #28]	; (8001f04 <OLED_ShowFrame+0x5c>)
 8001ee8:	f7ff ff4e 	bl	8001d88 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	71fb      	strb	r3, [r7, #7]
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	2b07      	cmp	r3, #7
 8001ef6:	d9e0      	bls.n	8001eba <OLED_ShowFrame+0x12>
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000378 	.word	0x20000378
 8001f08:	20000379 	.word	0x20000379
 8001f0c:	2000048c 	.word	0x2000048c

08001f10 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 8001f10:	b490      	push	{r4, r7}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4604      	mov	r4, r0
 8001f18:	4608      	mov	r0, r1
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4623      	mov	r3, r4
 8001f20:	71fb      	strb	r3, [r7, #7]
 8001f22:	4603      	mov	r3, r0
 8001f24:	71bb      	strb	r3, [r7, #6]
 8001f26:	460b      	mov	r3, r1
 8001f28:	717b      	strb	r3, [r7, #5]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	2b07      	cmp	r3, #7
 8001f32:	d860      	bhi.n	8001ff6 <OLED_SetByte_Fine+0xe6>
 8001f34:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	db5c      	blt.n	8001ff6 <OLED_SetByte_Fine+0xe6>
    return;
  if (color)
 8001f3c:	7d3b      	ldrb	r3, [r7, #20]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <OLED_SetByte_Fine+0x38>
    data = ~data;
 8001f42:	797b      	ldrb	r3, [r7, #5]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8001f48:	7c3b      	ldrb	r3, [r7, #16]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	22ff      	movs	r2, #255	; 0xff
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	b25a      	sxtb	r2, r3
 8001f54:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	b25a      	sxtb	r2, r3
 8001f5c:	793b      	ldrb	r3, [r7, #4]
 8001f5e:	f1c3 0308 	rsb	r3, r3, #8
 8001f62:	21ff      	movs	r1, #255	; 0xff
 8001f64:	fa41 f303 	asr.w	r3, r1, r3
 8001f68:	b25b      	sxtb	r3, r3
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	b25b      	sxtb	r3, r3
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	4b23      	ldr	r3, [pc, #140]	; (8002000 <OLED_SetByte_Fine+0xf0>)
 8001f72:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8001f74:	79fa      	ldrb	r2, [r7, #7]
 8001f76:	79bb      	ldrb	r3, [r7, #6]
 8001f78:	4922      	ldr	r1, [pc, #136]	; (8002004 <OLED_SetByte_Fine+0xf4>)
 8001f7a:	01d2      	lsls	r2, r2, #7
 8001f7c:	440a      	add	r2, r1
 8001f7e:	4413      	add	r3, r2
 8001f80:	7818      	ldrb	r0, [r3, #0]
 8001f82:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <OLED_SetByte_Fine+0xf0>)
 8001f84:	7819      	ldrb	r1, [r3, #0]
 8001f86:	79fa      	ldrb	r2, [r7, #7]
 8001f88:	79bb      	ldrb	r3, [r7, #6]
 8001f8a:	4001      	ands	r1, r0
 8001f8c:	b2c8      	uxtb	r0, r1
 8001f8e:	491d      	ldr	r1, [pc, #116]	; (8002004 <OLED_SetByte_Fine+0xf4>)
 8001f90:	01d2      	lsls	r2, r2, #7
 8001f92:	440a      	add	r2, r1
 8001f94:	4413      	add	r3, r2
 8001f96:	4602      	mov	r2, r0
 8001f98:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8001f9a:	7c3b      	ldrb	r3, [r7, #16]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	22ff      	movs	r2, #255	; 0xff
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	b25b      	sxtb	r3, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	b25a      	sxtb	r2, r3
 8001faa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	b25a      	sxtb	r2, r3
 8001fb2:	793b      	ldrb	r3, [r7, #4]
 8001fb4:	f1c3 0308 	rsb	r3, r3, #8
 8001fb8:	21ff      	movs	r1, #255	; 0xff
 8001fba:	fa41 f303 	asr.w	r3, r1, r3
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	b25b      	sxtb	r3, r3
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <OLED_SetByte_Fine+0xf0>)
 8001fcc:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8001fce:	79fa      	ldrb	r2, [r7, #7]
 8001fd0:	79bb      	ldrb	r3, [r7, #6]
 8001fd2:	490c      	ldr	r1, [pc, #48]	; (8002004 <OLED_SetByte_Fine+0xf4>)
 8001fd4:	01d2      	lsls	r2, r2, #7
 8001fd6:	440a      	add	r2, r1
 8001fd8:	4413      	add	r3, r2
 8001fda:	7818      	ldrb	r0, [r3, #0]
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <OLED_SetByte_Fine+0xf0>)
 8001fde:	7819      	ldrb	r1, [r3, #0]
 8001fe0:	79fa      	ldrb	r2, [r7, #7]
 8001fe2:	79bb      	ldrb	r3, [r7, #6]
 8001fe4:	4301      	orrs	r1, r0
 8001fe6:	b2c8      	uxtb	r0, r1
 8001fe8:	4906      	ldr	r1, [pc, #24]	; (8002004 <OLED_SetByte_Fine+0xf4>)
 8001fea:	01d2      	lsls	r2, r2, #7
 8001fec:	440a      	add	r2, r1
 8001fee:	4413      	add	r3, r2
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	e000      	b.n	8001ff8 <OLED_SetByte_Fine+0xe8>
    return;
 8001ff6:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc90      	pop	{r4, r7}
 8001ffe:	4770      	bx	lr
 8002000:	200003f9 	.word	0x200003f9
 8002004:	2000048c 	.word	0x2000048c

08002008 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 8002008:	b5b0      	push	{r4, r5, r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af02      	add	r7, sp, #8
 800200e:	4604      	mov	r4, r0
 8002010:	4608      	mov	r0, r1
 8002012:	4611      	mov	r1, r2
 8002014:	461a      	mov	r2, r3
 8002016:	4623      	mov	r3, r4
 8002018:	71fb      	strb	r3, [r7, #7]
 800201a:	4603      	mov	r3, r0
 800201c:	71bb      	strb	r3, [r7, #6]
 800201e:	460b      	mov	r3, r1
 8002020:	717b      	strb	r3, [r7, #5]
 8002022:	4613      	mov	r3, r2
 8002024:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8002026:	79bb      	ldrb	r3, [r7, #6]
 8002028:	08db      	lsrs	r3, r3, #3
 800202a:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 800202c:	79bb      	ldrb	r3, [r7, #6]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8002034:	7bba      	ldrb	r2, [r7, #14]
 8002036:	793b      	ldrb	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	2b08      	cmp	r3, #8
 800203c:	dd29      	ble.n	8002092 <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 800203e:	797a      	ldrb	r2, [r7, #5]
 8002040:	7bbb      	ldrb	r3, [r7, #14]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	b2da      	uxtb	r2, r3
 8002048:	7bbc      	ldrb	r4, [r7, #14]
 800204a:	79f9      	ldrb	r1, [r7, #7]
 800204c:	7bf8      	ldrb	r0, [r7, #15]
 800204e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	2307      	movs	r3, #7
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	4623      	mov	r3, r4
 800205a:	f7ff ff59 	bl	8001f10 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	3301      	adds	r3, #1
 8002062:	b2d8      	uxtb	r0, r3
 8002064:	797a      	ldrb	r2, [r7, #5]
 8002066:	7bbb      	ldrb	r3, [r7, #14]
 8002068:	f1c3 0308 	rsb	r3, r3, #8
 800206c:	fa42 f303 	asr.w	r3, r2, r3
 8002070:	b2dc      	uxtb	r4, r3
 8002072:	793a      	ldrb	r2, [r7, #4]
 8002074:	7bbb      	ldrb	r3, [r7, #14]
 8002076:	4413      	add	r3, r2
 8002078:	b2db      	uxtb	r3, r3
 800207a:	3b09      	subs	r3, #9
 800207c:	b2db      	uxtb	r3, r3
 800207e:	79f9      	ldrb	r1, [r7, #7]
 8002080:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002084:	9201      	str	r2, [sp, #4]
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	2300      	movs	r3, #0
 800208a:	4622      	mov	r2, r4
 800208c:	f7ff ff40 	bl	8001f10 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8002090:	e015      	b.n	80020be <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8002092:	797a      	ldrb	r2, [r7, #5]
 8002094:	7bbb      	ldrb	r3, [r7, #14]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	b2dc      	uxtb	r4, r3
 800209c:	7bba      	ldrb	r2, [r7, #14]
 800209e:	793b      	ldrb	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	7bbd      	ldrb	r5, [r7, #14]
 80020aa:	79f9      	ldrb	r1, [r7, #7]
 80020ac:	7bf8      	ldrb	r0, [r7, #15]
 80020ae:	f897 2020 	ldrb.w	r2, [r7, #32]
 80020b2:	9201      	str	r2, [sp, #4]
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	462b      	mov	r3, r5
 80020b8:	4622      	mov	r2, r4
 80020ba:	f7ff ff29 	bl	8001f10 <OLED_SetByte_Fine>
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bdb0      	pop	{r4, r5, r7, pc}

080020c6 <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 80020c6:	b590      	push	{r4, r7, lr}
 80020c8:	b087      	sub	sp, #28
 80020ca:	af02      	add	r7, sp, #8
 80020cc:	4604      	mov	r4, r0
 80020ce:	4608      	mov	r0, r1
 80020d0:	4611      	mov	r1, r2
 80020d2:	461a      	mov	r2, r3
 80020d4:	4623      	mov	r3, r4
 80020d6:	71fb      	strb	r3, [r7, #7]
 80020d8:	4603      	mov	r3, r0
 80020da:	71bb      	strb	r3, [r7, #6]
 80020dc:	460b      	mov	r3, r1
 80020de:	717b      	strb	r3, [r7, #5]
 80020e0:	4613      	mov	r3, r2
 80020e2:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80020e4:	79bb      	ldrb	r3, [r7, #6]
 80020e6:	08db      	lsrs	r3, r3, #3
 80020e8:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80020ea:	79bb      	ldrb	r3, [r7, #6]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80020f2:	797a      	ldrb	r2, [r7, #5]
 80020f4:	7bbb      	ldrb	r3, [r7, #14]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	7bbc      	ldrb	r4, [r7, #14]
 80020fe:	79f9      	ldrb	r1, [r7, #7]
 8002100:	7bf8      	ldrb	r0, [r7, #15]
 8002102:	793b      	ldrb	r3, [r7, #4]
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	2307      	movs	r3, #7
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	4623      	mov	r3, r4
 800210c:	f7ff ff00 	bl	8001f10 <OLED_SetByte_Fine>
  if (bit)
 8002110:	7bbb      	ldrb	r3, [r7, #14]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d014      	beq.n	8002140 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	3301      	adds	r3, #1
 800211a:	b2d8      	uxtb	r0, r3
 800211c:	797a      	ldrb	r2, [r7, #5]
 800211e:	7bbb      	ldrb	r3, [r7, #14]
 8002120:	f1c3 0308 	rsb	r3, r3, #8
 8002124:	fa42 f303 	asr.w	r3, r2, r3
 8002128:	b2dc      	uxtb	r4, r3
 800212a:	7bbb      	ldrb	r3, [r7, #14]
 800212c:	3b01      	subs	r3, #1
 800212e:	b2db      	uxtb	r3, r3
 8002130:	79f9      	ldrb	r1, [r7, #7]
 8002132:	793a      	ldrb	r2, [r7, #4]
 8002134:	9201      	str	r2, [sp, #4]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2300      	movs	r3, #0
 800213a:	4622      	mov	r2, r4
 800213c:	f7ff fee8 	bl	8001f10 <OLED_SetByte_Fine>
  }
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	bd90      	pop	{r4, r7, pc}

08002148 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b087      	sub	sp, #28
 800214c:	af02      	add	r7, sp, #8
 800214e:	603a      	str	r2, [r7, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
 8002156:	460b      	mov	r3, r1
 8002158:	71bb      	strb	r3, [r7, #6]
 800215a:	4613      	mov	r3, r2
 800215c:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 800215e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002162:	08db      	lsrs	r3, r3, #3
 8002164:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8002166:	f897 3020 	ldrb.w	r3, [r7, #32]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
 8002174:	e025      	b.n	80021c2 <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 8002176:	2300      	movs	r3, #0
 8002178:	73bb      	strb	r3, [r7, #14]
 800217a:	e01b      	b.n	80021b4 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 800217c:	79fa      	ldrb	r2, [r7, #7]
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	4413      	add	r3, r2
 8002182:	b2d8      	uxtb	r0, r3
 8002184:	7bbb      	ldrb	r3, [r7, #14]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	b2da      	uxtb	r2, r3
 800218a:	79bb      	ldrb	r3, [r7, #6]
 800218c:	4413      	add	r3, r2
 800218e:	b2dc      	uxtb	r4, r3
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	7bbb      	ldrb	r3, [r7, #14]
 8002194:	7979      	ldrb	r1, [r7, #5]
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	461a      	mov	r2, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	4413      	add	r3, r2
 80021a2:	781a      	ldrb	r2, [r3, #0]
 80021a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021a8:	4621      	mov	r1, r4
 80021aa:	f7ff ff8c 	bl	80020c6 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 80021ae:	7bbb      	ldrb	r3, [r7, #14]
 80021b0:	3301      	adds	r3, #1
 80021b2:	73bb      	strb	r3, [r7, #14]
 80021b4:	7bba      	ldrb	r2, [r7, #14]
 80021b6:	7b3b      	ldrb	r3, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d3df      	bcc.n	800217c <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	3301      	adds	r3, #1
 80021c0:	73fb      	strb	r3, [r7, #15]
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	797b      	ldrb	r3, [r7, #5]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d3d5      	bcc.n	8002176 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 80021ca:	7afb      	ldrb	r3, [r7, #11]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d028      	beq.n	8002222 <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 80021d0:	797b      	ldrb	r3, [r7, #5]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	7b3a      	ldrb	r2, [r7, #12]
 80021d6:	b292      	uxth	r2, r2
 80021d8:	fb02 f303 	mul.w	r3, r2, r3
 80021dc:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 80021de:	2300      	movs	r3, #0
 80021e0:	737b      	strb	r3, [r7, #13]
 80021e2:	e01a      	b.n	800221a <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 80021e4:	79fa      	ldrb	r2, [r7, #7]
 80021e6:	7b7b      	ldrb	r3, [r7, #13]
 80021e8:	4413      	add	r3, r2
 80021ea:	b2d8      	uxtb	r0, r3
 80021ec:	7b3b      	ldrb	r3, [r7, #12]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	79bb      	ldrb	r3, [r7, #6]
 80021f4:	4413      	add	r3, r2
 80021f6:	b2d9      	uxtb	r1, r3
 80021f8:	893a      	ldrh	r2, [r7, #8]
 80021fa:	7b7b      	ldrb	r3, [r7, #13]
 80021fc:	4413      	add	r3, r2
 80021fe:	461a      	mov	r2, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4413      	add	r3, r2
 8002204:	781a      	ldrb	r2, [r3, #0]
 8002206:	7afc      	ldrb	r4, [r7, #11]
 8002208:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	4623      	mov	r3, r4
 8002210:	f7ff fefa 	bl	8002008 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8002214:	7b7b      	ldrb	r3, [r7, #13]
 8002216:	3301      	adds	r3, #1
 8002218:	737b      	strb	r3, [r7, #13]
 800221a:	7b7a      	ldrb	r2, [r7, #13]
 800221c:	797b      	ldrb	r3, [r7, #5]
 800221e:	429a      	cmp	r2, r3
 8002220:	d3e0      	bcc.n	80021e4 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bd90      	pop	{r4, r7, pc}

0800222a <OLED_DrawImage>:
 * @param y 起始点纵坐标
 * @param img 图片
 * @param color 颜色
 */
void OLED_DrawImage(uint8_t x, uint8_t y, const Image *img, OLED_ColorMode color)
{
 800222a:	b5b0      	push	{r4, r5, r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af02      	add	r7, sp, #8
 8002230:	603a      	str	r2, [r7, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	4603      	mov	r3, r0
 8002236:	71fb      	strb	r3, [r7, #7]
 8002238:	460b      	mov	r3, r1
 800223a:	71bb      	strb	r3, [r7, #6]
 800223c:	4613      	mov	r3, r2
 800223e:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, img->data, img->w, img->h, color);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685c      	ldr	r4, [r3, #4]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	781d      	ldrb	r5, [r3, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	785b      	ldrb	r3, [r3, #1]
 800224c:	79b9      	ldrb	r1, [r7, #6]
 800224e:	79f8      	ldrb	r0, [r7, #7]
 8002250:	797a      	ldrb	r2, [r7, #5]
 8002252:	9201      	str	r2, [sp, #4]
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	462b      	mov	r3, r5
 8002258:	4622      	mov	r2, r4
 800225a:	f7ff ff75 	bl	8002148 <OLED_SetBlock>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bdb0      	pop	{r4, r5, r7, pc}

08002266 <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 8002266:	b5b0      	push	{r4, r5, r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af02      	add	r7, sp, #8
 800226c:	603b      	str	r3, [r7, #0]
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
 8002272:	460b      	mov	r3, r1
 8002274:	71bb      	strb	r3, [r7, #6]
 8002276:	4613      	mov	r3, r2
 8002278:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	797b      	ldrb	r3, [r7, #5]
 8002280:	f1a3 0120 	sub.w	r1, r3, #32
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	3307      	adds	r3, #7
 800228a:	2b00      	cmp	r3, #0
 800228c:	da00      	bge.n	8002290 <OLED_PrintASCIIChar+0x2a>
 800228e:	3307      	adds	r3, #7
 8002290:	10db      	asrs	r3, r3, #3
 8002292:	4618      	mov	r0, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	785b      	ldrb	r3, [r3, #1]
 8002298:	fb03 f300 	mul.w	r3, r3, r0
 800229c:	fb03 f301 	mul.w	r3, r3, r1
 80022a0:	18d4      	adds	r4, r2, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	785d      	ldrb	r5, [r3, #1]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	79b9      	ldrb	r1, [r7, #6]
 80022ac:	79f8      	ldrb	r0, [r7, #7]
 80022ae:	7e3a      	ldrb	r2, [r7, #24]
 80022b0:	9201      	str	r2, [sp, #4]
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	462b      	mov	r3, r5
 80022b6:	4622      	mov	r2, r4
 80022b8:	f7ff ff46 	bl	8002148 <OLED_SetBlock>
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bdb0      	pop	{r4, r5, r7, pc}

080022c4 <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	b25b      	sxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db01      	blt.n	80022da <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e018      	b.n	800230c <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80022e2:	2bc0      	cmp	r3, #192	; 0xc0
 80022e4:	d101      	bne.n	80022ea <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 80022e6:	2302      	movs	r3, #2
 80022e8:	e010      	b.n	800230c <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f2:	2be0      	cmp	r3, #224	; 0xe0
 80022f4:	d101      	bne.n	80022fa <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e008      	b.n	800230c <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8002302:	2bf0      	cmp	r3, #240	; 0xf0
 8002304:	d101      	bne.n	800230a <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 8002306:	2304      	movs	r3, #4
 8002308:	e000      	b.n	800230c <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr

08002316 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8002316:	b5b0      	push	{r4, r5, r7, lr}
 8002318:	b08a      	sub	sp, #40	; 0x28
 800231a:	af02      	add	r7, sp, #8
 800231c:	60ba      	str	r2, [r7, #8]
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	4603      	mov	r3, r0
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	460b      	mov	r3, r1
 8002326:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 8002328:	2300      	movs	r3, #0
 800232a:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	3307      	adds	r3, #7
 8002332:	2b00      	cmp	r3, #0
 8002334:	da00      	bge.n	8002338 <OLED_PrintString+0x22>
 8002336:	3307      	adds	r3, #7
 8002338:	10db      	asrs	r3, r3, #3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	7852      	ldrb	r2, [r2, #1]
 8002340:	fb02 f303 	mul.w	r3, r2, r3
 8002344:	b2db      	uxtb	r3, r3
 8002346:	3304      	adds	r3, #4
 8002348:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 800234a:	e07d      	b.n	8002448 <OLED_PrintString+0x132>
  {
    found = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8002350:	8bfb      	ldrh	r3, [r7, #30]
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	4413      	add	r3, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ffb4 	bl	80022c4 <_OLED_GetUTF8Len>
 800235c:	4603      	mov	r3, r0
 800235e:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 8002360:	7ebb      	ldrb	r3, [r7, #26]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d078      	beq.n	8002458 <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 8002366:	2300      	movs	r3, #0
 8002368:	773b      	strb	r3, [r7, #28]
 800236a:	e032      	b.n	80023d2 <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	7f3a      	ldrb	r2, [r7, #28]
 8002372:	7ef9      	ldrb	r1, [r7, #27]
 8002374:	fb01 f202 	mul.w	r2, r1, r2
 8002378:	4413      	add	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 800237c:	8bfb      	ldrh	r3, [r7, #30]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	4413      	add	r3, r2
 8002382:	7eba      	ldrb	r2, [r7, #26]
 8002384:	6979      	ldr	r1, [r7, #20]
 8002386:	4618      	mov	r0, r3
 8002388:	f004 f9f8 	bl	800677c <memcmp>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d11c      	bne.n	80023cc <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	1d1c      	adds	r4, r3, #4
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	785d      	ldrb	r5, [r3, #1]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	7bb9      	ldrb	r1, [r7, #14]
 80023a0:	7bf8      	ldrb	r0, [r7, #15]
 80023a2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80023a6:	9201      	str	r2, [sp, #4]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	462b      	mov	r3, r5
 80023ac:	4622      	mov	r2, r4
 80023ae:	f7ff fecb 	bl	8002148 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	785a      	ldrb	r2, [r3, #1]
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	4413      	add	r3, r2
 80023ba:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80023bc:	7ebb      	ldrb	r3, [r7, #26]
 80023be:	b29a      	uxth	r2, r3
 80023c0:	8bfb      	ldrh	r3, [r7, #30]
 80023c2:	4413      	add	r3, r2
 80023c4:	83fb      	strh	r3, [r7, #30]
        found = 1;
 80023c6:	2301      	movs	r3, #1
 80023c8:	777b      	strb	r3, [r7, #29]
        break;
 80023ca:	e007      	b.n	80023dc <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 80023cc:	7f3b      	ldrb	r3, [r7, #28]
 80023ce:	3301      	adds	r3, #1
 80023d0:	773b      	strb	r3, [r7, #28]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	7a1b      	ldrb	r3, [r3, #8]
 80023d6:	7f3a      	ldrb	r2, [r7, #28]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d3c7      	bcc.n	800236c <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 80023dc:	7f7b      	ldrb	r3, [r7, #29]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d132      	bne.n	8002448 <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 80023e2:	7ebb      	ldrb	r3, [r7, #26]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d119      	bne.n	800241c <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 80023e8:	8bfb      	ldrh	r3, [r7, #30]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4413      	add	r3, r2
 80023ee:	781a      	ldrb	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68dc      	ldr	r4, [r3, #12]
 80023f4:	7bb9      	ldrb	r1, [r7, #14]
 80023f6:	7bf8      	ldrb	r0, [r7, #15]
 80023f8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	4623      	mov	r3, r4
 8002400:	f7ff ff31 	bl	8002266 <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	785a      	ldrb	r2, [r3, #1]
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	4413      	add	r3, r2
 800240e:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8002410:	7ebb      	ldrb	r3, [r7, #26]
 8002412:	b29a      	uxth	r2, r3
 8002414:	8bfb      	ldrh	r3, [r7, #30]
 8002416:	4413      	add	r3, r2
 8002418:	83fb      	strh	r3, [r7, #30]
 800241a:	e015      	b.n	8002448 <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	7bb9      	ldrb	r1, [r7, #14]
 8002422:	7bf8      	ldrb	r0, [r7, #15]
 8002424:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	4613      	mov	r3, r2
 800242c:	2220      	movs	r2, #32
 800242e:	f7ff ff1a 	bl	8002266 <OLED_PrintASCIIChar>
        x += font->ascii->w;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	785a      	ldrb	r2, [r3, #1]
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	4413      	add	r3, r2
 800243c:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 800243e:	7ebb      	ldrb	r3, [r7, #26]
 8002440:	b29a      	uxth	r2, r3
 8002442:	8bfb      	ldrh	r3, [r7, #30]
 8002444:	4413      	add	r3, r2
 8002446:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 8002448:	8bfb      	ldrh	r3, [r7, #30]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	4413      	add	r3, r2
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	f47f af7b 	bne.w	800234c <OLED_PrintString+0x36>
      }
    }
  }
}
 8002456:	e000      	b.n	800245a <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 8002458:	bf00      	nop
}
 800245a:	bf00      	nop
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002464 <OLED_UpdateDisplay>:

void OLED_UpdateDisplay(OledDisplayState state,
                        const void* pSensorData,  // 可以用具体结构类型
                        const char* nickname,
                        const char* plant)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	f5ad 7d79 	sub.w	sp, sp, #996	; 0x3e4
 800246a:	af02      	add	r7, sp, #8
 800246c:	4604      	mov	r4, r0
 800246e:	f107 0008 	add.w	r0, r7, #8
 8002472:	6001      	str	r1, [r0, #0]
 8002474:	1d39      	adds	r1, r7, #4
 8002476:	600a      	str	r2, [r1, #0]
 8002478:	463a      	mov	r2, r7
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	f107 030f 	add.w	r3, r7, #15
 8002480:	4622      	mov	r2, r4
 8002482:	701a      	strb	r2, [r3, #0]
    // 强制转换
    const Sensor_DataTypeDef* sData = (const Sensor_DataTypeDef*)pSensorData;
 8002484:	f107 0308 	add.w	r3, r7, #8
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

    // 1. 清屏
    OLED_NewFrame();
 800248e:	f7ff fcff 	bl	8001e90 <OLED_NewFrame>

    // 2. 不同状态下绘制不同界面
    switch(state)
 8002492:	f107 030f 	add.w	r3, r7, #15
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b03      	cmp	r3, #3
 800249a:	f200 8088 	bhi.w	80025ae <OLED_UpdateDisplay+0x14a>
 800249e:	a201      	add	r2, pc, #4	; (adr r2, 80024a4 <OLED_UpdateDisplay+0x40>)
 80024a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a4:	080024b5 	.word	0x080024b5
 80024a8:	08002533 	.word	0x08002533
 80024ac:	08002555 	.word	0x08002555
 80024b0:	08002577 	.word	0x08002577
    {
    case OLED_STATE_NORMAL:
        // 显示 “昵称 — 植物种类”
        {
          uint8_t line1[320];
          sprintf(line1, "%s—%s", nickname, plant);
 80024b4:	463b      	mov	r3, r7
 80024b6:	1d3a      	adds	r2, r7, #4
 80024b8:	f107 0014 	add.w	r0, r7, #20
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	493e      	ldr	r1, [pc, #248]	; (80025bc <OLED_UpdateDisplay+0x158>)
 80024c2:	f004 fddf 	bl	8007084 <siprintf>
          OLED_PrintString(0, 2, line1, &font16x16 , OLED_COLOR_NORMAL);
 80024c6:	f107 0214 	add.w	r2, r7, #20
 80024ca:	2300      	movs	r3, #0
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4b3c      	ldr	r3, [pc, #240]	; (80025c0 <OLED_UpdateDisplay+0x15c>)
 80024d0:	2102      	movs	r1, #2
 80024d2:	2000      	movs	r0, #0
 80024d4:	f7ff ff1f 	bl	8002316 <OLED_PrintString>
          // 第二行：温度 & 湿度
          uint8_t line2[320];
          sprintf(line2, "温度:%-3d℃  湿度:%-3d%%", sData->temperature, sData->humidity);
 80024d8:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80024e4:	785b      	ldrb	r3, [r3, #1]
 80024e6:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 80024ea:	4936      	ldr	r1, [pc, #216]	; (80025c4 <OLED_UpdateDisplay+0x160>)
 80024ec:	f004 fdca 	bl	8007084 <siprintf>
          OLED_PrintString(0, 30,line2, &font12x12 , OLED_COLOR_NORMAL);
 80024f0:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 80024f4:	2300      	movs	r3, #0
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <OLED_UpdateDisplay+0x164>)
 80024fa:	211e      	movs	r1, #30
 80024fc:	2000      	movs	r0, #0
 80024fe:	f7ff ff0a 	bl	8002316 <OLED_PrintString>
          // 第三行：土壤湿度 & 光照强度
          uint8_t line3[320];
          sprintf(line3, "土壤:%-3u%%   光照:%-4u", sData->soilADC, sData->lightADC);
 8002502:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002506:	885b      	ldrh	r3, [r3, #2]
 8002508:	461a      	mov	r2, r3
 800250a:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 800250e:	88db      	ldrh	r3, [r3, #6]
 8002510:	f507 7025 	add.w	r0, r7, #660	; 0x294
 8002514:	492d      	ldr	r1, [pc, #180]	; (80025cc <OLED_UpdateDisplay+0x168>)
 8002516:	f004 fdb5 	bl	8007084 <siprintf>
          OLED_PrintString(0, 48, line3, &font12x12 , OLED_COLOR_NORMAL);
 800251a:	f507 7225 	add.w	r2, r7, #660	; 0x294
 800251e:	2300      	movs	r3, #0
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	4b29      	ldr	r3, [pc, #164]	; (80025c8 <OLED_UpdateDisplay+0x164>)
 8002524:	2130      	movs	r1, #48	; 0x30
 8002526:	2000      	movs	r0, #0
 8002528:	f7ff fef5 	bl	8002316 <OLED_PrintString>
          OLED_ShowFrame();
 800252c:	f7ff fcbc 	bl	8001ea8 <OLED_ShowFrame>
        }
        break;
 8002530:	e03e      	b.n	80025b0 <OLED_UpdateDisplay+0x14c>

    case OLED_STATE_LISTENING:
        // 绘制一个“正在聆听”表情
    	OLED_DrawImage(0, 0, &listenImg,OLED_COLOR_NORMAL);
 8002532:	2300      	movs	r3, #0
 8002534:	4a26      	ldr	r2, [pc, #152]	; (80025d0 <OLED_UpdateDisplay+0x16c>)
 8002536:	2100      	movs	r1, #0
 8002538:	2000      	movs	r0, #0
 800253a:	f7ff fe76 	bl	800222a <OLED_DrawImage>
        // 可以在下方显示提示
        OLED_PrintString(0, 48, "聆听中...", &font16x16 , OLED_COLOR_NORMAL);
 800253e:	2300      	movs	r3, #0
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	4b1f      	ldr	r3, [pc, #124]	; (80025c0 <OLED_UpdateDisplay+0x15c>)
 8002544:	4a23      	ldr	r2, [pc, #140]	; (80025d4 <OLED_UpdateDisplay+0x170>)
 8002546:	2130      	movs	r1, #48	; 0x30
 8002548:	2000      	movs	r0, #0
 800254a:	f7ff fee4 	bl	8002316 <OLED_PrintString>
        OLED_ShowFrame();
 800254e:	f7ff fcab 	bl	8001ea8 <OLED_ShowFrame>
        break;
 8002552:	e02d      	b.n	80025b0 <OLED_UpdateDisplay+0x14c>

    case OLED_STATE_TALKING:
        // 绘制一个“开心”表情
    	OLED_DrawImage(0, 0, &happy1Img,OLED_COLOR_NORMAL);
 8002554:	2300      	movs	r3, #0
 8002556:	4a20      	ldr	r2, [pc, #128]	; (80025d8 <OLED_UpdateDisplay+0x174>)
 8002558:	2100      	movs	r1, #0
 800255a:	2000      	movs	r0, #0
 800255c:	f7ff fe65 	bl	800222a <OLED_DrawImage>
        // 提示
        OLED_PrintString(0, 48, "回答中...", &font16x16 , OLED_COLOR_NORMAL);
 8002560:	2300      	movs	r3, #0
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <OLED_UpdateDisplay+0x15c>)
 8002566:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <OLED_UpdateDisplay+0x178>)
 8002568:	2130      	movs	r1, #48	; 0x30
 800256a:	2000      	movs	r0, #0
 800256c:	f7ff fed3 	bl	8002316 <OLED_PrintString>
        OLED_ShowFrame();
 8002570:	f7ff fc9a 	bl	8001ea8 <OLED_ShowFrame>
        break;
 8002574:	e01c      	b.n	80025b0 <OLED_UpdateDisplay+0x14c>

    case OLED_STATE_WATERING:
        // 绘制水滴图案
    	OLED_DrawImage(0, 0, &waterImg , OLED_COLOR_NORMAL);
 8002576:	2300      	movs	r3, #0
 8002578:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <OLED_UpdateDisplay+0x17c>)
 800257a:	2100      	movs	r1, #0
 800257c:	2000      	movs	r0, #0
 800257e:	f7ff fe54 	bl	800222a <OLED_DrawImage>
        // 下方显示土壤湿度
        {
          char line[32];
          sprintf(line, "土壤:%u%%", sData->soilADC);
 8002582:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002586:	885b      	ldrh	r3, [r3, #2]
 8002588:	461a      	mov	r2, r3
 800258a:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800258e:	4915      	ldr	r1, [pc, #84]	; (80025e4 <OLED_UpdateDisplay+0x180>)
 8002590:	4618      	mov	r0, r3
 8002592:	f004 fd77 	bl	8007084 <siprintf>
          OLED_PrintString(0, 48, line, &font16x16, OLED_COLOR_NORMAL);
 8002596:	f507 7225 	add.w	r2, r7, #660	; 0x294
 800259a:	2300      	movs	r3, #0
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <OLED_UpdateDisplay+0x15c>)
 80025a0:	2130      	movs	r1, #48	; 0x30
 80025a2:	2000      	movs	r0, #0
 80025a4:	f7ff feb7 	bl	8002316 <OLED_PrintString>
        }
        OLED_ShowFrame();
 80025a8:	f7ff fc7e 	bl	8001ea8 <OLED_ShowFrame>
        break;
 80025ac:	e000      	b.n	80025b0 <OLED_UpdateDisplay+0x14c>
    default:
        break;
 80025ae:	bf00      	nop
    }

    // 3. 刷新(如果你的OLED库需要手动刷新)
    // ...
}
 80025b0:	bf00      	nop
 80025b2:	f507 7777 	add.w	r7, r7, #988	; 0x3dc
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd90      	pop	{r4, r7, pc}
 80025ba:	bf00      	nop
 80025bc:	0800aca8 	.word	0x0800aca8
 80025c0:	0800ba5c 	.word	0x0800ba5c
 80025c4:	0800acb0 	.word	0x0800acb0
 80025c8:	0800bb4c 	.word	0x0800bb4c
 80025cc:	0800acd0 	.word	0x0800acd0
 80025d0:	0800c35c 	.word	0x0800c35c
 80025d4:	0800acec 	.word	0x0800acec
 80025d8:	0800bf54 	.word	0x0800bf54
 80025dc:	0800acfc 	.word	0x0800acfc
 80025e0:	0800c764 	.word	0x0800c764
 80025e4:	0800ad0c 	.word	0x0800ad0c

080025e8 <SENSORS_Init>:
  * @brief  这里可根据需要做一些一次性的初始化操作
  *         比如启动ADC、启动定时器等。
  *         如果全部都由Cube自动生成并在main.c里初始化了，这里可以留空。
  */
void SENSORS_Init(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0

    // 如果你想做ADC的校准，可以加（F1里一般是自动做了）：
    // HAL_ADCEx_Calibration_Start(&hadc1);

    // DHT11 初始化：实际也不需要太多，你的 dht11.c 里主要是读写过程
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <SENSORS_ReadADC_Channel>:




static uint16_t SENSORS_ReadADC_Channel(uint32_t channel)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 80025fc:	f107 0308 	add.w	r3, r7, #8
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]

    sConfig.Channel = channel;                               // 选择通道
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;                       // 通道序列
 800260c:	2301      	movs	r3, #1
 800260e:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;       // 采样时间
 8002610:	2307      	movs	r3, #7
 8002612:	613b      	str	r3, [r7, #16]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002614:	f107 0308 	add.w	r3, r7, #8
 8002618:	4619      	mov	r1, r3
 800261a:	4812      	ldr	r0, [pc, #72]	; (8002664 <SENSORS_ReadADC_Channel+0x70>)
 800261c:	f000 fee8 	bl	80033f0 <HAL_ADC_ConfigChannel>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <SENSORS_ReadADC_Channel+0x36>
    {
        // 若想处理错误，可在这里加断言或直接返回某个错误值
        return 0;
 8002626:	2300      	movs	r3, #0
 8002628:	e017      	b.n	800265a <SENSORS_ReadADC_Channel+0x66>
    }

    // 启动转换
    HAL_ADC_Start(&hadc1);
 800262a:	480e      	ldr	r0, [pc, #56]	; (8002664 <SENSORS_ReadADC_Channel+0x70>)
 800262c:	f000 fcf4 	bl	8003018 <HAL_ADC_Start>

    // 等待转换完成 (超时10ms)
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8002630:	210a      	movs	r1, #10
 8002632:	480c      	ldr	r0, [pc, #48]	; (8002664 <SENSORS_ReadADC_Channel+0x70>)
 8002634:	f000 fdca 	bl	80031cc <HAL_ADC_PollForConversion>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <SENSORS_ReadADC_Channel+0x5e>
    {
        // 读取结果
        uint16_t val = HAL_ADC_GetValue(&hadc1);
 800263e:	4809      	ldr	r0, [pc, #36]	; (8002664 <SENSORS_ReadADC_Channel+0x70>)
 8002640:	f000 feca 	bl	80033d8 <HAL_ADC_GetValue>
 8002644:	4603      	mov	r3, r0
 8002646:	82fb      	strh	r3, [r7, #22]
        HAL_ADC_Stop(&hadc1);
 8002648:	4806      	ldr	r0, [pc, #24]	; (8002664 <SENSORS_ReadADC_Channel+0x70>)
 800264a:	f000 fd93 	bl	8003174 <HAL_ADC_Stop>
        return val;
 800264e:	8afb      	ldrh	r3, [r7, #22]
 8002650:	e003      	b.n	800265a <SENSORS_ReadADC_Channel+0x66>
    }
    HAL_ADC_Stop(&hadc1);
 8002652:	4804      	ldr	r0, [pc, #16]	; (8002664 <SENSORS_ReadADC_Channel+0x70>)
 8002654:	f000 fd8e 	bl	8003174 <HAL_ADC_Stop>
    // 若超时，则返回0或你想要的错误值
    return 0;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000408 	.word	0x20000408

08002668 <GetHumidity>:


uint16_t GetHumidity(int times)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
    uint32_t H_all = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
    float H_arg = 0;
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
    uint8_t t;

    // 进行多次ADC转换并累加
    for (t = 0; t < times; t++) {
 800267a:	2300      	movs	r3, #0
 800267c:	74fb      	strb	r3, [r7, #19]
 800267e:	e00d      	b.n	800269c <GetHumidity+0x34>
        H_all += SENSORS_ReadADC_Channel(ADC_CHANNEL_5);
 8002680:	2005      	movs	r0, #5
 8002682:	f7ff ffb7 	bl	80025f4 <SENSORS_ReadADC_Channel>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	4413      	add	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
        delay_ms(1); // 延时1毫秒
 8002690:	2001      	movs	r0, #1
 8002692:	f7fe fdf7 	bl	8001284 <delay_ms>
    for (t = 0; t < times; t++) {
 8002696:	7cfb      	ldrb	r3, [r7, #19]
 8002698:	3301      	adds	r3, #1
 800269a:	74fb      	strb	r3, [r7, #19]
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	dced      	bgt.n	8002680 <GetHumidity+0x18>
    }
    // 计算平均值
    H_arg = (H_all / times);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fb1b 	bl	8000ce8 <__aeabi_ui2f>
 80026b2:	4603      	mov	r3, r0
 80026b4:	60fb      	str	r3, [r7, #12]
    // 根据转换公式计算湿度值
    uint16_t data = (4095 - H_arg) / 3292 * 100;
 80026b6:	68f9      	ldr	r1, [r7, #12]
 80026b8:	480e      	ldr	r0, [pc, #56]	; (80026f4 <GetHumidity+0x8c>)
 80026ba:	f7fe fa63 	bl	8000b84 <__aeabi_fsub>
 80026be:	4603      	mov	r3, r0
 80026c0:	490d      	ldr	r1, [pc, #52]	; (80026f8 <GetHumidity+0x90>)
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fc1c 	bl	8000f00 <__aeabi_fdiv>
 80026c8:	4603      	mov	r3, r0
 80026ca:	490c      	ldr	r1, [pc, #48]	; (80026fc <GetHumidity+0x94>)
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe fb63 	bl	8000d98 <__aeabi_fmul>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fcaf 	bl	8001038 <__aeabi_f2uiz>
 80026da:	4603      	mov	r3, r0
 80026dc:	817b      	strh	r3, [r7, #10]
    // 确保湿度值在合理范围内（0~100）
    data = data > 100 ? 100 : (data < 0 ? 0 : data);
 80026de:	897b      	ldrh	r3, [r7, #10]
 80026e0:	2b64      	cmp	r3, #100	; 0x64
 80026e2:	bf28      	it	cs
 80026e4:	2364      	movcs	r3, #100	; 0x64
 80026e6:	817b      	strh	r3, [r7, #10]
    return data;
 80026e8:	897b      	ldrh	r3, [r7, #10]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	457ff000 	.word	0x457ff000
 80026f8:	454dc000 	.word	0x454dc000
 80026fc:	42c80000 	.word	0x42c80000

08002700 <GetLightValue>:

uint16_t GetLightValue(int times)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
    uint32_t sum = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < times; i++)
 800270c:	2300      	movs	r3, #0
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	e00d      	b.n	800272e <GetLightValue+0x2e>
    {
        sum += SENSORS_ReadADC_Channel(ADC_CHANNEL_2);  // 这里就是读 PA2
 8002712:	2002      	movs	r0, #2
 8002714:	f7ff ff6e 	bl	80025f4 <SENSORS_ReadADC_Channel>
 8002718:	4603      	mov	r3, r0
 800271a:	461a      	mov	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4413      	add	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
        delay_ms(1);
 8002722:	2001      	movs	r0, #1
 8002724:	f7fe fdae 	bl	8001284 <delay_ms>
    for (int i = 0; i < times; i++)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	3301      	adds	r3, #1
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	429a      	cmp	r2, r3
 8002734:	dbed      	blt.n	8002712 <GetLightValue+0x12>
    }
    return (uint16_t)(sum / times);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	fbb2 f3f3 	udiv	r3, r2, r3
 800273e:	b29b      	uxth	r3, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <SENSORS_ReadAll>:
  *         1. DHT11: 数字接口
  *         2. 土壤湿度: 例如 PA5 => ADC_CHANNEL_5
  *         3. 水位: 例如 PA1 => ADC_CHANNEL_1
  */
void SENSORS_ReadAll(Sensor_DataTypeDef *data)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
    // 1. 读取 DHT11
    // 如果 DHT11_Read_Data() 返回 0 表示成功
    if (DHT11_Read_Data(&data->humidity, &data->temperature) != 0)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3301      	adds	r3, #1
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe fe96 	bl	800148a <DHT11_Read_Data>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <SENSORS_ReadAll+0x28>
    {
        // 读取失败时，可考虑赋默认值
        data->temperature = 0xFF;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	22ff      	movs	r2, #255	; 0xff
 8002768:	701a      	strb	r2, [r3, #0]
        data->humidity = 0xFF;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	22ff      	movs	r2, #255	; 0xff
 800276e:	705a      	strb	r2, [r3, #1]

    // 2. 读取土壤湿度 - channel 5



    data->soilADC = GetHumidity(10);
 8002770:	200a      	movs	r0, #10
 8002772:	f7ff ff79 	bl	8002668 <GetHumidity>
 8002776:	4603      	mov	r3, r0
 8002778:	461a      	mov	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	805a      	strh	r2, [r3, #2]
    uint8_t Depth=0;
 800277e:	2300      	movs	r3, #0
 8002780:	73fb      	strb	r3, [r7, #15]
    uint16_t ADC_Depth;
    // 3. 读取水位 - channel 1
    ADC_Depth=(float)SENSORS_ReadADC_Channel(ADC_CHANNEL_1)/4096*3.3;
 8002782:	2001      	movs	r0, #1
 8002784:	f7ff ff36 	bl	80025f4 <SENSORS_ReadADC_Channel>
 8002788:	4603      	mov	r3, r0
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe faac 	bl	8000ce8 <__aeabi_ui2f>
 8002790:	4603      	mov	r3, r0
 8002792:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fbb2 	bl	8000f00 <__aeabi_fdiv>
 800279c:	4603      	mov	r3, r0
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fe4c 	bl	800043c <__aeabi_f2d>
 80027a4:	a318      	add	r3, pc, #96	; (adr r3, 8002808 <SENSORS_ReadAll+0xc0>)
 80027a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027aa:	f7fd fe9f 	bl	80004ec <__aeabi_dmul>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4610      	mov	r0, r2
 80027b4:	4619      	mov	r1, r3
 80027b6:	f7fe f971 	bl	8000a9c <__aeabi_d2uiz>
 80027ba:	4603      	mov	r3, r0
 80027bc:	81bb      	strh	r3, [r7, #12]
    if((ADC_Depth-1500)>0){
 80027be:	89bb      	ldrh	r3, [r7, #12]
 80027c0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d90a      	bls.n	80027de <SENSORS_ReadAll+0x96>
    	Depth=(ADC_Depth-1550)/100;
 80027c8:	89bb      	ldrh	r3, [r7, #12]
 80027ca:	f2a3 630e 	subw	r3, r3, #1550	; 0x60e
 80027ce:	4a10      	ldr	r2, [pc, #64]	; (8002810 <SENSORS_ReadAll+0xc8>)
 80027d0:	fb82 1203 	smull	r1, r2, r2, r3
 80027d4:	1152      	asrs	r2, r2, #5
 80027d6:	17db      	asrs	r3, r3, #31
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	73fb      	strb	r3, [r7, #15]
 80027dc:	e001      	b.n	80027e2 <SENSORS_ReadAll+0x9a>
	}
    else
	{
		Depth=0;
 80027de:	2300      	movs	r3, #0
 80027e0:	73fb      	strb	r3, [r7, #15]
	}
    data->waterADC = SENSORS_ReadADC_Channel(ADC_CHANNEL_1);
 80027e2:	2001      	movs	r0, #1
 80027e4:	f7ff ff06 	bl	80025f4 <SENSORS_ReadADC_Channel>
 80027e8:	4603      	mov	r3, r0
 80027ea:	461a      	mov	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	809a      	strh	r2, [r3, #4]

    data->lightADC = GetLightValue(10);
 80027f0:	200a      	movs	r0, #10
 80027f2:	f7ff ff85 	bl	8002700 <GetLightValue>
 80027f6:	4603      	mov	r3, r0
 80027f8:	461a      	mov	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	80da      	strh	r2, [r3, #6]
}
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	66666666 	.word	0x66666666
 800280c:	400a6666 	.word	0x400a6666
 8002810:	51eb851f 	.word	0x51eb851f

08002814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <HAL_MspInit+0x5c>)
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	4a14      	ldr	r2, [pc, #80]	; (8002870 <HAL_MspInit+0x5c>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6193      	str	r3, [r2, #24]
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <HAL_MspInit+0x5c>)
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_MspInit+0x5c>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <HAL_MspInit+0x5c>)
 8002838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283c:	61d3      	str	r3, [r2, #28]
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <HAL_MspInit+0x5c>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <HAL_MspInit+0x60>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <HAL_MspInit+0x60>)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	40021000 	.word	0x40021000
 8002874:	40010000 	.word	0x40010000

08002878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800287c:	e7fe      	b.n	800287c <NMI_Handler+0x4>

0800287e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002882:	e7fe      	b.n	8002882 <HardFault_Handler+0x4>

08002884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002888:	e7fe      	b.n	8002888 <MemManage_Handler+0x4>

0800288a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800288e:	e7fe      	b.n	800288e <BusFault_Handler+0x4>

08002890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002894:	e7fe      	b.n	8002894 <UsageFault_Handler+0x4>

08002896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028be:	f000 fa93 	bl	8002de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80028cc:	4802      	ldr	r0, [pc, #8]	; (80028d8 <DMA1_Channel4_IRQHandler+0x10>)
 80028ce:	f001 f93f 	bl	8003b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200008d4 	.word	0x200008d4

080028dc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80028e0:	4802      	ldr	r0, [pc, #8]	; (80028ec <DMA1_Channel5_IRQHandler+0x10>)
 80028e2:	f001 f935 	bl	8003b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000918 	.word	0x20000918

080028f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028f4:	4802      	ldr	r0, [pc, #8]	; (8002900 <USART1_IRQHandler+0x10>)
 80028f6:	f003 f9ab 	bl	8005c50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	2000095c 	.word	0x2000095c

08002904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
	return 1;
 8002908:	2301      	movs	r3, #1
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <_kill>:

int _kill(int pid, int sig)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800291c:	f003 ff04 	bl	8006728 <__errno>
 8002920:	4603      	mov	r3, r0
 8002922:	2216      	movs	r2, #22
 8002924:	601a      	str	r2, [r3, #0]
	return -1;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <_exit>:

void _exit (int status)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800293a:	f04f 31ff 	mov.w	r1, #4294967295
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ffe7 	bl	8002912 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002944:	e7fe      	b.n	8002944 <_exit+0x12>

08002946 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e00a      	b.n	800296e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002958:	f3af 8000 	nop.w
 800295c:	4601      	mov	r1, r0
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	60ba      	str	r2, [r7, #8]
 8002964:	b2ca      	uxtb	r2, r1
 8002966:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	3301      	adds	r3, #1
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	429a      	cmp	r2, r3
 8002974:	dbf0      	blt.n	8002958 <_read+0x12>
	}

return len;
 8002976:	687b      	ldr	r3, [r7, #4]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	e009      	b.n	80029a6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	60ba      	str	r2, [r7, #8]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	3301      	adds	r3, #1
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	dbf1      	blt.n	8002992 <_write+0x12>
	}
	return len;
 80029ae:	687b      	ldr	r3, [r7, #4]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_close>:

int _close(int file)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	return -1;
 80029c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029de:	605a      	str	r2, [r3, #4]
	return 0;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <_isatty>:

int _isatty(int file)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	return 1;
 80029f4:	2301      	movs	r3, #1
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
	return 0;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a20:	4a14      	ldr	r2, [pc, #80]	; (8002a74 <_sbrk+0x5c>)
 8002a22:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <_sbrk+0x60>)
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a2c:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <_sbrk+0x64>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d102      	bne.n	8002a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <_sbrk+0x64>)
 8002a36:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <_sbrk+0x68>)
 8002a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <_sbrk+0x64>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d207      	bcs.n	8002a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a48:	f003 fe6e 	bl	8006728 <__errno>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	220c      	movs	r2, #12
 8002a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295
 8002a56:	e009      	b.n	8002a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <_sbrk+0x64>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a5e:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <_sbrk+0x64>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	4a05      	ldr	r2, [pc, #20]	; (8002a7c <_sbrk+0x64>)
 8002a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20005000 	.word	0x20005000
 8002a78:	00000400 	.word	0x00000400
 8002a7c:	200003fc 	.word	0x200003fc
 8002a80:	200009b8 	.word	0x200009b8

08002a84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a96:	f107 0308 	add.w	r3, r7, #8
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	605a      	str	r2, [r3, #4]
 8002aa0:	609a      	str	r2, [r3, #8]
 8002aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa4:	463b      	mov	r3, r7
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002aac:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002aae:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <MX_TIM3_Init+0x98>)
 8002ab0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002ab2:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002ab4:	2247      	movs	r2, #71	; 0x47
 8002ab6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002abe:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ac4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac6:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002acc:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ad2:	4814      	ldr	r0, [pc, #80]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002ad4:	f002 fd0c 	bl	80054f0 <HAL_TIM_Base_Init>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002ade:	f7ff f94d 	bl	8001d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ae8:	f107 0308 	add.w	r3, r7, #8
 8002aec:	4619      	mov	r1, r3
 8002aee:	480d      	ldr	r0, [pc, #52]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002af0:	f002 fd4d 	bl	800558e <HAL_TIM_ConfigClockSource>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002afa:	f7ff f93f 	bl	8001d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b06:	463b      	mov	r3, r7
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4806      	ldr	r0, [pc, #24]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002b0c:	f002 ff0a 	bl	8005924 <HAL_TIMEx_MasterConfigSynchronization>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002b16:	f7ff f931 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b1a:	bf00      	nop
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	2000088c 	.word	0x2000088c
 8002b28:	40000400 	.word	0x40000400

08002b2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a09      	ldr	r2, [pc, #36]	; (8002b60 <HAL_TIM_Base_MspInit+0x34>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d10b      	bne.n	8002b56 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_TIM_Base_MspInit+0x38>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	4a08      	ldr	r2, [pc, #32]	; (8002b64 <HAL_TIM_Base_MspInit+0x38>)
 8002b44:	f043 0302 	orr.w	r3, r3, #2
 8002b48:	61d3      	str	r3, [r2, #28]
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_TIM_Base_MspInit+0x38>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	40000400 	.word	0x40000400
 8002b64:	40021000 	.word	0x40021000

08002b68 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b6e:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <MX_USART1_UART_Init+0x50>)
 8002b70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b8c:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b8e:	220c      	movs	r2, #12
 8002b90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b9e:	4805      	ldr	r0, [pc, #20]	; (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002ba0:	f002 ff1e 	bl	80059e0 <HAL_UART_Init>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002baa:	f7ff f8e7 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	2000095c 	.word	0x2000095c
 8002bb8:	40013800 	.word	0x40013800

08002bbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	f107 0310 	add.w	r3, r7, #16
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a47      	ldr	r2, [pc, #284]	; (8002cf4 <HAL_UART_MspInit+0x138>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	f040 8086 	bne.w	8002cea <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bde:	4b46      	ldr	r3, [pc, #280]	; (8002cf8 <HAL_UART_MspInit+0x13c>)
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	4a45      	ldr	r2, [pc, #276]	; (8002cf8 <HAL_UART_MspInit+0x13c>)
 8002be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be8:	6193      	str	r3, [r2, #24]
 8002bea:	4b43      	ldr	r3, [pc, #268]	; (8002cf8 <HAL_UART_MspInit+0x13c>)
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf6:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <HAL_UART_MspInit+0x13c>)
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	4a3f      	ldr	r2, [pc, #252]	; (8002cf8 <HAL_UART_MspInit+0x13c>)
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	6193      	str	r3, [r2, #24]
 8002c02:	4b3d      	ldr	r3, [pc, #244]	; (8002cf8 <HAL_UART_MspInit+0x13c>)
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1c:	f107 0310 	add.w	r3, r7, #16
 8002c20:	4619      	mov	r1, r3
 8002c22:	4836      	ldr	r0, [pc, #216]	; (8002cfc <HAL_UART_MspInit+0x140>)
 8002c24:	f001 f89a 	bl	8003d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c36:	f107 0310 	add.w	r3, r7, #16
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	482f      	ldr	r0, [pc, #188]	; (8002cfc <HAL_UART_MspInit+0x140>)
 8002c3e:	f001 f88d 	bl	8003d5c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002c42:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <HAL_UART_MspInit+0x144>)
 8002c44:	4a2f      	ldr	r2, [pc, #188]	; (8002d04 <HAL_UART_MspInit+0x148>)
 8002c46:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c48:	4b2d      	ldr	r3, [pc, #180]	; (8002d00 <HAL_UART_MspInit+0x144>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c4e:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <HAL_UART_MspInit+0x144>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c54:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <HAL_UART_MspInit+0x144>)
 8002c56:	2280      	movs	r2, #128	; 0x80
 8002c58:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c5a:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <HAL_UART_MspInit+0x144>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <HAL_UART_MspInit+0x144>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <HAL_UART_MspInit+0x144>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c6c:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <HAL_UART_MspInit+0x144>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c72:	4823      	ldr	r0, [pc, #140]	; (8002d00 <HAL_UART_MspInit+0x144>)
 8002c74:	f000 fe5e 	bl	8003934 <HAL_DMA_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002c7e:	f7ff f87d 	bl	8001d7c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a1e      	ldr	r2, [pc, #120]	; (8002d00 <HAL_UART_MspInit+0x144>)
 8002c86:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c88:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <HAL_UART_MspInit+0x144>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_UART_MspInit+0x14c>)
 8002c90:	4a1e      	ldr	r2, [pc, #120]	; (8002d0c <HAL_UART_MspInit+0x150>)
 8002c92:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c94:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <HAL_UART_MspInit+0x14c>)
 8002c96:	2210      	movs	r2, #16
 8002c98:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_UART_MspInit+0x14c>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ca0:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <HAL_UART_MspInit+0x14c>)
 8002ca2:	2280      	movs	r2, #128	; 0x80
 8002ca4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ca6:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <HAL_UART_MspInit+0x14c>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cac:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <HAL_UART_MspInit+0x14c>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_UART_MspInit+0x14c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cb8:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <HAL_UART_MspInit+0x14c>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cbe:	4812      	ldr	r0, [pc, #72]	; (8002d08 <HAL_UART_MspInit+0x14c>)
 8002cc0:	f000 fe38 	bl	8003934 <HAL_DMA_Init>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002cca:	f7ff f857 	bl	8001d7c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <HAL_UART_MspInit+0x14c>)
 8002cd2:	639a      	str	r2, [r3, #56]	; 0x38
 8002cd4:	4a0c      	ldr	r2, [pc, #48]	; (8002d08 <HAL_UART_MspInit+0x14c>)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2100      	movs	r1, #0
 8002cde:	2025      	movs	r0, #37	; 0x25
 8002ce0:	f000 fdf1 	bl	80038c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ce4:	2025      	movs	r0, #37	; 0x25
 8002ce6:	f000 fe0a 	bl	80038fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002cea:	bf00      	nop
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40013800 	.word	0x40013800
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40010800 	.word	0x40010800
 8002d00:	20000918 	.word	0x20000918
 8002d04:	40020058 	.word	0x40020058
 8002d08:	200008d4 	.word	0x200008d4
 8002d0c:	40020044 	.word	0x40020044

08002d10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d10:	f7ff feb8 	bl	8002a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d14:	480b      	ldr	r0, [pc, #44]	; (8002d44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d16:	490c      	ldr	r1, [pc, #48]	; (8002d48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d18:	4a0c      	ldr	r2, [pc, #48]	; (8002d4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d1c:	e002      	b.n	8002d24 <LoopCopyDataInit>

08002d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d22:	3304      	adds	r3, #4

08002d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d28:	d3f9      	bcc.n	8002d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d2a:	4a09      	ldr	r2, [pc, #36]	; (8002d50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d2c:	4c09      	ldr	r4, [pc, #36]	; (8002d54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d30:	e001      	b.n	8002d36 <LoopFillZerobss>

08002d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d34:	3204      	adds	r2, #4

08002d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d38:	d3fb      	bcc.n	8002d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d3a:	f003 fcfb 	bl	8006734 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d3e:	f7fe fd5b 	bl	80017f8 <main>
  bx lr
 8002d42:	4770      	bx	lr
  ldr r0, =_sdata
 8002d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d48:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002d4c:	0800ccc0 	.word	0x0800ccc0
  ldr r2, =_sbss
 8002d50:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002d54:	200009b8 	.word	0x200009b8

08002d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d58:	e7fe      	b.n	8002d58 <ADC1_2_IRQHandler>
	...

08002d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <HAL_Init+0x28>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a07      	ldr	r2, [pc, #28]	; (8002d84 <HAL_Init+0x28>)
 8002d66:	f043 0310 	orr.w	r3, r3, #16
 8002d6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d6c:	2003      	movs	r0, #3
 8002d6e:	f000 fd9f 	bl	80038b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d72:	200f      	movs	r0, #15
 8002d74:	f000 f808 	bl	8002d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d78:	f7ff fd4c 	bl	8002814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40022000 	.word	0x40022000

08002d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d90:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <HAL_InitTick+0x54>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_InitTick+0x58>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 fdb7 	bl	800391a <HAL_SYSTICK_Config>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e00e      	b.n	8002dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b0f      	cmp	r3, #15
 8002dba:	d80a      	bhi.n	8002dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc4:	f000 fd7f 	bl	80038c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dc8:	4a06      	ldr	r2, [pc, #24]	; (8002de4 <HAL_InitTick+0x5c>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e000      	b.n	8002dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20000030 	.word	0x20000030
 8002de0:	20000038 	.word	0x20000038
 8002de4:	20000034 	.word	0x20000034

08002de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_IncTick+0x1c>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_IncTick+0x20>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4413      	add	r3, r2
 8002df8:	4a03      	ldr	r2, [pc, #12]	; (8002e08 <HAL_IncTick+0x20>)
 8002dfa:	6013      	str	r3, [r2, #0]
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr
 8002e04:	20000038 	.word	0x20000038
 8002e08:	200009a4 	.word	0x200009a4

08002e0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e10:	4b02      	ldr	r3, [pc, #8]	; (8002e1c <HAL_GetTick+0x10>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	200009a4 	.word	0x200009a4

08002e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e28:	f7ff fff0 	bl	8002e0c <HAL_GetTick>
 8002e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d005      	beq.n	8002e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <HAL_Delay+0x44>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4413      	add	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e46:	bf00      	nop
 8002e48:	f7ff ffe0 	bl	8002e0c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d8f7      	bhi.n	8002e48 <HAL_Delay+0x28>
  {
  }
}
 8002e58:	bf00      	nop
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000038 	.word	0x20000038

08002e68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0be      	b.n	8003008 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d109      	bne.n	8002eac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7fe f95c 	bl	8001164 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fbf1 	bl	8003694 <ADC_ConversionStop_Disable>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f040 8099 	bne.w	8002ff6 <HAL_ADC_Init+0x18e>
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f040 8095 	bne.w	8002ff6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ed4:	f023 0302 	bic.w	r3, r3, #2
 8002ed8:	f043 0202 	orr.w	r2, r3, #2
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ee8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	7b1b      	ldrb	r3, [r3, #12]
 8002eee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ef0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f00:	d003      	beq.n	8002f0a <HAL_ADC_Init+0xa2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d102      	bne.n	8002f10 <HAL_ADC_Init+0xa8>
 8002f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f0e:	e000      	b.n	8002f12 <HAL_ADC_Init+0xaa>
 8002f10:	2300      	movs	r3, #0
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7d1b      	ldrb	r3, [r3, #20]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d119      	bne.n	8002f54 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7b1b      	ldrb	r3, [r3, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	035a      	lsls	r2, r3, #13
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	e00b      	b.n	8002f54 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	f043 0201 	orr.w	r2, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	4b28      	ldr	r3, [pc, #160]	; (8003010 <HAL_ADC_Init+0x1a8>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f84:	d003      	beq.n	8002f8e <HAL_ADC_Init+0x126>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d104      	bne.n	8002f98 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	051b      	lsls	r3, r3, #20
 8002f96:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	4b18      	ldr	r3, [pc, #96]	; (8003014 <HAL_ADC_Init+0x1ac>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d10b      	bne.n	8002fd4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	f023 0303 	bic.w	r3, r3, #3
 8002fca:	f043 0201 	orr.w	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fd2:	e018      	b.n	8003006 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	f023 0312 	bic.w	r3, r3, #18
 8002fdc:	f043 0210 	orr.w	r2, r3, #16
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	f043 0201 	orr.w	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ff4:	e007      	b.n	8003006 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	f043 0210 	orr.w	r2, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003006:	7dfb      	ldrb	r3, [r7, #23]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	ffe1f7fd 	.word	0xffe1f7fd
 8003014:	ff1f0efe 	.word	0xff1f0efe

08003018 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_ADC_Start+0x1a>
 800302e:	2302      	movs	r3, #2
 8003030:	e098      	b.n	8003164 <HAL_ADC_Start+0x14c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fad0 	bl	80035e0 <ADC_Enable>
 8003040:	4603      	mov	r3, r0
 8003042:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f040 8087 	bne.w	800315a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a41      	ldr	r2, [pc, #260]	; (800316c <HAL_ADC_Start+0x154>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d105      	bne.n	8003076 <HAL_ADC_Start+0x5e>
 800306a:	4b41      	ldr	r3, [pc, #260]	; (8003170 <HAL_ADC_Start+0x158>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d115      	bne.n	80030a2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308c:	2b00      	cmp	r3, #0
 800308e:	d026      	beq.n	80030de <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003098:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030a0:	e01d      	b.n	80030de <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a2f      	ldr	r2, [pc, #188]	; (8003170 <HAL_ADC_Start+0x158>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d004      	beq.n	80030c2 <HAL_ADC_Start+0xaa>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a2b      	ldr	r2, [pc, #172]	; (800316c <HAL_ADC_Start+0x154>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d10d      	bne.n	80030de <HAL_ADC_Start+0xc6>
 80030c2:	4b2b      	ldr	r3, [pc, #172]	; (8003170 <HAL_ADC_Start+0x158>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d006      	beq.n	80030f8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	f023 0206 	bic.w	r2, r3, #6
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80030f6:	e002      	b.n	80030fe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f06f 0202 	mvn.w	r2, #2
 800310e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800311a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800311e:	d113      	bne.n	8003148 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003124:	4a11      	ldr	r2, [pc, #68]	; (800316c <HAL_ADC_Start+0x154>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d105      	bne.n	8003136 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <HAL_ADC_Start+0x158>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003132:	2b00      	cmp	r3, #0
 8003134:	d108      	bne.n	8003148 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003144:	609a      	str	r2, [r3, #8]
 8003146:	e00c      	b.n	8003162 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	e003      	b.n	8003162 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003162:	7bfb      	ldrb	r3, [r7, #15]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40012800 	.word	0x40012800
 8003170:	40012400 	.word	0x40012400

08003174 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_ADC_Stop+0x1a>
 800318a:	2302      	movs	r3, #2
 800318c:	e01a      	b.n	80031c4 <HAL_ADC_Stop+0x50>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fa7c 	bl	8003694 <ADC_ConversionStop_Disable>
 800319c:	4603      	mov	r3, r0
 800319e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d109      	bne.n	80031ba <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	f043 0201 	orr.w	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80031e2:	f7ff fe13 	bl	8002e0c <HAL_GetTick>
 80031e6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	f043 0220 	orr.w	r2, r3, #32
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e0d3      	b.n	80033b6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d131      	bne.n	8003280 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003226:	2b00      	cmp	r3, #0
 8003228:	d12a      	bne.n	8003280 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800322a:	e021      	b.n	8003270 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003232:	d01d      	beq.n	8003270 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d007      	beq.n	800324a <HAL_ADC_PollForConversion+0x7e>
 800323a:	f7ff fde7 	bl	8002e0c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d212      	bcs.n	8003270 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10b      	bne.n	8003270 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325c:	f043 0204 	orr.w	r2, r3, #4
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e0a2      	b.n	80033b6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0d6      	beq.n	800322c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800327e:	e070      	b.n	8003362 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003280:	4b4f      	ldr	r3, [pc, #316]	; (80033c0 <HAL_ADC_PollForConversion+0x1f4>)
 8003282:	681c      	ldr	r4, [r3, #0]
 8003284:	2002      	movs	r0, #2
 8003286:	f002 f87d 	bl	8005384 <HAL_RCCEx_GetPeriphCLKFreq>
 800328a:	4603      	mov	r3, r0
 800328c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6919      	ldr	r1, [r3, #16]
 8003296:	4b4b      	ldr	r3, [pc, #300]	; (80033c4 <HAL_ADC_PollForConversion+0x1f8>)
 8003298:	400b      	ands	r3, r1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d118      	bne.n	80032d0 <HAL_ADC_PollForConversion+0x104>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68d9      	ldr	r1, [r3, #12]
 80032a4:	4b48      	ldr	r3, [pc, #288]	; (80033c8 <HAL_ADC_PollForConversion+0x1fc>)
 80032a6:	400b      	ands	r3, r1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d111      	bne.n	80032d0 <HAL_ADC_PollForConversion+0x104>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6919      	ldr	r1, [r3, #16]
 80032b2:	4b46      	ldr	r3, [pc, #280]	; (80033cc <HAL_ADC_PollForConversion+0x200>)
 80032b4:	400b      	ands	r3, r1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d108      	bne.n	80032cc <HAL_ADC_PollForConversion+0x100>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68d9      	ldr	r1, [r3, #12]
 80032c0:	4b43      	ldr	r3, [pc, #268]	; (80033d0 <HAL_ADC_PollForConversion+0x204>)
 80032c2:	400b      	ands	r3, r1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_ADC_PollForConversion+0x100>
 80032c8:	2314      	movs	r3, #20
 80032ca:	e020      	b.n	800330e <HAL_ADC_PollForConversion+0x142>
 80032cc:	2329      	movs	r3, #41	; 0x29
 80032ce:	e01e      	b.n	800330e <HAL_ADC_PollForConversion+0x142>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6919      	ldr	r1, [r3, #16]
 80032d6:	4b3d      	ldr	r3, [pc, #244]	; (80033cc <HAL_ADC_PollForConversion+0x200>)
 80032d8:	400b      	ands	r3, r1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_ADC_PollForConversion+0x120>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68d9      	ldr	r1, [r3, #12]
 80032e4:	4b3a      	ldr	r3, [pc, #232]	; (80033d0 <HAL_ADC_PollForConversion+0x204>)
 80032e6:	400b      	ands	r3, r1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00d      	beq.n	8003308 <HAL_ADC_PollForConversion+0x13c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6919      	ldr	r1, [r3, #16]
 80032f2:	4b38      	ldr	r3, [pc, #224]	; (80033d4 <HAL_ADC_PollForConversion+0x208>)
 80032f4:	400b      	ands	r3, r1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d108      	bne.n	800330c <HAL_ADC_PollForConversion+0x140>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68d9      	ldr	r1, [r3, #12]
 8003300:	4b34      	ldr	r3, [pc, #208]	; (80033d4 <HAL_ADC_PollForConversion+0x208>)
 8003302:	400b      	ands	r3, r1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_ADC_PollForConversion+0x140>
 8003308:	2354      	movs	r3, #84	; 0x54
 800330a:	e000      	b.n	800330e <HAL_ADC_PollForConversion+0x142>
 800330c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800330e:	fb02 f303 	mul.w	r3, r2, r3
 8003312:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003314:	e021      	b.n	800335a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d01a      	beq.n	8003354 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d007      	beq.n	8003334 <HAL_ADC_PollForConversion+0x168>
 8003324:	f7ff fd72 	bl	8002e0c <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d20f      	bcs.n	8003354 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	429a      	cmp	r2, r3
 800333a:	d90b      	bls.n	8003354 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	f043 0204 	orr.w	r2, r3, #4
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e030      	b.n	80033b6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	3301      	adds	r3, #1
 8003358:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	429a      	cmp	r2, r3
 8003360:	d8d9      	bhi.n	8003316 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f06f 0212 	mvn.w	r2, #18
 800336a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003382:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003386:	d115      	bne.n	80033b4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800338c:	2b00      	cmp	r3, #0
 800338e:	d111      	bne.n	80033b4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d105      	bne.n	80033b4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	f043 0201 	orr.w	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd90      	pop	{r4, r7, pc}
 80033be:	bf00      	nop
 80033c0:	20000030 	.word	0x20000030
 80033c4:	24924924 	.word	0x24924924
 80033c8:	00924924 	.word	0x00924924
 80033cc:	12492492 	.word	0x12492492
 80033d0:	00492492 	.word	0x00492492
 80033d4:	00249249 	.word	0x00249249

080033d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr

080033f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x20>
 800340c:	2302      	movs	r3, #2
 800340e:	e0dc      	b.n	80035ca <HAL_ADC_ConfigChannel+0x1da>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b06      	cmp	r3, #6
 800341e:	d81c      	bhi.n	800345a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	3b05      	subs	r3, #5
 8003432:	221f      	movs	r2, #31
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	4019      	ands	r1, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	3b05      	subs	r3, #5
 800344c:	fa00 f203 	lsl.w	r2, r0, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	635a      	str	r2, [r3, #52]	; 0x34
 8003458:	e03c      	b.n	80034d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d81c      	bhi.n	800349c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	3b23      	subs	r3, #35	; 0x23
 8003474:	221f      	movs	r2, #31
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	4019      	ands	r1, r3
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	3b23      	subs	r3, #35	; 0x23
 800348e:	fa00 f203 	lsl.w	r2, r0, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
 800349a:	e01b      	b.n	80034d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	3b41      	subs	r3, #65	; 0x41
 80034ae:	221f      	movs	r2, #31
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	4019      	ands	r1, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	3b41      	subs	r3, #65	; 0x41
 80034c8:	fa00 f203 	lsl.w	r2, r0, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b09      	cmp	r3, #9
 80034da:	d91c      	bls.n	8003516 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68d9      	ldr	r1, [r3, #12]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	4613      	mov	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	4413      	add	r3, r2
 80034ec:	3b1e      	subs	r3, #30
 80034ee:	2207      	movs	r2, #7
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	4019      	ands	r1, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6898      	ldr	r0, [r3, #8]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4413      	add	r3, r2
 8003506:	3b1e      	subs	r3, #30
 8003508:	fa00 f203 	lsl.w	r2, r0, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	60da      	str	r2, [r3, #12]
 8003514:	e019      	b.n	800354a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6919      	ldr	r1, [r3, #16]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4413      	add	r3, r2
 8003526:	2207      	movs	r2, #7
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	4019      	ands	r1, r3
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	6898      	ldr	r0, [r3, #8]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	4413      	add	r3, r2
 800353e:	fa00 f203 	lsl.w	r2, r0, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b10      	cmp	r3, #16
 8003550:	d003      	beq.n	800355a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003556:	2b11      	cmp	r3, #17
 8003558:	d132      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a1d      	ldr	r2, [pc, #116]	; (80035d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d125      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d126      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003580:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b10      	cmp	r3, #16
 8003588:	d11a      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800358a:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a13      	ldr	r2, [pc, #76]	; (80035dc <HAL_ADC_ConfigChannel+0x1ec>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	0c9a      	lsrs	r2, r3, #18
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035a0:	e002      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f9      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x1b2>
 80035ae:	e007      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr
 80035d4:	40012400 	.word	0x40012400
 80035d8:	20000030 	.word	0x20000030
 80035dc:	431bde83 	.word	0x431bde83

080035e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d040      	beq.n	8003680 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0201 	orr.w	r2, r2, #1
 800360c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800360e:	4b1f      	ldr	r3, [pc, #124]	; (800368c <ADC_Enable+0xac>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <ADC_Enable+0xb0>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	0c9b      	lsrs	r3, r3, #18
 800361a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800361c:	e002      	b.n	8003624 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	3b01      	subs	r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f9      	bne.n	800361e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800362a:	f7ff fbef 	bl	8002e0c <HAL_GetTick>
 800362e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003630:	e01f      	b.n	8003672 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003632:	f7ff fbeb 	bl	8002e0c <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d918      	bls.n	8003672 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d011      	beq.n	8003672 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	f043 0210 	orr.w	r2, r3, #16
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	f043 0201 	orr.w	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e007      	b.n	8003682 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b01      	cmp	r3, #1
 800367e:	d1d8      	bne.n	8003632 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20000030 	.word	0x20000030
 8003690:	431bde83 	.word	0x431bde83

08003694 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d12e      	bne.n	800370c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036be:	f7ff fba5 	bl	8002e0c <HAL_GetTick>
 80036c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036c4:	e01b      	b.n	80036fe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036c6:	f7ff fba1 	bl	8002e0c <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d914      	bls.n	80036fe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d10d      	bne.n	80036fe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	f043 0210 	orr.w	r2, r3, #16
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	f043 0201 	orr.w	r2, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e007      	b.n	800370e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d0dc      	beq.n	80036c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <__NVIC_SetPriorityGrouping+0x44>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003734:	4013      	ands	r3, r2
 8003736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800374a:	4a04      	ldr	r2, [pc, #16]	; (800375c <__NVIC_SetPriorityGrouping+0x44>)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	60d3      	str	r3, [r2, #12]
}
 8003750:	bf00      	nop
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003764:	4b04      	ldr	r3, [pc, #16]	; (8003778 <__NVIC_GetPriorityGrouping+0x18>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	f003 0307 	and.w	r3, r3, #7
}
 800376e:	4618      	mov	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	2b00      	cmp	r3, #0
 800378c:	db0b      	blt.n	80037a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	f003 021f 	and.w	r2, r3, #31
 8003794:	4906      	ldr	r1, [pc, #24]	; (80037b0 <__NVIC_EnableIRQ+0x34>)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2001      	movs	r0, #1
 800379e:	fa00 f202 	lsl.w	r2, r0, r2
 80037a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr
 80037b0:	e000e100 	.word	0xe000e100

080037b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	6039      	str	r1, [r7, #0]
 80037be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	db0a      	blt.n	80037de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	490c      	ldr	r1, [pc, #48]	; (8003800 <__NVIC_SetPriority+0x4c>)
 80037ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d2:	0112      	lsls	r2, r2, #4
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	440b      	add	r3, r1
 80037d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037dc:	e00a      	b.n	80037f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	4908      	ldr	r1, [pc, #32]	; (8003804 <__NVIC_SetPriority+0x50>)
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	3b04      	subs	r3, #4
 80037ec:	0112      	lsls	r2, r2, #4
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	440b      	add	r3, r1
 80037f2:	761a      	strb	r2, [r3, #24]
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000e100 	.word	0xe000e100
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003808:	b480      	push	{r7}
 800380a:	b089      	sub	sp, #36	; 0x24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f1c3 0307 	rsb	r3, r3, #7
 8003822:	2b04      	cmp	r3, #4
 8003824:	bf28      	it	cs
 8003826:	2304      	movcs	r3, #4
 8003828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	3304      	adds	r3, #4
 800382e:	2b06      	cmp	r3, #6
 8003830:	d902      	bls.n	8003838 <NVIC_EncodePriority+0x30>
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	3b03      	subs	r3, #3
 8003836:	e000      	b.n	800383a <NVIC_EncodePriority+0x32>
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800383c:	f04f 32ff 	mov.w	r2, #4294967295
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43da      	mvns	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	401a      	ands	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003850:	f04f 31ff 	mov.w	r1, #4294967295
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	43d9      	mvns	r1, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003860:	4313      	orrs	r3, r2
         );
}
 8003862:	4618      	mov	r0, r3
 8003864:	3724      	adds	r7, #36	; 0x24
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3b01      	subs	r3, #1
 8003878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800387c:	d301      	bcc.n	8003882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800387e:	2301      	movs	r3, #1
 8003880:	e00f      	b.n	80038a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003882:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <SysTick_Config+0x40>)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800388a:	210f      	movs	r1, #15
 800388c:	f04f 30ff 	mov.w	r0, #4294967295
 8003890:	f7ff ff90 	bl	80037b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <SysTick_Config+0x40>)
 8003896:	2200      	movs	r2, #0
 8003898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800389a:	4b04      	ldr	r3, [pc, #16]	; (80038ac <SysTick_Config+0x40>)
 800389c:	2207      	movs	r2, #7
 800389e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	e000e010 	.word	0xe000e010

080038b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ff2d 	bl	8003718 <__NVIC_SetPriorityGrouping>
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b086      	sub	sp, #24
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	4603      	mov	r3, r0
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038d8:	f7ff ff42 	bl	8003760 <__NVIC_GetPriorityGrouping>
 80038dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	6978      	ldr	r0, [r7, #20]
 80038e4:	f7ff ff90 	bl	8003808 <NVIC_EncodePriority>
 80038e8:	4602      	mov	r2, r0
 80038ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ee:	4611      	mov	r1, r2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff ff5f 	bl	80037b4 <__NVIC_SetPriority>
}
 80038f6:	bf00      	nop
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	4603      	mov	r3, r0
 8003906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff ff35 	bl	800377c <__NVIC_EnableIRQ>
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff ffa2 	bl	800386c <SysTick_Config>
 8003928:	4603      	mov	r3, r0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e043      	b.n	80039d2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	4b22      	ldr	r3, [pc, #136]	; (80039dc <HAL_DMA_Init+0xa8>)
 8003952:	4413      	add	r3, r2
 8003954:	4a22      	ldr	r2, [pc, #136]	; (80039e0 <HAL_DMA_Init+0xac>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	009a      	lsls	r2, r3, #2
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a1f      	ldr	r2, [pc, #124]	; (80039e4 <HAL_DMA_Init+0xb0>)
 8003966:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800397e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003982:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800398c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	bffdfff8 	.word	0xbffdfff8
 80039e0:	cccccccd 	.word	0xcccccccd
 80039e4:	40020000 	.word	0x40020000

080039e8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d008      	beq.n	8003a12 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2204      	movs	r2, #4
 8003a04:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e020      	b.n	8003a54 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 020e 	bic.w	r2, r2, #14
 8003a20:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a40:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr
	...

08003a60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d005      	beq.n	8003a84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
 8003a82:	e051      	b.n	8003b28 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 020e 	bic.w	r2, r2, #14
 8003a92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a22      	ldr	r2, [pc, #136]	; (8003b34 <HAL_DMA_Abort_IT+0xd4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d029      	beq.n	8003b02 <HAL_DMA_Abort_IT+0xa2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a21      	ldr	r2, [pc, #132]	; (8003b38 <HAL_DMA_Abort_IT+0xd8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d022      	beq.n	8003afe <HAL_DMA_Abort_IT+0x9e>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1f      	ldr	r2, [pc, #124]	; (8003b3c <HAL_DMA_Abort_IT+0xdc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01a      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x98>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1e      	ldr	r2, [pc, #120]	; (8003b40 <HAL_DMA_Abort_IT+0xe0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d012      	beq.n	8003af2 <HAL_DMA_Abort_IT+0x92>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a1c      	ldr	r2, [pc, #112]	; (8003b44 <HAL_DMA_Abort_IT+0xe4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00a      	beq.n	8003aec <HAL_DMA_Abort_IT+0x8c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a1b      	ldr	r2, [pc, #108]	; (8003b48 <HAL_DMA_Abort_IT+0xe8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d102      	bne.n	8003ae6 <HAL_DMA_Abort_IT+0x86>
 8003ae0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ae4:	e00e      	b.n	8003b04 <HAL_DMA_Abort_IT+0xa4>
 8003ae6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aea:	e00b      	b.n	8003b04 <HAL_DMA_Abort_IT+0xa4>
 8003aec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003af0:	e008      	b.n	8003b04 <HAL_DMA_Abort_IT+0xa4>
 8003af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af6:	e005      	b.n	8003b04 <HAL_DMA_Abort_IT+0xa4>
 8003af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003afc:	e002      	b.n	8003b04 <HAL_DMA_Abort_IT+0xa4>
 8003afe:	2310      	movs	r3, #16
 8003b00:	e000      	b.n	8003b04 <HAL_DMA_Abort_IT+0xa4>
 8003b02:	2301      	movs	r3, #1
 8003b04:	4a11      	ldr	r2, [pc, #68]	; (8003b4c <HAL_DMA_Abort_IT+0xec>)
 8003b06:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
    } 
  }
  return status;
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40020008 	.word	0x40020008
 8003b38:	4002001c 	.word	0x4002001c
 8003b3c:	40020030 	.word	0x40020030
 8003b40:	40020044 	.word	0x40020044
 8003b44:	40020058 	.word	0x40020058
 8003b48:	4002006c 	.word	0x4002006c
 8003b4c:	40020000 	.word	0x40020000

08003b50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d04f      	beq.n	8003c18 <HAL_DMA_IRQHandler+0xc8>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d04a      	beq.n	8003c18 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d107      	bne.n	8003ba0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0204 	bic.w	r2, r2, #4
 8003b9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a66      	ldr	r2, [pc, #408]	; (8003d40 <HAL_DMA_IRQHandler+0x1f0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d029      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xae>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a65      	ldr	r2, [pc, #404]	; (8003d44 <HAL_DMA_IRQHandler+0x1f4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d022      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xaa>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a63      	ldr	r2, [pc, #396]	; (8003d48 <HAL_DMA_IRQHandler+0x1f8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01a      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0xa4>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a62      	ldr	r2, [pc, #392]	; (8003d4c <HAL_DMA_IRQHandler+0x1fc>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d012      	beq.n	8003bee <HAL_DMA_IRQHandler+0x9e>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a60      	ldr	r2, [pc, #384]	; (8003d50 <HAL_DMA_IRQHandler+0x200>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00a      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x98>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a5f      	ldr	r2, [pc, #380]	; (8003d54 <HAL_DMA_IRQHandler+0x204>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d102      	bne.n	8003be2 <HAL_DMA_IRQHandler+0x92>
 8003bdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003be0:	e00e      	b.n	8003c00 <HAL_DMA_IRQHandler+0xb0>
 8003be2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003be6:	e00b      	b.n	8003c00 <HAL_DMA_IRQHandler+0xb0>
 8003be8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bec:	e008      	b.n	8003c00 <HAL_DMA_IRQHandler+0xb0>
 8003bee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bf2:	e005      	b.n	8003c00 <HAL_DMA_IRQHandler+0xb0>
 8003bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bf8:	e002      	b.n	8003c00 <HAL_DMA_IRQHandler+0xb0>
 8003bfa:	2340      	movs	r3, #64	; 0x40
 8003bfc:	e000      	b.n	8003c00 <HAL_DMA_IRQHandler+0xb0>
 8003bfe:	2304      	movs	r3, #4
 8003c00:	4a55      	ldr	r2, [pc, #340]	; (8003d58 <HAL_DMA_IRQHandler+0x208>)
 8003c02:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8094 	beq.w	8003d36 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003c16:	e08e      	b.n	8003d36 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	409a      	lsls	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d056      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0x186>
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d051      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10b      	bne.n	8003c58 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 020a 	bic.w	r2, r2, #10
 8003c4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a38      	ldr	r2, [pc, #224]	; (8003d40 <HAL_DMA_IRQHandler+0x1f0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d029      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x166>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a37      	ldr	r2, [pc, #220]	; (8003d44 <HAL_DMA_IRQHandler+0x1f4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d022      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x162>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a35      	ldr	r2, [pc, #212]	; (8003d48 <HAL_DMA_IRQHandler+0x1f8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d01a      	beq.n	8003cac <HAL_DMA_IRQHandler+0x15c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a34      	ldr	r2, [pc, #208]	; (8003d4c <HAL_DMA_IRQHandler+0x1fc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d012      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x156>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a32      	ldr	r2, [pc, #200]	; (8003d50 <HAL_DMA_IRQHandler+0x200>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00a      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x150>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a31      	ldr	r2, [pc, #196]	; (8003d54 <HAL_DMA_IRQHandler+0x204>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d102      	bne.n	8003c9a <HAL_DMA_IRQHandler+0x14a>
 8003c94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c98:	e00e      	b.n	8003cb8 <HAL_DMA_IRQHandler+0x168>
 8003c9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c9e:	e00b      	b.n	8003cb8 <HAL_DMA_IRQHandler+0x168>
 8003ca0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ca4:	e008      	b.n	8003cb8 <HAL_DMA_IRQHandler+0x168>
 8003ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003caa:	e005      	b.n	8003cb8 <HAL_DMA_IRQHandler+0x168>
 8003cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cb0:	e002      	b.n	8003cb8 <HAL_DMA_IRQHandler+0x168>
 8003cb2:	2320      	movs	r3, #32
 8003cb4:	e000      	b.n	8003cb8 <HAL_DMA_IRQHandler+0x168>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	4a27      	ldr	r2, [pc, #156]	; (8003d58 <HAL_DMA_IRQHandler+0x208>)
 8003cba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d034      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003cd4:	e02f      	b.n	8003d36 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	2208      	movs	r2, #8
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d028      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x1e8>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d023      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 020e 	bic.w	r2, r2, #14
 8003cfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	2101      	movs	r1, #1
 8003d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d004      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	4798      	blx	r3
    }
  }
  return;
 8003d36:	bf00      	nop
 8003d38:	bf00      	nop
}
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40020008 	.word	0x40020008
 8003d44:	4002001c 	.word	0x4002001c
 8003d48:	40020030 	.word	0x40020030
 8003d4c:	40020044 	.word	0x40020044
 8003d50:	40020058 	.word	0x40020058
 8003d54:	4002006c 	.word	0x4002006c
 8003d58:	40020000 	.word	0x40020000

08003d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b08b      	sub	sp, #44	; 0x2c
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d66:	2300      	movs	r3, #0
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d6e:	e169      	b.n	8004044 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d70:	2201      	movs	r2, #1
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	f040 8158 	bne.w	800403e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	4a9a      	ldr	r2, [pc, #616]	; (8003ffc <HAL_GPIO_Init+0x2a0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d05e      	beq.n	8003e56 <HAL_GPIO_Init+0xfa>
 8003d98:	4a98      	ldr	r2, [pc, #608]	; (8003ffc <HAL_GPIO_Init+0x2a0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d875      	bhi.n	8003e8a <HAL_GPIO_Init+0x12e>
 8003d9e:	4a98      	ldr	r2, [pc, #608]	; (8004000 <HAL_GPIO_Init+0x2a4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d058      	beq.n	8003e56 <HAL_GPIO_Init+0xfa>
 8003da4:	4a96      	ldr	r2, [pc, #600]	; (8004000 <HAL_GPIO_Init+0x2a4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d86f      	bhi.n	8003e8a <HAL_GPIO_Init+0x12e>
 8003daa:	4a96      	ldr	r2, [pc, #600]	; (8004004 <HAL_GPIO_Init+0x2a8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d052      	beq.n	8003e56 <HAL_GPIO_Init+0xfa>
 8003db0:	4a94      	ldr	r2, [pc, #592]	; (8004004 <HAL_GPIO_Init+0x2a8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d869      	bhi.n	8003e8a <HAL_GPIO_Init+0x12e>
 8003db6:	4a94      	ldr	r2, [pc, #592]	; (8004008 <HAL_GPIO_Init+0x2ac>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d04c      	beq.n	8003e56 <HAL_GPIO_Init+0xfa>
 8003dbc:	4a92      	ldr	r2, [pc, #584]	; (8004008 <HAL_GPIO_Init+0x2ac>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d863      	bhi.n	8003e8a <HAL_GPIO_Init+0x12e>
 8003dc2:	4a92      	ldr	r2, [pc, #584]	; (800400c <HAL_GPIO_Init+0x2b0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d046      	beq.n	8003e56 <HAL_GPIO_Init+0xfa>
 8003dc8:	4a90      	ldr	r2, [pc, #576]	; (800400c <HAL_GPIO_Init+0x2b0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d85d      	bhi.n	8003e8a <HAL_GPIO_Init+0x12e>
 8003dce:	2b12      	cmp	r3, #18
 8003dd0:	d82a      	bhi.n	8003e28 <HAL_GPIO_Init+0xcc>
 8003dd2:	2b12      	cmp	r3, #18
 8003dd4:	d859      	bhi.n	8003e8a <HAL_GPIO_Init+0x12e>
 8003dd6:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <HAL_GPIO_Init+0x80>)
 8003dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ddc:	08003e57 	.word	0x08003e57
 8003de0:	08003e31 	.word	0x08003e31
 8003de4:	08003e43 	.word	0x08003e43
 8003de8:	08003e85 	.word	0x08003e85
 8003dec:	08003e8b 	.word	0x08003e8b
 8003df0:	08003e8b 	.word	0x08003e8b
 8003df4:	08003e8b 	.word	0x08003e8b
 8003df8:	08003e8b 	.word	0x08003e8b
 8003dfc:	08003e8b 	.word	0x08003e8b
 8003e00:	08003e8b 	.word	0x08003e8b
 8003e04:	08003e8b 	.word	0x08003e8b
 8003e08:	08003e8b 	.word	0x08003e8b
 8003e0c:	08003e8b 	.word	0x08003e8b
 8003e10:	08003e8b 	.word	0x08003e8b
 8003e14:	08003e8b 	.word	0x08003e8b
 8003e18:	08003e8b 	.word	0x08003e8b
 8003e1c:	08003e8b 	.word	0x08003e8b
 8003e20:	08003e39 	.word	0x08003e39
 8003e24:	08003e4d 	.word	0x08003e4d
 8003e28:	4a79      	ldr	r2, [pc, #484]	; (8004010 <HAL_GPIO_Init+0x2b4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d013      	beq.n	8003e56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e2e:	e02c      	b.n	8003e8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	623b      	str	r3, [r7, #32]
          break;
 8003e36:	e029      	b.n	8003e8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	623b      	str	r3, [r7, #32]
          break;
 8003e40:	e024      	b.n	8003e8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	3308      	adds	r3, #8
 8003e48:	623b      	str	r3, [r7, #32]
          break;
 8003e4a:	e01f      	b.n	8003e8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	330c      	adds	r3, #12
 8003e52:	623b      	str	r3, [r7, #32]
          break;
 8003e54:	e01a      	b.n	8003e8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d102      	bne.n	8003e64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e5e:	2304      	movs	r3, #4
 8003e60:	623b      	str	r3, [r7, #32]
          break;
 8003e62:	e013      	b.n	8003e8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e6c:	2308      	movs	r3, #8
 8003e6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69fa      	ldr	r2, [r7, #28]
 8003e74:	611a      	str	r2, [r3, #16]
          break;
 8003e76:	e009      	b.n	8003e8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e78:	2308      	movs	r3, #8
 8003e7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	615a      	str	r2, [r3, #20]
          break;
 8003e82:	e003      	b.n	8003e8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e84:	2300      	movs	r3, #0
 8003e86:	623b      	str	r3, [r7, #32]
          break;
 8003e88:	e000      	b.n	8003e8c <HAL_GPIO_Init+0x130>
          break;
 8003e8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2bff      	cmp	r3, #255	; 0xff
 8003e90:	d801      	bhi.n	8003e96 <HAL_GPIO_Init+0x13a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	e001      	b.n	8003e9a <HAL_GPIO_Init+0x13e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2bff      	cmp	r3, #255	; 0xff
 8003ea0:	d802      	bhi.n	8003ea8 <HAL_GPIO_Init+0x14c>
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	e002      	b.n	8003eae <HAL_GPIO_Init+0x152>
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	3b08      	subs	r3, #8
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	210f      	movs	r1, #15
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	6a39      	ldr	r1, [r7, #32]
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 80b1 	beq.w	800403e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003edc:	4b4d      	ldr	r3, [pc, #308]	; (8004014 <HAL_GPIO_Init+0x2b8>)
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	4a4c      	ldr	r2, [pc, #304]	; (8004014 <HAL_GPIO_Init+0x2b8>)
 8003ee2:	f043 0301 	orr.w	r3, r3, #1
 8003ee6:	6193      	str	r3, [r2, #24]
 8003ee8:	4b4a      	ldr	r3, [pc, #296]	; (8004014 <HAL_GPIO_Init+0x2b8>)
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ef4:	4a48      	ldr	r2, [pc, #288]	; (8004018 <HAL_GPIO_Init+0x2bc>)
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	3302      	adds	r3, #2
 8003efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	220f      	movs	r2, #15
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4013      	ands	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a40      	ldr	r2, [pc, #256]	; (800401c <HAL_GPIO_Init+0x2c0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d013      	beq.n	8003f48 <HAL_GPIO_Init+0x1ec>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a3f      	ldr	r2, [pc, #252]	; (8004020 <HAL_GPIO_Init+0x2c4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00d      	beq.n	8003f44 <HAL_GPIO_Init+0x1e8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a3e      	ldr	r2, [pc, #248]	; (8004024 <HAL_GPIO_Init+0x2c8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d007      	beq.n	8003f40 <HAL_GPIO_Init+0x1e4>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a3d      	ldr	r2, [pc, #244]	; (8004028 <HAL_GPIO_Init+0x2cc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d101      	bne.n	8003f3c <HAL_GPIO_Init+0x1e0>
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e006      	b.n	8003f4a <HAL_GPIO_Init+0x1ee>
 8003f3c:	2304      	movs	r3, #4
 8003f3e:	e004      	b.n	8003f4a <HAL_GPIO_Init+0x1ee>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e002      	b.n	8003f4a <HAL_GPIO_Init+0x1ee>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <HAL_GPIO_Init+0x1ee>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4c:	f002 0203 	and.w	r2, r2, #3
 8003f50:	0092      	lsls	r2, r2, #2
 8003f52:	4093      	lsls	r3, r2
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f5a:	492f      	ldr	r1, [pc, #188]	; (8004018 <HAL_GPIO_Init+0x2bc>)
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	089b      	lsrs	r3, r3, #2
 8003f60:	3302      	adds	r3, #2
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d006      	beq.n	8003f82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f74:	4b2d      	ldr	r3, [pc, #180]	; (800402c <HAL_GPIO_Init+0x2d0>)
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	492c      	ldr	r1, [pc, #176]	; (800402c <HAL_GPIO_Init+0x2d0>)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	608b      	str	r3, [r1, #8]
 8003f80:	e006      	b.n	8003f90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f82:	4b2a      	ldr	r3, [pc, #168]	; (800402c <HAL_GPIO_Init+0x2d0>)
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	4928      	ldr	r1, [pc, #160]	; (800402c <HAL_GPIO_Init+0x2d0>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d006      	beq.n	8003faa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f9c:	4b23      	ldr	r3, [pc, #140]	; (800402c <HAL_GPIO_Init+0x2d0>)
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	4922      	ldr	r1, [pc, #136]	; (800402c <HAL_GPIO_Init+0x2d0>)
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60cb      	str	r3, [r1, #12]
 8003fa8:	e006      	b.n	8003fb8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003faa:	4b20      	ldr	r3, [pc, #128]	; (800402c <HAL_GPIO_Init+0x2d0>)
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	491e      	ldr	r1, [pc, #120]	; (800402c <HAL_GPIO_Init+0x2d0>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d006      	beq.n	8003fd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003fc4:	4b19      	ldr	r3, [pc, #100]	; (800402c <HAL_GPIO_Init+0x2d0>)
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	4918      	ldr	r1, [pc, #96]	; (800402c <HAL_GPIO_Init+0x2d0>)
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	604b      	str	r3, [r1, #4]
 8003fd0:	e006      	b.n	8003fe0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003fd2:	4b16      	ldr	r3, [pc, #88]	; (800402c <HAL_GPIO_Init+0x2d0>)
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	4914      	ldr	r1, [pc, #80]	; (800402c <HAL_GPIO_Init+0x2d0>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d021      	beq.n	8004030 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003fec:	4b0f      	ldr	r3, [pc, #60]	; (800402c <HAL_GPIO_Init+0x2d0>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	490e      	ldr	r1, [pc, #56]	; (800402c <HAL_GPIO_Init+0x2d0>)
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	600b      	str	r3, [r1, #0]
 8003ff8:	e021      	b.n	800403e <HAL_GPIO_Init+0x2e2>
 8003ffa:	bf00      	nop
 8003ffc:	10320000 	.word	0x10320000
 8004000:	10310000 	.word	0x10310000
 8004004:	10220000 	.word	0x10220000
 8004008:	10210000 	.word	0x10210000
 800400c:	10120000 	.word	0x10120000
 8004010:	10110000 	.word	0x10110000
 8004014:	40021000 	.word	0x40021000
 8004018:	40010000 	.word	0x40010000
 800401c:	40010800 	.word	0x40010800
 8004020:	40010c00 	.word	0x40010c00
 8004024:	40011000 	.word	0x40011000
 8004028:	40011400 	.word	0x40011400
 800402c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_GPIO_Init+0x304>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	43db      	mvns	r3, r3
 8004038:	4909      	ldr	r1, [pc, #36]	; (8004060 <HAL_GPIO_Init+0x304>)
 800403a:	4013      	ands	r3, r2
 800403c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	3301      	adds	r3, #1
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	fa22 f303 	lsr.w	r3, r2, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	f47f ae8e 	bne.w	8003d70 <HAL_GPIO_Init+0x14>
  }
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop
 8004058:	372c      	adds	r7, #44	; 0x2c
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	40010400 	.word	0x40010400

08004064 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	887b      	ldrh	r3, [r7, #2]
 8004076:	4013      	ands	r3, r2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
 8004080:	e001      	b.n	8004086 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004082:	2300      	movs	r3, #0
 8004084:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004086:	7bfb      	ldrb	r3, [r7, #15]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr

08004092 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	460b      	mov	r3, r1
 800409c:	807b      	strh	r3, [r7, #2]
 800409e:	4613      	mov	r3, r2
 80040a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040a2:	787b      	ldrb	r3, [r7, #1]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040a8:	887a      	ldrh	r2, [r7, #2]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80040ae:	e003      	b.n	80040b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040b0:	887b      	ldrh	r3, [r7, #2]
 80040b2:	041a      	lsls	r2, r3, #16
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	611a      	str	r2, [r3, #16]
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr
	...

080040c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e12b      	b.n	800432e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fd fabc 	bl	8001668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2224      	movs	r2, #36	; 0x24
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0201 	bic.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004116:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004126:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004128:	f001 f830 	bl	800518c <HAL_RCC_GetPCLK1Freq>
 800412c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	4a81      	ldr	r2, [pc, #516]	; (8004338 <HAL_I2C_Init+0x274>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d807      	bhi.n	8004148 <HAL_I2C_Init+0x84>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4a80      	ldr	r2, [pc, #512]	; (800433c <HAL_I2C_Init+0x278>)
 800413c:	4293      	cmp	r3, r2
 800413e:	bf94      	ite	ls
 8004140:	2301      	movls	r3, #1
 8004142:	2300      	movhi	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	e006      	b.n	8004156 <HAL_I2C_Init+0x92>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4a7d      	ldr	r2, [pc, #500]	; (8004340 <HAL_I2C_Init+0x27c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	bf94      	ite	ls
 8004150:	2301      	movls	r3, #1
 8004152:	2300      	movhi	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e0e7      	b.n	800432e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4a78      	ldr	r2, [pc, #480]	; (8004344 <HAL_I2C_Init+0x280>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	0c9b      	lsrs	r3, r3, #18
 8004168:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	4a6a      	ldr	r2, [pc, #424]	; (8004338 <HAL_I2C_Init+0x274>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d802      	bhi.n	8004198 <HAL_I2C_Init+0xd4>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	3301      	adds	r3, #1
 8004196:	e009      	b.n	80041ac <HAL_I2C_Init+0xe8>
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800419e:	fb02 f303 	mul.w	r3, r2, r3
 80041a2:	4a69      	ldr	r2, [pc, #420]	; (8004348 <HAL_I2C_Init+0x284>)
 80041a4:	fba2 2303 	umull	r2, r3, r2, r3
 80041a8:	099b      	lsrs	r3, r3, #6
 80041aa:	3301      	adds	r3, #1
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	430b      	orrs	r3, r1
 80041b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	495c      	ldr	r1, [pc, #368]	; (8004338 <HAL_I2C_Init+0x274>)
 80041c8:	428b      	cmp	r3, r1
 80041ca:	d819      	bhi.n	8004200 <HAL_I2C_Init+0x13c>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	1e59      	subs	r1, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80041da:	1c59      	adds	r1, r3, #1
 80041dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041e0:	400b      	ands	r3, r1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <HAL_I2C_Init+0x138>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1e59      	subs	r1, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80041f4:	3301      	adds	r3, #1
 80041f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041fa:	e051      	b.n	80042a0 <HAL_I2C_Init+0x1dc>
 80041fc:	2304      	movs	r3, #4
 80041fe:	e04f      	b.n	80042a0 <HAL_I2C_Init+0x1dc>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d111      	bne.n	800422c <HAL_I2C_Init+0x168>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	1e58      	subs	r0, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6859      	ldr	r1, [r3, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	440b      	add	r3, r1
 8004216:	fbb0 f3f3 	udiv	r3, r0, r3
 800421a:	3301      	adds	r3, #1
 800421c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	e012      	b.n	8004252 <HAL_I2C_Init+0x18e>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1e58      	subs	r0, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	0099      	lsls	r1, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004242:	3301      	adds	r3, #1
 8004244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_I2C_Init+0x196>
 8004256:	2301      	movs	r3, #1
 8004258:	e022      	b.n	80042a0 <HAL_I2C_Init+0x1dc>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10e      	bne.n	8004280 <HAL_I2C_Init+0x1bc>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1e58      	subs	r0, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6859      	ldr	r1, [r3, #4]
 800426a:	460b      	mov	r3, r1
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	440b      	add	r3, r1
 8004270:	fbb0 f3f3 	udiv	r3, r0, r3
 8004274:	3301      	adds	r3, #1
 8004276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800427a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800427e:	e00f      	b.n	80042a0 <HAL_I2C_Init+0x1dc>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	1e58      	subs	r0, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6859      	ldr	r1, [r3, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	0099      	lsls	r1, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	fbb0 f3f3 	udiv	r3, r0, r3
 8004296:	3301      	adds	r3, #1
 8004298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800429c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	6809      	ldr	r1, [r1, #0]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69da      	ldr	r2, [r3, #28]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6911      	ldr	r1, [r2, #16]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68d2      	ldr	r2, [r2, #12]
 80042da:	4311      	orrs	r1, r2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	430b      	orrs	r3, r1
 80042e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695a      	ldr	r2, [r3, #20]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	000186a0 	.word	0x000186a0
 800433c:	001e847f 	.word	0x001e847f
 8004340:	003d08ff 	.word	0x003d08ff
 8004344:	431bde83 	.word	0x431bde83
 8004348:	10624dd3 	.word	0x10624dd3

0800434c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af02      	add	r7, sp, #8
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	461a      	mov	r2, r3
 8004358:	460b      	mov	r3, r1
 800435a:	817b      	strh	r3, [r7, #10]
 800435c:	4613      	mov	r3, r2
 800435e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004360:	f7fe fd54 	bl	8002e0c <HAL_GetTick>
 8004364:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b20      	cmp	r3, #32
 8004370:	f040 80e0 	bne.w	8004534 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	2319      	movs	r3, #25
 800437a:	2201      	movs	r2, #1
 800437c:	4970      	ldr	r1, [pc, #448]	; (8004540 <HAL_I2C_Master_Transmit+0x1f4>)
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f964 	bl	800464c <I2C_WaitOnFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800438a:	2302      	movs	r3, #2
 800438c:	e0d3      	b.n	8004536 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_I2C_Master_Transmit+0x50>
 8004398:	2302      	movs	r3, #2
 800439a:	e0cc      	b.n	8004536 <HAL_I2C_Master_Transmit+0x1ea>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d007      	beq.n	80043c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0201 	orr.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2221      	movs	r2, #33	; 0x21
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2210      	movs	r2, #16
 80043de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	893a      	ldrh	r2, [r7, #8]
 80043f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a50      	ldr	r2, [pc, #320]	; (8004544 <HAL_I2C_Master_Transmit+0x1f8>)
 8004402:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004404:	8979      	ldrh	r1, [r7, #10]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	6a3a      	ldr	r2, [r7, #32]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f89c 	bl	8004548 <I2C_MasterRequestWrite>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e08d      	b.n	8004536 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800441a:	2300      	movs	r3, #0
 800441c:	613b      	str	r3, [r7, #16]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004430:	e066      	b.n	8004500 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	6a39      	ldr	r1, [r7, #32]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 fa22 	bl	8004880 <I2C_WaitOnTXEFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00d      	beq.n	800445e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	2b04      	cmp	r3, #4
 8004448:	d107      	bne.n	800445a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004458:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e06b      	b.n	8004536 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	781a      	ldrb	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b04      	cmp	r3, #4
 800449a:	d11b      	bne.n	80044d4 <HAL_I2C_Master_Transmit+0x188>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d017      	beq.n	80044d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	781a      	ldrb	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	6a39      	ldr	r1, [r7, #32]
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 fa19 	bl	8004910 <I2C_WaitOnBTFFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00d      	beq.n	8004500 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d107      	bne.n	80044fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e01a      	b.n	8004536 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004504:	2b00      	cmp	r3, #0
 8004506:	d194      	bne.n	8004432 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	e000      	b.n	8004536 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004534:	2302      	movs	r3, #2
  }
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	00100002 	.word	0x00100002
 8004544:	ffff0000 	.word	0xffff0000

08004548 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af02      	add	r7, sp, #8
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	607a      	str	r2, [r7, #4]
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	460b      	mov	r3, r1
 8004556:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b08      	cmp	r3, #8
 8004562:	d006      	beq.n	8004572 <I2C_MasterRequestWrite+0x2a>
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d003      	beq.n	8004572 <I2C_MasterRequestWrite+0x2a>
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004570:	d108      	bne.n	8004584 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	e00b      	b.n	800459c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	2b12      	cmp	r3, #18
 800458a:	d107      	bne.n	800459c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800459a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f84f 	bl	800464c <I2C_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00d      	beq.n	80045d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c2:	d103      	bne.n	80045cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e035      	b.n	800463c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045d8:	d108      	bne.n	80045ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045da:	897b      	ldrh	r3, [r7, #10]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045e8:	611a      	str	r2, [r3, #16]
 80045ea:	e01b      	b.n	8004624 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045ec:	897b      	ldrh	r3, [r7, #10]
 80045ee:	11db      	asrs	r3, r3, #7
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f003 0306 	and.w	r3, r3, #6
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	f063 030f 	orn	r3, r3, #15
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	490e      	ldr	r1, [pc, #56]	; (8004644 <I2C_MasterRequestWrite+0xfc>)
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f898 	bl	8004740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e010      	b.n	800463c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800461a:	897b      	ldrh	r3, [r7, #10]
 800461c:	b2da      	uxtb	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	4907      	ldr	r1, [pc, #28]	; (8004648 <I2C_MasterRequestWrite+0x100>)
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f888 	bl	8004740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	00010008 	.word	0x00010008
 8004648:	00010002 	.word	0x00010002

0800464c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	4613      	mov	r3, r2
 800465a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800465c:	e048      	b.n	80046f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004664:	d044      	beq.n	80046f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004666:	f7fe fbd1 	bl	8002e0c <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d302      	bcc.n	800467c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d139      	bne.n	80046f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	0c1b      	lsrs	r3, r3, #16
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b01      	cmp	r3, #1
 8004684:	d10d      	bne.n	80046a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	43da      	mvns	r2, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	4013      	ands	r3, r2
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	bf0c      	ite	eq
 8004698:	2301      	moveq	r3, #1
 800469a:	2300      	movne	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	e00c      	b.n	80046bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	43da      	mvns	r2, r3
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	4013      	ands	r3, r2
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	bf0c      	ite	eq
 80046b4:	2301      	moveq	r3, #1
 80046b6:	2300      	movne	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d116      	bne.n	80046f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	f043 0220 	orr.w	r2, r3, #32
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e023      	b.n	8004738 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	0c1b      	lsrs	r3, r3, #16
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d10d      	bne.n	8004716 <I2C_WaitOnFlagUntilTimeout+0xca>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	43da      	mvns	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4013      	ands	r3, r2
 8004706:	b29b      	uxth	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	e00c      	b.n	8004730 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	43da      	mvns	r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	4013      	ands	r3, r2
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	bf0c      	ite	eq
 8004728:	2301      	moveq	r3, #1
 800472a:	2300      	movne	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	461a      	mov	r2, r3
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	429a      	cmp	r2, r3
 8004734:	d093      	beq.n	800465e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800474e:	e071      	b.n	8004834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475e:	d123      	bne.n	80047a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004778:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	f043 0204 	orr.w	r2, r3, #4
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e067      	b.n	8004878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ae:	d041      	beq.n	8004834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b0:	f7fe fb2c 	bl	8002e0c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d302      	bcc.n	80047c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d136      	bne.n	8004834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	0c1b      	lsrs	r3, r3, #16
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d10c      	bne.n	80047ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	43da      	mvns	r2, r3
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4013      	ands	r3, r2
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	bf14      	ite	ne
 80047e2:	2301      	movne	r3, #1
 80047e4:	2300      	moveq	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	e00b      	b.n	8004802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	43da      	mvns	r2, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	4013      	ands	r3, r2
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf14      	ite	ne
 80047fc:	2301      	movne	r3, #1
 80047fe:	2300      	moveq	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d016      	beq.n	8004834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	f043 0220 	orr.w	r2, r3, #32
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e021      	b.n	8004878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	0c1b      	lsrs	r3, r3, #16
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b01      	cmp	r3, #1
 800483c:	d10c      	bne.n	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	43da      	mvns	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4013      	ands	r3, r2
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	bf14      	ite	ne
 8004850:	2301      	movne	r3, #1
 8004852:	2300      	moveq	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	e00b      	b.n	8004870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	43da      	mvns	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4013      	ands	r3, r2
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	bf14      	ite	ne
 800486a:	2301      	movne	r3, #1
 800486c:	2300      	moveq	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	f47f af6d 	bne.w	8004750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800488c:	e034      	b.n	80048f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f886 	bl	80049a0 <I2C_IsAcknowledgeFailed>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e034      	b.n	8004908 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a4:	d028      	beq.n	80048f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a6:	f7fe fab1 	bl	8002e0c <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d302      	bcc.n	80048bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d11d      	bne.n	80048f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c6:	2b80      	cmp	r3, #128	; 0x80
 80048c8:	d016      	beq.n	80048f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	f043 0220 	orr.w	r2, r3, #32
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e007      	b.n	8004908 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004902:	2b80      	cmp	r3, #128	; 0x80
 8004904:	d1c3      	bne.n	800488e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800491c:	e034      	b.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 f83e 	bl	80049a0 <I2C_IsAcknowledgeFailed>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e034      	b.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d028      	beq.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004936:	f7fe fa69 	bl	8002e0c <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	429a      	cmp	r2, r3
 8004944:	d302      	bcc.n	800494c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d11d      	bne.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b04      	cmp	r3, #4
 8004958:	d016      	beq.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	f043 0220 	orr.w	r2, r3, #32
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e007      	b.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b04      	cmp	r3, #4
 8004994:	d1c3      	bne.n	800491e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b6:	d11b      	bne.n	80049f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	f043 0204 	orr.w	r2, r3, #4
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e000      	b.n	80049f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr

080049fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e26c      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 8087 	beq.w	8004b2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a1c:	4b92      	ldr	r3, [pc, #584]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 030c 	and.w	r3, r3, #12
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d00c      	beq.n	8004a42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a28:	4b8f      	ldr	r3, [pc, #572]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f003 030c 	and.w	r3, r3, #12
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d112      	bne.n	8004a5a <HAL_RCC_OscConfig+0x5e>
 8004a34:	4b8c      	ldr	r3, [pc, #560]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a40:	d10b      	bne.n	8004a5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a42:	4b89      	ldr	r3, [pc, #548]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d06c      	beq.n	8004b28 <HAL_RCC_OscConfig+0x12c>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d168      	bne.n	8004b28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e246      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a62:	d106      	bne.n	8004a72 <HAL_RCC_OscConfig+0x76>
 8004a64:	4b80      	ldr	r3, [pc, #512]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a7f      	ldr	r2, [pc, #508]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	e02e      	b.n	8004ad0 <HAL_RCC_OscConfig+0xd4>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10c      	bne.n	8004a94 <HAL_RCC_OscConfig+0x98>
 8004a7a:	4b7b      	ldr	r3, [pc, #492]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a7a      	ldr	r2, [pc, #488]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	4b78      	ldr	r3, [pc, #480]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a77      	ldr	r2, [pc, #476]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	e01d      	b.n	8004ad0 <HAL_RCC_OscConfig+0xd4>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_RCC_OscConfig+0xbc>
 8004a9e:	4b72      	ldr	r3, [pc, #456]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a71      	ldr	r2, [pc, #452]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	4b6f      	ldr	r3, [pc, #444]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a6e      	ldr	r2, [pc, #440]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	e00b      	b.n	8004ad0 <HAL_RCC_OscConfig+0xd4>
 8004ab8:	4b6b      	ldr	r3, [pc, #428]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a6a      	ldr	r2, [pc, #424]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	4b68      	ldr	r3, [pc, #416]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a67      	ldr	r2, [pc, #412]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ace:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d013      	beq.n	8004b00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad8:	f7fe f998 	bl	8002e0c <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae0:	f7fe f994 	bl	8002e0c <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	; 0x64
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e1fa      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af2:	4b5d      	ldr	r3, [pc, #372]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0f0      	beq.n	8004ae0 <HAL_RCC_OscConfig+0xe4>
 8004afe:	e014      	b.n	8004b2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b00:	f7fe f984 	bl	8002e0c <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b08:	f7fe f980 	bl	8002e0c <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	; 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e1e6      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1a:	4b53      	ldr	r3, [pc, #332]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0x10c>
 8004b26:	e000      	b.n	8004b2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d063      	beq.n	8004bfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b36:	4b4c      	ldr	r3, [pc, #304]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00b      	beq.n	8004b5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b42:	4b49      	ldr	r3, [pc, #292]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f003 030c 	and.w	r3, r3, #12
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d11c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x18c>
 8004b4e:	4b46      	ldr	r3, [pc, #280]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d116      	bne.n	8004b88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b5a:	4b43      	ldr	r3, [pc, #268]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <HAL_RCC_OscConfig+0x176>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d001      	beq.n	8004b72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e1ba      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b72:	4b3d      	ldr	r3, [pc, #244]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4939      	ldr	r1, [pc, #228]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b86:	e03a      	b.n	8004bfe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d020      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b90:	4b36      	ldr	r3, [pc, #216]	; (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b96:	f7fe f939 	bl	8002e0c <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b9e:	f7fe f935 	bl	8002e0c <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e19b      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb0:	4b2d      	ldr	r3, [pc, #180]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0f0      	beq.n	8004b9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bbc:	4b2a      	ldr	r3, [pc, #168]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	4927      	ldr	r1, [pc, #156]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	600b      	str	r3, [r1, #0]
 8004bd0:	e015      	b.n	8004bfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bd2:	4b26      	ldr	r3, [pc, #152]	; (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd8:	f7fe f918 	bl	8002e0c <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be0:	f7fe f914 	bl	8002e0c <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e17a      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf2:	4b1d      	ldr	r3, [pc, #116]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d03a      	beq.n	8004c80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d019      	beq.n	8004c46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c12:	4b17      	ldr	r3, [pc, #92]	; (8004c70 <HAL_RCC_OscConfig+0x274>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c18:	f7fe f8f8 	bl	8002e0c <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c20:	f7fe f8f4 	bl	8002e0c <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e15a      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c32:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c3e:	2001      	movs	r0, #1
 8004c40:	f000 facc 	bl	80051dc <RCC_Delay>
 8004c44:	e01c      	b.n	8004c80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c46:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <HAL_RCC_OscConfig+0x274>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c4c:	f7fe f8de 	bl	8002e0c <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c52:	e00f      	b.n	8004c74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c54:	f7fe f8da 	bl	8002e0c <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d908      	bls.n	8004c74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e140      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>
 8004c66:	bf00      	nop
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	42420000 	.word	0x42420000
 8004c70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c74:	4b9e      	ldr	r3, [pc, #632]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e9      	bne.n	8004c54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 80a6 	beq.w	8004dda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c92:	4b97      	ldr	r3, [pc, #604]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10d      	bne.n	8004cba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c9e:	4b94      	ldr	r3, [pc, #592]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	4a93      	ldr	r2, [pc, #588]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca8:	61d3      	str	r3, [r2, #28]
 8004caa:	4b91      	ldr	r3, [pc, #580]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	60bb      	str	r3, [r7, #8]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cba:	4b8e      	ldr	r3, [pc, #568]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d118      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cc6:	4b8b      	ldr	r3, [pc, #556]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a8a      	ldr	r2, [pc, #552]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cd2:	f7fe f89b 	bl	8002e0c <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cda:	f7fe f897 	bl	8002e0c <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b64      	cmp	r3, #100	; 0x64
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e0fd      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cec:	4b81      	ldr	r3, [pc, #516]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d106      	bne.n	8004d0e <HAL_RCC_OscConfig+0x312>
 8004d00:	4b7b      	ldr	r3, [pc, #492]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	4a7a      	ldr	r2, [pc, #488]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	6213      	str	r3, [r2, #32]
 8004d0c:	e02d      	b.n	8004d6a <HAL_RCC_OscConfig+0x36e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10c      	bne.n	8004d30 <HAL_RCC_OscConfig+0x334>
 8004d16:	4b76      	ldr	r3, [pc, #472]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	4a75      	ldr	r2, [pc, #468]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	6213      	str	r3, [r2, #32]
 8004d22:	4b73      	ldr	r3, [pc, #460]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	4a72      	ldr	r2, [pc, #456]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004d28:	f023 0304 	bic.w	r3, r3, #4
 8004d2c:	6213      	str	r3, [r2, #32]
 8004d2e:	e01c      	b.n	8004d6a <HAL_RCC_OscConfig+0x36e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	2b05      	cmp	r3, #5
 8004d36:	d10c      	bne.n	8004d52 <HAL_RCC_OscConfig+0x356>
 8004d38:	4b6d      	ldr	r3, [pc, #436]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	4a6c      	ldr	r2, [pc, #432]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004d3e:	f043 0304 	orr.w	r3, r3, #4
 8004d42:	6213      	str	r3, [r2, #32]
 8004d44:	4b6a      	ldr	r3, [pc, #424]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	4a69      	ldr	r2, [pc, #420]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	6213      	str	r3, [r2, #32]
 8004d50:	e00b      	b.n	8004d6a <HAL_RCC_OscConfig+0x36e>
 8004d52:	4b67      	ldr	r3, [pc, #412]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	4a66      	ldr	r2, [pc, #408]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	6213      	str	r3, [r2, #32]
 8004d5e:	4b64      	ldr	r3, [pc, #400]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	4a63      	ldr	r2, [pc, #396]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004d64:	f023 0304 	bic.w	r3, r3, #4
 8004d68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d015      	beq.n	8004d9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d72:	f7fe f84b 	bl	8002e0c <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d78:	e00a      	b.n	8004d90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fe f847 	bl	8002e0c <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e0ab      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d90:	4b57      	ldr	r3, [pc, #348]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ee      	beq.n	8004d7a <HAL_RCC_OscConfig+0x37e>
 8004d9c:	e014      	b.n	8004dc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d9e:	f7fe f835 	bl	8002e0c <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da6:	f7fe f831 	bl	8002e0c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e095      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dbc:	4b4c      	ldr	r3, [pc, #304]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1ee      	bne.n	8004da6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d105      	bne.n	8004dda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dce:	4b48      	ldr	r3, [pc, #288]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	4a47      	ldr	r2, [pc, #284]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 8081 	beq.w	8004ee6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004de4:	4b42      	ldr	r3, [pc, #264]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 030c 	and.w	r3, r3, #12
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d061      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d146      	bne.n	8004e86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df8:	4b3f      	ldr	r3, [pc, #252]	; (8004ef8 <HAL_RCC_OscConfig+0x4fc>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfe:	f7fe f805 	bl	8002e0c <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e06:	f7fe f801 	bl	8002e0c <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e067      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e18:	4b35      	ldr	r3, [pc, #212]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1f0      	bne.n	8004e06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2c:	d108      	bne.n	8004e40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e2e:	4b30      	ldr	r3, [pc, #192]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	492d      	ldr	r1, [pc, #180]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e40:	4b2b      	ldr	r3, [pc, #172]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a19      	ldr	r1, [r3, #32]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	430b      	orrs	r3, r1
 8004e52:	4927      	ldr	r1, [pc, #156]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e58:	4b27      	ldr	r3, [pc, #156]	; (8004ef8 <HAL_RCC_OscConfig+0x4fc>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5e:	f7fd ffd5 	bl	8002e0c <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e66:	f7fd ffd1 	bl	8002e0c <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e037      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e78:	4b1d      	ldr	r3, [pc, #116]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCC_OscConfig+0x46a>
 8004e84:	e02f      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e86:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <HAL_RCC_OscConfig+0x4fc>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8c:	f7fd ffbe 	bl	8002e0c <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e94:	f7fd ffba 	bl	8002e0c <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e020      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ea6:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x498>
 8004eb2:	e018      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e013      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <HAL_RCC_OscConfig+0x4f4>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d106      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d001      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	40007000 	.word	0x40007000
 8004ef8:	42420060 	.word	0x42420060

08004efc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0d0      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f10:	4b6a      	ldr	r3, [pc, #424]	; (80050bc <HAL_RCC_ClockConfig+0x1c0>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d910      	bls.n	8004f40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1e:	4b67      	ldr	r3, [pc, #412]	; (80050bc <HAL_RCC_ClockConfig+0x1c0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f023 0207 	bic.w	r2, r3, #7
 8004f26:	4965      	ldr	r1, [pc, #404]	; (80050bc <HAL_RCC_ClockConfig+0x1c0>)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2e:	4b63      	ldr	r3, [pc, #396]	; (80050bc <HAL_RCC_ClockConfig+0x1c0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0b8      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d020      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f58:	4b59      	ldr	r3, [pc, #356]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	4a58      	ldr	r2, [pc, #352]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f70:	4b53      	ldr	r3, [pc, #332]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4a52      	ldr	r2, [pc, #328]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f7c:	4b50      	ldr	r3, [pc, #320]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	494d      	ldr	r1, [pc, #308]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d040      	beq.n	800501c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d107      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa2:	4b47      	ldr	r3, [pc, #284]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d115      	bne.n	8004fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e07f      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d107      	bne.n	8004fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fba:	4b41      	ldr	r3, [pc, #260]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e073      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fca:	4b3d      	ldr	r3, [pc, #244]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e06b      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fda:	4b39      	ldr	r3, [pc, #228]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f023 0203 	bic.w	r2, r3, #3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4936      	ldr	r1, [pc, #216]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fec:	f7fd ff0e 	bl	8002e0c <HAL_GetTick>
 8004ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff2:	e00a      	b.n	800500a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff4:	f7fd ff0a 	bl	8002e0c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005002:	4293      	cmp	r3, r2
 8005004:	d901      	bls.n	800500a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e053      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500a:	4b2d      	ldr	r3, [pc, #180]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f003 020c 	and.w	r2, r3, #12
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	429a      	cmp	r2, r3
 800501a:	d1eb      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800501c:	4b27      	ldr	r3, [pc, #156]	; (80050bc <HAL_RCC_ClockConfig+0x1c0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d210      	bcs.n	800504c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502a:	4b24      	ldr	r3, [pc, #144]	; (80050bc <HAL_RCC_ClockConfig+0x1c0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f023 0207 	bic.w	r2, r3, #7
 8005032:	4922      	ldr	r1, [pc, #136]	; (80050bc <HAL_RCC_ClockConfig+0x1c0>)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	4313      	orrs	r3, r2
 8005038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800503a:	4b20      	ldr	r3, [pc, #128]	; (80050bc <HAL_RCC_ClockConfig+0x1c0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d001      	beq.n	800504c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e032      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005058:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4916      	ldr	r1, [pc, #88]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005066:	4313      	orrs	r3, r2
 8005068:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005076:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	490e      	ldr	r1, [pc, #56]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005086:	4313      	orrs	r3, r2
 8005088:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800508a:	f000 f821 	bl	80050d0 <HAL_RCC_GetSysClockFreq>
 800508e:	4602      	mov	r2, r0
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	091b      	lsrs	r3, r3, #4
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	490a      	ldr	r1, [pc, #40]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 800509c:	5ccb      	ldrb	r3, [r1, r3]
 800509e:	fa22 f303 	lsr.w	r3, r2, r3
 80050a2:	4a09      	ldr	r2, [pc, #36]	; (80050c8 <HAL_RCC_ClockConfig+0x1cc>)
 80050a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050a6:	4b09      	ldr	r3, [pc, #36]	; (80050cc <HAL_RCC_ClockConfig+0x1d0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fd fe6c 	bl	8002d88 <HAL_InitTick>

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40022000 	.word	0x40022000
 80050c0:	40021000 	.word	0x40021000
 80050c4:	0800c76c 	.word	0x0800c76c
 80050c8:	20000030 	.word	0x20000030
 80050cc:	20000034 	.word	0x20000034

080050d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	2300      	movs	r3, #0
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	2300      	movs	r3, #0
 80050e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050ea:	4b1e      	ldr	r3, [pc, #120]	; (8005164 <HAL_RCC_GetSysClockFreq+0x94>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 030c 	and.w	r3, r3, #12
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d002      	beq.n	8005100 <HAL_RCC_GetSysClockFreq+0x30>
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d003      	beq.n	8005106 <HAL_RCC_GetSysClockFreq+0x36>
 80050fe:	e027      	b.n	8005150 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005100:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_RCC_GetSysClockFreq+0x98>)
 8005102:	613b      	str	r3, [r7, #16]
      break;
 8005104:	e027      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	0c9b      	lsrs	r3, r3, #18
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	4a17      	ldr	r2, [pc, #92]	; (800516c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005110:	5cd3      	ldrb	r3, [r2, r3]
 8005112:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d010      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800511e:	4b11      	ldr	r3, [pc, #68]	; (8005164 <HAL_RCC_GetSysClockFreq+0x94>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	0c5b      	lsrs	r3, r3, #17
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	4a11      	ldr	r2, [pc, #68]	; (8005170 <HAL_RCC_GetSysClockFreq+0xa0>)
 800512a:	5cd3      	ldrb	r3, [r2, r3]
 800512c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a0d      	ldr	r2, [pc, #52]	; (8005168 <HAL_RCC_GetSysClockFreq+0x98>)
 8005132:	fb02 f203 	mul.w	r2, r2, r3
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	e004      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a0c      	ldr	r2, [pc, #48]	; (8005174 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005144:	fb02 f303 	mul.w	r3, r2, r3
 8005148:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	613b      	str	r3, [r7, #16]
      break;
 800514e:	e002      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005150:	4b05      	ldr	r3, [pc, #20]	; (8005168 <HAL_RCC_GetSysClockFreq+0x98>)
 8005152:	613b      	str	r3, [r7, #16]
      break;
 8005154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005156:	693b      	ldr	r3, [r7, #16]
}
 8005158:	4618      	mov	r0, r3
 800515a:	371c      	adds	r7, #28
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40021000 	.word	0x40021000
 8005168:	007a1200 	.word	0x007a1200
 800516c:	0800c784 	.word	0x0800c784
 8005170:	0800c794 	.word	0x0800c794
 8005174:	003d0900 	.word	0x003d0900

08005178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800517c:	4b02      	ldr	r3, [pc, #8]	; (8005188 <HAL_RCC_GetHCLKFreq+0x10>)
 800517e:	681b      	ldr	r3, [r3, #0]
}
 8005180:	4618      	mov	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr
 8005188:	20000030 	.word	0x20000030

0800518c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005190:	f7ff fff2 	bl	8005178 <HAL_RCC_GetHCLKFreq>
 8005194:	4602      	mov	r2, r0
 8005196:	4b05      	ldr	r3, [pc, #20]	; (80051ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	0a1b      	lsrs	r3, r3, #8
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	4903      	ldr	r1, [pc, #12]	; (80051b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051a2:	5ccb      	ldrb	r3, [r1, r3]
 80051a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	40021000 	.word	0x40021000
 80051b0:	0800c77c 	.word	0x0800c77c

080051b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051b8:	f7ff ffde 	bl	8005178 <HAL_RCC_GetHCLKFreq>
 80051bc:	4602      	mov	r2, r0
 80051be:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	0adb      	lsrs	r3, r3, #11
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	4903      	ldr	r1, [pc, #12]	; (80051d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ca:	5ccb      	ldrb	r3, [r1, r3]
 80051cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	40021000 	.word	0x40021000
 80051d8:	0800c77c 	.word	0x0800c77c

080051dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051e4:	4b0a      	ldr	r3, [pc, #40]	; (8005210 <RCC_Delay+0x34>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a0a      	ldr	r2, [pc, #40]	; (8005214 <RCC_Delay+0x38>)
 80051ea:	fba2 2303 	umull	r2, r3, r2, r3
 80051ee:	0a5b      	lsrs	r3, r3, #9
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	fb02 f303 	mul.w	r3, r2, r3
 80051f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051f8:	bf00      	nop
  }
  while (Delay --);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	1e5a      	subs	r2, r3, #1
 80051fe:	60fa      	str	r2, [r7, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1f9      	bne.n	80051f8 <RCC_Delay+0x1c>
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr
 8005210:	20000030 	.word	0x20000030
 8005214:	10624dd3 	.word	0x10624dd3

08005218 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	613b      	str	r3, [r7, #16]
 8005224:	2300      	movs	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d07d      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005234:	2300      	movs	r3, #0
 8005236:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005238:	4b4f      	ldr	r3, [pc, #316]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10d      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005244:	4b4c      	ldr	r3, [pc, #304]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	4a4b      	ldr	r2, [pc, #300]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800524a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800524e:	61d3      	str	r3, [r2, #28]
 8005250:	4b49      	ldr	r3, [pc, #292]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005258:	60bb      	str	r3, [r7, #8]
 800525a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800525c:	2301      	movs	r3, #1
 800525e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005260:	4b46      	ldr	r3, [pc, #280]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005268:	2b00      	cmp	r3, #0
 800526a:	d118      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800526c:	4b43      	ldr	r3, [pc, #268]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a42      	ldr	r2, [pc, #264]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005276:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005278:	f7fd fdc8 	bl	8002e0c <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800527e:	e008      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005280:	f7fd fdc4 	bl	8002e0c <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b64      	cmp	r3, #100	; 0x64
 800528c:	d901      	bls.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e06d      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005292:	4b3a      	ldr	r3, [pc, #232]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0f0      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800529e:	4b36      	ldr	r3, [pc, #216]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d02e      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d027      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052bc:	4b2e      	ldr	r3, [pc, #184]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052c6:	4b2e      	ldr	r3, [pc, #184]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052c8:	2201      	movs	r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052cc:	4b2c      	ldr	r3, [pc, #176]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052d2:	4a29      	ldr	r2, [pc, #164]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d014      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e2:	f7fd fd93 	bl	8002e0c <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e8:	e00a      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ea:	f7fd fd8f 	bl	8002e0c <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d901      	bls.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e036      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005300:	4b1d      	ldr	r3, [pc, #116]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0ee      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800530c:	4b1a      	ldr	r3, [pc, #104]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	4917      	ldr	r1, [pc, #92]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800531a:	4313      	orrs	r3, r2
 800531c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800531e:	7dfb      	ldrb	r3, [r7, #23]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d105      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005324:	4b14      	ldr	r3, [pc, #80]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	4a13      	ldr	r2, [pc, #76]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800532a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800532e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800533c:	4b0e      	ldr	r3, [pc, #56]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	490b      	ldr	r1, [pc, #44]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800534a:	4313      	orrs	r3, r2
 800534c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0310 	and.w	r3, r3, #16
 8005356:	2b00      	cmp	r3, #0
 8005358:	d008      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800535a:	4b07      	ldr	r3, [pc, #28]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	4904      	ldr	r1, [pc, #16]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005368:	4313      	orrs	r3, r2
 800536a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	40021000 	.word	0x40021000
 800537c:	40007000 	.word	0x40007000
 8005380:	42420440 	.word	0x42420440

08005384 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	2300      	movs	r3, #0
 8005392:	61fb      	str	r3, [r7, #28]
 8005394:	2300      	movs	r3, #0
 8005396:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	2300      	movs	r3, #0
 800539e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b10      	cmp	r3, #16
 80053a4:	d00a      	beq.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b10      	cmp	r3, #16
 80053aa:	f200 808a 	bhi.w	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d045      	beq.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d075      	beq.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80053ba:	e082      	b.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80053bc:	4b46      	ldr	r3, [pc, #280]	; (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80053c2:	4b45      	ldr	r3, [pc, #276]	; (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d07b      	beq.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	0c9b      	lsrs	r3, r3, #18
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	4a41      	ldr	r2, [pc, #260]	; (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80053d8:	5cd3      	ldrb	r3, [r2, r3]
 80053da:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d015      	beq.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053e6:	4b3c      	ldr	r3, [pc, #240]	; (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	0c5b      	lsrs	r3, r3, #17
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	4a3b      	ldr	r2, [pc, #236]	; (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80053f2:	5cd3      	ldrb	r3, [r2, r3]
 80053f4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00d      	beq.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005400:	4a38      	ldr	r2, [pc, #224]	; (80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	fbb2 f2f3 	udiv	r2, r2, r3
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	fb02 f303 	mul.w	r3, r2, r3
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	e004      	b.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	4a34      	ldr	r2, [pc, #208]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005416:	fb02 f303 	mul.w	r3, r2, r3
 800541a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800541c:	4b2e      	ldr	r3, [pc, #184]	; (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005424:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005428:	d102      	bne.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	61bb      	str	r3, [r7, #24]
      break;
 800542e:	e04a      	b.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	4a2d      	ldr	r2, [pc, #180]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	085b      	lsrs	r3, r3, #1
 800543c:	61bb      	str	r3, [r7, #24]
      break;
 800543e:	e042      	b.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005440:	4b25      	ldr	r3, [pc, #148]	; (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800544c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005450:	d108      	bne.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800545c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	e01f      	b.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800546e:	d109      	bne.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005470:	4b19      	ldr	r3, [pc, #100]	; (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800547c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	e00f      	b.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800548e:	d11c      	bne.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005490:	4b11      	ldr	r3, [pc, #68]	; (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d016      	beq.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800549c:	f24f 4324 	movw	r3, #62500	; 0xf424
 80054a0:	61bb      	str	r3, [r7, #24]
      break;
 80054a2:	e012      	b.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80054a4:	e011      	b.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80054a6:	f7ff fe85 	bl	80051b4 <HAL_RCC_GetPCLK2Freq>
 80054aa:	4602      	mov	r2, r0
 80054ac:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	0b9b      	lsrs	r3, r3, #14
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	3301      	adds	r3, #1
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80054be:	61bb      	str	r3, [r7, #24]
      break;
 80054c0:	e004      	b.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80054c2:	bf00      	nop
 80054c4:	e002      	b.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80054c6:	bf00      	nop
 80054c8:	e000      	b.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80054ca:	bf00      	nop
    }
  }
  return (frequency);
 80054cc:	69bb      	ldr	r3, [r7, #24]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3720      	adds	r7, #32
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40021000 	.word	0x40021000
 80054dc:	0800c798 	.word	0x0800c798
 80054e0:	0800c7a8 	.word	0x0800c7a8
 80054e4:	007a1200 	.word	0x007a1200
 80054e8:	003d0900 	.word	0x003d0900
 80054ec:	aaaaaaab 	.word	0xaaaaaaab

080054f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e041      	b.n	8005586 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fd fb08 	bl	8002b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3304      	adds	r3, #4
 800552c:	4619      	mov	r1, r3
 800552e:	4610      	mov	r0, r2
 8005530:	f000 f8f4 	bl	800571c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d101      	bne.n	80055aa <HAL_TIM_ConfigClockSource+0x1c>
 80055a6:	2302      	movs	r3, #2
 80055a8:	e0b4      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x186>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2202      	movs	r2, #2
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055d0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e2:	d03e      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0xd4>
 80055e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e8:	f200 8087 	bhi.w	80056fa <HAL_TIM_ConfigClockSource+0x16c>
 80055ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f0:	f000 8086 	beq.w	8005700 <HAL_TIM_ConfigClockSource+0x172>
 80055f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f8:	d87f      	bhi.n	80056fa <HAL_TIM_ConfigClockSource+0x16c>
 80055fa:	2b70      	cmp	r3, #112	; 0x70
 80055fc:	d01a      	beq.n	8005634 <HAL_TIM_ConfigClockSource+0xa6>
 80055fe:	2b70      	cmp	r3, #112	; 0x70
 8005600:	d87b      	bhi.n	80056fa <HAL_TIM_ConfigClockSource+0x16c>
 8005602:	2b60      	cmp	r3, #96	; 0x60
 8005604:	d050      	beq.n	80056a8 <HAL_TIM_ConfigClockSource+0x11a>
 8005606:	2b60      	cmp	r3, #96	; 0x60
 8005608:	d877      	bhi.n	80056fa <HAL_TIM_ConfigClockSource+0x16c>
 800560a:	2b50      	cmp	r3, #80	; 0x50
 800560c:	d03c      	beq.n	8005688 <HAL_TIM_ConfigClockSource+0xfa>
 800560e:	2b50      	cmp	r3, #80	; 0x50
 8005610:	d873      	bhi.n	80056fa <HAL_TIM_ConfigClockSource+0x16c>
 8005612:	2b40      	cmp	r3, #64	; 0x40
 8005614:	d058      	beq.n	80056c8 <HAL_TIM_ConfigClockSource+0x13a>
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d86f      	bhi.n	80056fa <HAL_TIM_ConfigClockSource+0x16c>
 800561a:	2b30      	cmp	r3, #48	; 0x30
 800561c:	d064      	beq.n	80056e8 <HAL_TIM_ConfigClockSource+0x15a>
 800561e:	2b30      	cmp	r3, #48	; 0x30
 8005620:	d86b      	bhi.n	80056fa <HAL_TIM_ConfigClockSource+0x16c>
 8005622:	2b20      	cmp	r3, #32
 8005624:	d060      	beq.n	80056e8 <HAL_TIM_ConfigClockSource+0x15a>
 8005626:	2b20      	cmp	r3, #32
 8005628:	d867      	bhi.n	80056fa <HAL_TIM_ConfigClockSource+0x16c>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d05c      	beq.n	80056e8 <HAL_TIM_ConfigClockSource+0x15a>
 800562e:	2b10      	cmp	r3, #16
 8005630:	d05a      	beq.n	80056e8 <HAL_TIM_ConfigClockSource+0x15a>
 8005632:	e062      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	6899      	ldr	r1, [r3, #8]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f000 f94f 	bl	80058e6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005656:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	609a      	str	r2, [r3, #8]
      break;
 8005660:	e04f      	b.n	8005702 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	6899      	ldr	r1, [r3, #8]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f000 f938 	bl	80058e6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005684:	609a      	str	r2, [r3, #8]
      break;
 8005686:	e03c      	b.n	8005702 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6818      	ldr	r0, [r3, #0]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	6859      	ldr	r1, [r3, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	461a      	mov	r2, r3
 8005696:	f000 f8af 	bl	80057f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2150      	movs	r1, #80	; 0x50
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 f906 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 80056a6:	e02c      	b.n	8005702 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6818      	ldr	r0, [r3, #0]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	6859      	ldr	r1, [r3, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	461a      	mov	r2, r3
 80056b6:	f000 f8cd 	bl	8005854 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2160      	movs	r1, #96	; 0x60
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 f8f6 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 80056c6:	e01c      	b.n	8005702 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	6859      	ldr	r1, [r3, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	461a      	mov	r2, r3
 80056d6:	f000 f88f 	bl	80057f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2140      	movs	r1, #64	; 0x40
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 f8e6 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 80056e6:	e00c      	b.n	8005702 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4619      	mov	r1, r3
 80056f2:	4610      	mov	r0, r2
 80056f4:	f000 f8dd 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 80056f8:	e003      	b.n	8005702 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	73fb      	strb	r3, [r7, #15]
      break;
 80056fe:	e000      	b.n	8005702 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005700:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005712:	7bfb      	ldrb	r3, [r7, #15]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a2f      	ldr	r2, [pc, #188]	; (80057ec <TIM_Base_SetConfig+0xd0>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00b      	beq.n	800574c <TIM_Base_SetConfig+0x30>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573a:	d007      	beq.n	800574c <TIM_Base_SetConfig+0x30>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a2c      	ldr	r2, [pc, #176]	; (80057f0 <TIM_Base_SetConfig+0xd4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <TIM_Base_SetConfig+0x30>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a2b      	ldr	r2, [pc, #172]	; (80057f4 <TIM_Base_SetConfig+0xd8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d108      	bne.n	800575e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a22      	ldr	r2, [pc, #136]	; (80057ec <TIM_Base_SetConfig+0xd0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d00b      	beq.n	800577e <TIM_Base_SetConfig+0x62>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576c:	d007      	beq.n	800577e <TIM_Base_SetConfig+0x62>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a1f      	ldr	r2, [pc, #124]	; (80057f0 <TIM_Base_SetConfig+0xd4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d003      	beq.n	800577e <TIM_Base_SetConfig+0x62>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a1e      	ldr	r2, [pc, #120]	; (80057f4 <TIM_Base_SetConfig+0xd8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d108      	bne.n	8005790 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	4313      	orrs	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a0d      	ldr	r2, [pc, #52]	; (80057ec <TIM_Base_SetConfig+0xd0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d103      	bne.n	80057c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d005      	beq.n	80057e2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f023 0201 	bic.w	r2, r3, #1
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	611a      	str	r2, [r3, #16]
  }
}
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr
 80057ec:	40012c00 	.word	0x40012c00
 80057f0:	40000400 	.word	0x40000400
 80057f4:	40000800 	.word	0x40000800

080057f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f023 0201 	bic.w	r2, r3, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f023 030a 	bic.w	r3, r3, #10
 8005834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	621a      	str	r2, [r3, #32]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f023 0210 	bic.w	r2, r3, #16
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800587e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	031b      	lsls	r3, r3, #12
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	4313      	orrs	r3, r2
 8005888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005890:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	621a      	str	r2, [r3, #32]
}
 80058a8:	bf00      	nop
 80058aa:	371c      	adds	r7, #28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bc80      	pop	{r7}
 80058b0:	4770      	bx	lr

080058b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b085      	sub	sp, #20
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f043 0307 	orr.w	r3, r3, #7
 80058d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	609a      	str	r2, [r3, #8]
}
 80058dc:	bf00      	nop
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bc80      	pop	{r7}
 80058e4:	4770      	bx	lr

080058e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b087      	sub	sp, #28
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	607a      	str	r2, [r7, #4]
 80058f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005900:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	021a      	lsls	r2, r3, #8
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	431a      	orrs	r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4313      	orrs	r3, r2
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	4313      	orrs	r3, r2
 8005912:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	609a      	str	r2, [r3, #8]
}
 800591a:	bf00      	nop
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	bc80      	pop	{r7}
 8005922:	4770      	bx	lr

08005924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005934:	2b01      	cmp	r3, #1
 8005936:	d101      	bne.n	800593c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005938:	2302      	movs	r3, #2
 800593a:	e046      	b.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a16      	ldr	r2, [pc, #88]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00e      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005988:	d009      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a12      	ldr	r2, [pc, #72]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d004      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a10      	ldr	r2, [pc, #64]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d10c      	bne.n	80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr
 80059d4:	40012c00 	.word	0x40012c00
 80059d8:	40000400 	.word	0x40000400
 80059dc:	40000800 	.word	0x40000800

080059e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e042      	b.n	8005a78 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fd f8d8 	bl	8002bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2224      	movs	r2, #36	; 0x24
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fded 	bl	8006604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695a      	ldr	r2, [r3, #20]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08a      	sub	sp, #40	; 0x28
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	d175      	bne.n	8005b8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <HAL_UART_Transmit+0x2c>
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e06e      	b.n	8005b8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2221      	movs	r2, #33	; 0x21
 8005aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005abe:	f7fd f9a5 	bl	8002e0c <HAL_GetTick>
 8005ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	88fa      	ldrh	r2, [r7, #6]
 8005ac8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	88fa      	ldrh	r2, [r7, #6]
 8005ace:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad8:	d108      	bne.n	8005aec <HAL_UART_Transmit+0x6c>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d104      	bne.n	8005aec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	61bb      	str	r3, [r7, #24]
 8005aea:	e003      	b.n	8005af4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005af4:	e02e      	b.n	8005b54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2200      	movs	r2, #0
 8005afe:	2180      	movs	r1, #128	; 0x80
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 fb52 	bl	80061aa <UART_WaitOnFlagUntilTimeout>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d005      	beq.n	8005b18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e03a      	b.n	8005b8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10b      	bne.n	8005b36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	3302      	adds	r3, #2
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	e007      	b.n	8005b46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	781a      	ldrb	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	3301      	adds	r3, #1
 8005b44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1cb      	bne.n	8005af6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2200      	movs	r2, #0
 8005b66:	2140      	movs	r1, #64	; 0x40
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 fb1e 	bl	80061aa <UART_WaitOnFlagUntilTimeout>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d005      	beq.n	8005b80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e006      	b.n	8005b8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	e000      	b.n	8005b8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b8c:	2302      	movs	r3, #2
  }
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3720      	adds	r7, #32
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b08c      	sub	sp, #48	; 0x30
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	d14a      	bne.n	8005c46 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e043      	b.n	8005c48 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005bcc:	88fb      	ldrh	r3, [r7, #6]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 fb42 	bl	800625c <UART_Start_Receive_IT>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005bde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d12c      	bne.n	8005c40 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d125      	bne.n	8005c3a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bee:	2300      	movs	r3, #0
 8005bf0:	613b      	str	r3, [r7, #16]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	613b      	str	r3, [r7, #16]
 8005c02:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	330c      	adds	r3, #12
 8005c0a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	e853 3f00 	ldrex	r3, [r3]
 8005c12:	617b      	str	r3, [r7, #20]
   return(result);
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f043 0310 	orr.w	r3, r3, #16
 8005c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	330c      	adds	r3, #12
 8005c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c24:	627a      	str	r2, [r7, #36]	; 0x24
 8005c26:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c28:	6a39      	ldr	r1, [r7, #32]
 8005c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2c:	e841 2300 	strex	r3, r2, [r1]
 8005c30:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e5      	bne.n	8005c04 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8005c38:	e002      	b.n	8005c40 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005c40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c44:	e000      	b.n	8005c48 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005c46:	2302      	movs	r3, #2
  }
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3730      	adds	r7, #48	; 0x30
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b0ba      	sub	sp, #232	; 0xe8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c86:	f003 030f 	and.w	r3, r3, #15
 8005c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005c8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10f      	bne.n	8005cb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c9a:	f003 0320 	and.w	r3, r3, #32
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d009      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x66>
 8005ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ca6:	f003 0320 	and.w	r3, r3, #32
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fbea 	bl	8006488 <UART_Receive_IT>
      return;
 8005cb4:	e25b      	b.n	800616e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 80de 	beq.w	8005e7c <HAL_UART_IRQHandler+0x22c>
 8005cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d106      	bne.n	8005cda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 80d1 	beq.w	8005e7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00b      	beq.n	8005cfe <HAL_UART_IRQHandler+0xae>
 8005ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d005      	beq.n	8005cfe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf6:	f043 0201 	orr.w	r2, r3, #1
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00b      	beq.n	8005d22 <HAL_UART_IRQHandler+0xd2>
 8005d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d005      	beq.n	8005d22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1a:	f043 0202 	orr.w	r2, r3, #2
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00b      	beq.n	8005d46 <HAL_UART_IRQHandler+0xf6>
 8005d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d005      	beq.n	8005d46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3e:	f043 0204 	orr.w	r2, r3, #4
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d011      	beq.n	8005d76 <HAL_UART_IRQHandler+0x126>
 8005d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d105      	bne.n	8005d6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d005      	beq.n	8005d76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6e:	f043 0208 	orr.w	r2, r3, #8
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 81f2 	beq.w	8006164 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d84:	f003 0320 	and.w	r3, r3, #32
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d008      	beq.n	8005d9e <HAL_UART_IRQHandler+0x14e>
 8005d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fb75 	bl	8006488 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	bf14      	ite	ne
 8005dac:	2301      	movne	r3, #1
 8005dae:	2300      	moveq	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d103      	bne.n	8005dca <HAL_UART_IRQHandler+0x17a>
 8005dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d04f      	beq.n	8005e6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fa7f 	bl	80062ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d041      	beq.n	8005e62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3314      	adds	r3, #20
 8005de4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005df4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3314      	adds	r3, #20
 8005e06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1d9      	bne.n	8005dde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d013      	beq.n	8005e5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e36:	4a7e      	ldr	r2, [pc, #504]	; (8006030 <HAL_UART_IRQHandler+0x3e0>)
 8005e38:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fd fe0e 	bl	8003a60 <HAL_DMA_Abort_IT>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d016      	beq.n	8005e78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e54:	4610      	mov	r0, r2
 8005e56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e58:	e00e      	b.n	8005e78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f99c 	bl	8006198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e60:	e00a      	b.n	8005e78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f998 	bl	8006198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e68:	e006      	b.n	8005e78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f994 	bl	8006198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005e76:	e175      	b.n	8006164 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e78:	bf00      	nop
    return;
 8005e7a:	e173      	b.n	8006164 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	f040 814f 	bne.w	8006124 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e8a:	f003 0310 	and.w	r3, r3, #16
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f000 8148 	beq.w	8006124 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e98:	f003 0310 	and.w	r3, r3, #16
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 8141 	beq.w	8006124 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60bb      	str	r3, [r7, #8]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	60bb      	str	r3, [r7, #8]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	60bb      	str	r3, [r7, #8]
 8005eb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 80b6 	beq.w	8006034 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ed4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 8145 	beq.w	8006168 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ee2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	f080 813e 	bcs.w	8006168 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ef2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	2b20      	cmp	r3, #32
 8005efc:	f000 8088 	beq.w	8006010 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	330c      	adds	r3, #12
 8005f06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	330c      	adds	r3, #12
 8005f28:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f2c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f3c:	e841 2300 	strex	r3, r2, [r1]
 8005f40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1d9      	bne.n	8005f00 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3314      	adds	r3, #20
 8005f52:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f5e:	f023 0301 	bic.w	r3, r3, #1
 8005f62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3314      	adds	r3, #20
 8005f6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f70:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f74:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f78:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f7c:	e841 2300 	strex	r3, r2, [r1]
 8005f80:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e1      	bne.n	8005f4c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3314      	adds	r3, #20
 8005f8e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3314      	adds	r3, #20
 8005fa8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005fac:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005fae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fb4:	e841 2300 	strex	r3, r2, [r1]
 8005fb8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005fba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1e3      	bne.n	8005f88 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	330c      	adds	r3, #12
 8005fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe0:	f023 0310 	bic.w	r3, r3, #16
 8005fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ff2:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ff4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ff8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e3      	bne.n	8005fce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600a:	4618      	mov	r0, r3
 800600c:	f7fd fcec 	bl	80039e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800601e:	b29b      	uxth	r3, r3
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	b29b      	uxth	r3, r3
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7fb fb5e 	bl	80016e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800602c:	e09c      	b.n	8006168 <HAL_UART_IRQHandler+0x518>
 800602e:	bf00      	nop
 8006030:	08006393 	.word	0x08006393
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800603c:	b29b      	uxth	r3, r3
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006048:	b29b      	uxth	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 808e 	beq.w	800616c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 8089 	beq.w	800616c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	330c      	adds	r3, #12
 8006060:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800606a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006070:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800607e:	647a      	str	r2, [r7, #68]	; 0x44
 8006080:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006082:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006084:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800608c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1e3      	bne.n	800605a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3314      	adds	r3, #20
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	623b      	str	r3, [r7, #32]
   return(result);
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	f023 0301 	bic.w	r3, r3, #1
 80060a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3314      	adds	r3, #20
 80060b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060b6:	633a      	str	r2, [r7, #48]	; 0x30
 80060b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e3      	bne.n	8006092 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	330c      	adds	r3, #12
 80060de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	e853 3f00 	ldrex	r3, [r3]
 80060e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0310 	bic.w	r3, r3, #16
 80060ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	330c      	adds	r3, #12
 80060f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80060fc:	61fa      	str	r2, [r7, #28]
 80060fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	69b9      	ldr	r1, [r7, #24]
 8006102:	69fa      	ldr	r2, [r7, #28]
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	617b      	str	r3, [r7, #20]
   return(result);
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e3      	bne.n	80060d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006116:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800611a:	4619      	mov	r1, r3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7fb fae3 	bl	80016e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006122:	e023      	b.n	800616c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612c:	2b00      	cmp	r3, #0
 800612e:	d009      	beq.n	8006144 <HAL_UART_IRQHandler+0x4f4>
 8006130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f93c 	bl	80063ba <UART_Transmit_IT>
    return;
 8006142:	e014      	b.n	800616e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00e      	beq.n	800616e <HAL_UART_IRQHandler+0x51e>
 8006150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	d008      	beq.n	800616e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f97b 	bl	8006458 <UART_EndTransmit_IT>
    return;
 8006162:	e004      	b.n	800616e <HAL_UART_IRQHandler+0x51e>
    return;
 8006164:	bf00      	nop
 8006166:	e002      	b.n	800616e <HAL_UART_IRQHandler+0x51e>
      return;
 8006168:	bf00      	nop
 800616a:	e000      	b.n	800616e <HAL_UART_IRQHandler+0x51e>
      return;
 800616c:	bf00      	nop
  }
}
 800616e:	37e8      	adds	r7, #232	; 0xe8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	bc80      	pop	{r7}
 8006184:	4770      	bx	lr

08006186 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800618e:	bf00      	nop
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	bc80      	pop	{r7}
 8006196:	4770      	bx	lr

08006198 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr

080061aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b086      	sub	sp, #24
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	603b      	str	r3, [r7, #0]
 80061b6:	4613      	mov	r3, r2
 80061b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ba:	e03b      	b.n	8006234 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c2:	d037      	beq.n	8006234 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c4:	f7fc fe22 	bl	8002e0c <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	6a3a      	ldr	r2, [r7, #32]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d302      	bcc.n	80061da <UART_WaitOnFlagUntilTimeout+0x30>
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e03a      	b.n	8006254 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d023      	beq.n	8006234 <UART_WaitOnFlagUntilTimeout+0x8a>
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2b80      	cmp	r3, #128	; 0x80
 80061f0:	d020      	beq.n	8006234 <UART_WaitOnFlagUntilTimeout+0x8a>
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	2b40      	cmp	r3, #64	; 0x40
 80061f6:	d01d      	beq.n	8006234 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0308 	and.w	r3, r3, #8
 8006202:	2b08      	cmp	r3, #8
 8006204:	d116      	bne.n	8006234 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006206:	2300      	movs	r3, #0
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f856 	bl	80062ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2208      	movs	r2, #8
 8006226:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e00f      	b.n	8006254 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	4013      	ands	r3, r2
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	429a      	cmp	r2, r3
 8006242:	bf0c      	ite	eq
 8006244:	2301      	moveq	r3, #1
 8006246:	2300      	movne	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	461a      	mov	r2, r3
 800624c:	79fb      	ldrb	r3, [r7, #7]
 800624e:	429a      	cmp	r2, r3
 8006250:	d0b4      	beq.n	80061bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	4613      	mov	r3, r2
 8006268:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	88fa      	ldrh	r2, [r7, #6]
 8006274:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	88fa      	ldrh	r2, [r7, #6]
 800627a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2222      	movs	r2, #34	; 0x22
 8006286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	695a      	ldr	r2, [r3, #20]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f042 0201 	orr.w	r2, r2, #1
 80062b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f042 0220 	orr.w	r2, r2, #32
 80062c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bc80      	pop	{r7}
 80062cc:	4770      	bx	lr

080062ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b095      	sub	sp, #84	; 0x54
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	330c      	adds	r3, #12
 80062dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	330c      	adds	r3, #12
 80062f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062f6:	643a      	str	r2, [r7, #64]	; 0x40
 80062f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e5      	bne.n	80062d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3314      	adds	r3, #20
 8006310:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	61fb      	str	r3, [r7, #28]
   return(result);
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	f023 0301 	bic.w	r3, r3, #1
 8006320:	64bb      	str	r3, [r7, #72]	; 0x48
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3314      	adds	r3, #20
 8006328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800632a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800632c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e5      	bne.n	800630a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006342:	2b01      	cmp	r3, #1
 8006344:	d119      	bne.n	800637a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	330c      	adds	r3, #12
 800634c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	60bb      	str	r3, [r7, #8]
   return(result);
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f023 0310 	bic.w	r3, r3, #16
 800635c:	647b      	str	r3, [r7, #68]	; 0x44
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	330c      	adds	r3, #12
 8006364:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006366:	61ba      	str	r2, [r7, #24]
 8006368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	6979      	ldr	r1, [r7, #20]
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	e841 2300 	strex	r3, r2, [r1]
 8006372:	613b      	str	r3, [r7, #16]
   return(result);
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1e5      	bne.n	8006346 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2220      	movs	r2, #32
 800637e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006388:	bf00      	nop
 800638a:	3754      	adds	r7, #84	; 0x54
 800638c:	46bd      	mov	sp, r7
 800638e:	bc80      	pop	{r7}
 8006390:	4770      	bx	lr

08006392 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f7ff fef3 	bl	8006198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063b2:	bf00      	nop
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b085      	sub	sp, #20
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b21      	cmp	r3, #33	; 0x21
 80063cc:	d13e      	bne.n	800644c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d6:	d114      	bne.n	8006402 <UART_Transmit_IT+0x48>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d110      	bne.n	8006402 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	1c9a      	adds	r2, r3, #2
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	621a      	str	r2, [r3, #32]
 8006400:	e008      	b.n	8006414 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	1c59      	adds	r1, r3, #1
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6211      	str	r1, [r2, #32]
 800640c:	781a      	ldrb	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006418:	b29b      	uxth	r3, r3
 800641a:	3b01      	subs	r3, #1
 800641c:	b29b      	uxth	r3, r3
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	4619      	mov	r1, r3
 8006422:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10f      	bne.n	8006448 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006436:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006446:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006448:	2300      	movs	r3, #0
 800644a:	e000      	b.n	800644e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800644c:	2302      	movs	r3, #2
  }
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	bc80      	pop	{r7}
 8006456:	4770      	bx	lr

08006458 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800646e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2220      	movs	r2, #32
 8006474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff fe7b 	bl	8006174 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08c      	sub	sp, #48	; 0x30
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b22      	cmp	r3, #34	; 0x22
 800649a:	f040 80ae 	bne.w	80065fa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a6:	d117      	bne.n	80064d8 <UART_Receive_IT+0x50>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d113      	bne.n	80064d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064b0:	2300      	movs	r3, #0
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d0:	1c9a      	adds	r2, r3, #2
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	629a      	str	r2, [r3, #40]	; 0x28
 80064d6:	e026      	b.n	8006526 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ea:	d007      	beq.n	80064fc <UART_Receive_IT+0x74>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <UART_Receive_IT+0x82>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d106      	bne.n	800650a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	b2da      	uxtb	r2, r3
 8006504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	e008      	b.n	800651c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	b2db      	uxtb	r3, r3
 8006512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006516:	b2da      	uxtb	r2, r3
 8006518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800652a:	b29b      	uxth	r3, r3
 800652c:	3b01      	subs	r3, #1
 800652e:	b29b      	uxth	r3, r3
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	4619      	mov	r1, r3
 8006534:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006536:	2b00      	cmp	r3, #0
 8006538:	d15d      	bne.n	80065f6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 0220 	bic.w	r2, r2, #32
 8006548:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006558:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695a      	ldr	r2, [r3, #20]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 0201 	bic.w	r2, r2, #1
 8006568:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2220      	movs	r2, #32
 800656e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657c:	2b01      	cmp	r3, #1
 800657e:	d135      	bne.n	80065ec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	330c      	adds	r3, #12
 800658c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	e853 3f00 	ldrex	r3, [r3]
 8006594:	613b      	str	r3, [r7, #16]
   return(result);
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f023 0310 	bic.w	r3, r3, #16
 800659c:	627b      	str	r3, [r7, #36]	; 0x24
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	330c      	adds	r3, #12
 80065a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a6:	623a      	str	r2, [r7, #32]
 80065a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065aa:	69f9      	ldr	r1, [r7, #28]
 80065ac:	6a3a      	ldr	r2, [r7, #32]
 80065ae:	e841 2300 	strex	r3, r2, [r1]
 80065b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1e5      	bne.n	8006586 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0310 	and.w	r3, r3, #16
 80065c4:	2b10      	cmp	r3, #16
 80065c6:	d10a      	bne.n	80065de <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7fb f87f 	bl	80016e8 <HAL_UARTEx_RxEventCallback>
 80065ea:	e002      	b.n	80065f2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff fdca 	bl	8006186 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	e002      	b.n	80065fc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	e000      	b.n	80065fc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80065fa:	2302      	movs	r3, #2
  }
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3730      	adds	r7, #48	; 0x30
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689a      	ldr	r2, [r3, #8]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	431a      	orrs	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	4313      	orrs	r3, r2
 8006632:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800663e:	f023 030c 	bic.w	r3, r3, #12
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6812      	ldr	r2, [r2, #0]
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	430b      	orrs	r3, r1
 800664a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a2c      	ldr	r2, [pc, #176]	; (8006718 <UART_SetConfig+0x114>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d103      	bne.n	8006674 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800666c:	f7fe fda2 	bl	80051b4 <HAL_RCC_GetPCLK2Freq>
 8006670:	60f8      	str	r0, [r7, #12]
 8006672:	e002      	b.n	800667a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006674:	f7fe fd8a 	bl	800518c <HAL_RCC_GetPCLK1Freq>
 8006678:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4613      	mov	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	009a      	lsls	r2, r3, #2
 8006684:	441a      	add	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006690:	4a22      	ldr	r2, [pc, #136]	; (800671c <UART_SetConfig+0x118>)
 8006692:	fba2 2303 	umull	r2, r3, r2, r3
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	0119      	lsls	r1, r3, #4
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4613      	mov	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	009a      	lsls	r2, r3, #2
 80066a4:	441a      	add	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80066b0:	4b1a      	ldr	r3, [pc, #104]	; (800671c <UART_SetConfig+0x118>)
 80066b2:	fba3 0302 	umull	r0, r3, r3, r2
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	2064      	movs	r0, #100	; 0x64
 80066ba:	fb00 f303 	mul.w	r3, r0, r3
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	3332      	adds	r3, #50	; 0x32
 80066c4:	4a15      	ldr	r2, [pc, #84]	; (800671c <UART_SetConfig+0x118>)
 80066c6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ca:	095b      	lsrs	r3, r3, #5
 80066cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066d0:	4419      	add	r1, r3
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	4613      	mov	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	009a      	lsls	r2, r3, #2
 80066dc:	441a      	add	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80066e8:	4b0c      	ldr	r3, [pc, #48]	; (800671c <UART_SetConfig+0x118>)
 80066ea:	fba3 0302 	umull	r0, r3, r3, r2
 80066ee:	095b      	lsrs	r3, r3, #5
 80066f0:	2064      	movs	r0, #100	; 0x64
 80066f2:	fb00 f303 	mul.w	r3, r0, r3
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	011b      	lsls	r3, r3, #4
 80066fa:	3332      	adds	r3, #50	; 0x32
 80066fc:	4a07      	ldr	r2, [pc, #28]	; (800671c <UART_SetConfig+0x118>)
 80066fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006702:	095b      	lsrs	r3, r3, #5
 8006704:	f003 020f 	and.w	r2, r3, #15
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	440a      	add	r2, r1
 800670e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006710:	bf00      	nop
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	40013800 	.word	0x40013800
 800671c:	51eb851f 	.word	0x51eb851f

08006720 <atof>:
 8006720:	2100      	movs	r1, #0
 8006722:	f001 baf9 	b.w	8007d18 <strtod>
	...

08006728 <__errno>:
 8006728:	4b01      	ldr	r3, [pc, #4]	; (8006730 <__errno+0x8>)
 800672a:	6818      	ldr	r0, [r3, #0]
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	2000003c 	.word	0x2000003c

08006734 <__libc_init_array>:
 8006734:	b570      	push	{r4, r5, r6, lr}
 8006736:	2600      	movs	r6, #0
 8006738:	4d0c      	ldr	r5, [pc, #48]	; (800676c <__libc_init_array+0x38>)
 800673a:	4c0d      	ldr	r4, [pc, #52]	; (8006770 <__libc_init_array+0x3c>)
 800673c:	1b64      	subs	r4, r4, r5
 800673e:	10a4      	asrs	r4, r4, #2
 8006740:	42a6      	cmp	r6, r4
 8006742:	d109      	bne.n	8006758 <__libc_init_array+0x24>
 8006744:	f004 fa0e 	bl	800ab64 <_init>
 8006748:	2600      	movs	r6, #0
 800674a:	4d0a      	ldr	r5, [pc, #40]	; (8006774 <__libc_init_array+0x40>)
 800674c:	4c0a      	ldr	r4, [pc, #40]	; (8006778 <__libc_init_array+0x44>)
 800674e:	1b64      	subs	r4, r4, r5
 8006750:	10a4      	asrs	r4, r4, #2
 8006752:	42a6      	cmp	r6, r4
 8006754:	d105      	bne.n	8006762 <__libc_init_array+0x2e>
 8006756:	bd70      	pop	{r4, r5, r6, pc}
 8006758:	f855 3b04 	ldr.w	r3, [r5], #4
 800675c:	4798      	blx	r3
 800675e:	3601      	adds	r6, #1
 8006760:	e7ee      	b.n	8006740 <__libc_init_array+0xc>
 8006762:	f855 3b04 	ldr.w	r3, [r5], #4
 8006766:	4798      	blx	r3
 8006768:	3601      	adds	r6, #1
 800676a:	e7f2      	b.n	8006752 <__libc_init_array+0x1e>
 800676c:	0800ccb8 	.word	0x0800ccb8
 8006770:	0800ccb8 	.word	0x0800ccb8
 8006774:	0800ccb8 	.word	0x0800ccb8
 8006778:	0800ccbc 	.word	0x0800ccbc

0800677c <memcmp>:
 800677c:	b530      	push	{r4, r5, lr}
 800677e:	2400      	movs	r4, #0
 8006780:	3901      	subs	r1, #1
 8006782:	42a2      	cmp	r2, r4
 8006784:	d101      	bne.n	800678a <memcmp+0xe>
 8006786:	2000      	movs	r0, #0
 8006788:	e005      	b.n	8006796 <memcmp+0x1a>
 800678a:	5d03      	ldrb	r3, [r0, r4]
 800678c:	3401      	adds	r4, #1
 800678e:	5d0d      	ldrb	r5, [r1, r4]
 8006790:	42ab      	cmp	r3, r5
 8006792:	d0f6      	beq.n	8006782 <memcmp+0x6>
 8006794:	1b58      	subs	r0, r3, r5
 8006796:	bd30      	pop	{r4, r5, pc}

08006798 <memcpy>:
 8006798:	440a      	add	r2, r1
 800679a:	4291      	cmp	r1, r2
 800679c:	f100 33ff 	add.w	r3, r0, #4294967295
 80067a0:	d100      	bne.n	80067a4 <memcpy+0xc>
 80067a2:	4770      	bx	lr
 80067a4:	b510      	push	{r4, lr}
 80067a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067aa:	4291      	cmp	r1, r2
 80067ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067b0:	d1f9      	bne.n	80067a6 <memcpy+0xe>
 80067b2:	bd10      	pop	{r4, pc}

080067b4 <memset>:
 80067b4:	4603      	mov	r3, r0
 80067b6:	4402      	add	r2, r0
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d100      	bne.n	80067be <memset+0xa>
 80067bc:	4770      	bx	lr
 80067be:	f803 1b01 	strb.w	r1, [r3], #1
 80067c2:	e7f9      	b.n	80067b8 <memset+0x4>

080067c4 <__cvt>:
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067ca:	461f      	mov	r7, r3
 80067cc:	bfbb      	ittet	lt
 80067ce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80067d2:	461f      	movlt	r7, r3
 80067d4:	2300      	movge	r3, #0
 80067d6:	232d      	movlt	r3, #45	; 0x2d
 80067d8:	b088      	sub	sp, #32
 80067da:	4614      	mov	r4, r2
 80067dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80067e0:	7013      	strb	r3, [r2, #0]
 80067e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80067e8:	f023 0820 	bic.w	r8, r3, #32
 80067ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067f0:	d005      	beq.n	80067fe <__cvt+0x3a>
 80067f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80067f6:	d100      	bne.n	80067fa <__cvt+0x36>
 80067f8:	3501      	adds	r5, #1
 80067fa:	2302      	movs	r3, #2
 80067fc:	e000      	b.n	8006800 <__cvt+0x3c>
 80067fe:	2303      	movs	r3, #3
 8006800:	aa07      	add	r2, sp, #28
 8006802:	9204      	str	r2, [sp, #16]
 8006804:	aa06      	add	r2, sp, #24
 8006806:	e9cd a202 	strd	sl, r2, [sp, #8]
 800680a:	e9cd 3500 	strd	r3, r5, [sp]
 800680e:	4622      	mov	r2, r4
 8006810:	463b      	mov	r3, r7
 8006812:	f001 fb95 	bl	8007f40 <_dtoa_r>
 8006816:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800681a:	4606      	mov	r6, r0
 800681c:	d102      	bne.n	8006824 <__cvt+0x60>
 800681e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006820:	07db      	lsls	r3, r3, #31
 8006822:	d522      	bpl.n	800686a <__cvt+0xa6>
 8006824:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006828:	eb06 0905 	add.w	r9, r6, r5
 800682c:	d110      	bne.n	8006850 <__cvt+0x8c>
 800682e:	7833      	ldrb	r3, [r6, #0]
 8006830:	2b30      	cmp	r3, #48	; 0x30
 8006832:	d10a      	bne.n	800684a <__cvt+0x86>
 8006834:	2200      	movs	r2, #0
 8006836:	2300      	movs	r3, #0
 8006838:	4620      	mov	r0, r4
 800683a:	4639      	mov	r1, r7
 800683c:	f7fa f8be 	bl	80009bc <__aeabi_dcmpeq>
 8006840:	b918      	cbnz	r0, 800684a <__cvt+0x86>
 8006842:	f1c5 0501 	rsb	r5, r5, #1
 8006846:	f8ca 5000 	str.w	r5, [sl]
 800684a:	f8da 3000 	ldr.w	r3, [sl]
 800684e:	4499      	add	r9, r3
 8006850:	2200      	movs	r2, #0
 8006852:	2300      	movs	r3, #0
 8006854:	4620      	mov	r0, r4
 8006856:	4639      	mov	r1, r7
 8006858:	f7fa f8b0 	bl	80009bc <__aeabi_dcmpeq>
 800685c:	b108      	cbz	r0, 8006862 <__cvt+0x9e>
 800685e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006862:	2230      	movs	r2, #48	; 0x30
 8006864:	9b07      	ldr	r3, [sp, #28]
 8006866:	454b      	cmp	r3, r9
 8006868:	d307      	bcc.n	800687a <__cvt+0xb6>
 800686a:	4630      	mov	r0, r6
 800686c:	9b07      	ldr	r3, [sp, #28]
 800686e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006870:	1b9b      	subs	r3, r3, r6
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	b008      	add	sp, #32
 8006876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800687a:	1c59      	adds	r1, r3, #1
 800687c:	9107      	str	r1, [sp, #28]
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	e7f0      	b.n	8006864 <__cvt+0xa0>

08006882 <__exponent>:
 8006882:	4603      	mov	r3, r0
 8006884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006886:	2900      	cmp	r1, #0
 8006888:	f803 2b02 	strb.w	r2, [r3], #2
 800688c:	bfb6      	itet	lt
 800688e:	222d      	movlt	r2, #45	; 0x2d
 8006890:	222b      	movge	r2, #43	; 0x2b
 8006892:	4249      	neglt	r1, r1
 8006894:	2909      	cmp	r1, #9
 8006896:	7042      	strb	r2, [r0, #1]
 8006898:	dd2b      	ble.n	80068f2 <__exponent+0x70>
 800689a:	f10d 0407 	add.w	r4, sp, #7
 800689e:	46a4      	mov	ip, r4
 80068a0:	270a      	movs	r7, #10
 80068a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80068a6:	460a      	mov	r2, r1
 80068a8:	46a6      	mov	lr, r4
 80068aa:	fb07 1516 	mls	r5, r7, r6, r1
 80068ae:	2a63      	cmp	r2, #99	; 0x63
 80068b0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80068b4:	4631      	mov	r1, r6
 80068b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80068ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80068be:	dcf0      	bgt.n	80068a2 <__exponent+0x20>
 80068c0:	3130      	adds	r1, #48	; 0x30
 80068c2:	f1ae 0502 	sub.w	r5, lr, #2
 80068c6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80068ca:	4629      	mov	r1, r5
 80068cc:	1c44      	adds	r4, r0, #1
 80068ce:	4561      	cmp	r1, ip
 80068d0:	d30a      	bcc.n	80068e8 <__exponent+0x66>
 80068d2:	f10d 0209 	add.w	r2, sp, #9
 80068d6:	eba2 020e 	sub.w	r2, r2, lr
 80068da:	4565      	cmp	r5, ip
 80068dc:	bf88      	it	hi
 80068de:	2200      	movhi	r2, #0
 80068e0:	4413      	add	r3, r2
 80068e2:	1a18      	subs	r0, r3, r0
 80068e4:	b003      	add	sp, #12
 80068e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068ec:	f804 2f01 	strb.w	r2, [r4, #1]!
 80068f0:	e7ed      	b.n	80068ce <__exponent+0x4c>
 80068f2:	2330      	movs	r3, #48	; 0x30
 80068f4:	3130      	adds	r1, #48	; 0x30
 80068f6:	7083      	strb	r3, [r0, #2]
 80068f8:	70c1      	strb	r1, [r0, #3]
 80068fa:	1d03      	adds	r3, r0, #4
 80068fc:	e7f1      	b.n	80068e2 <__exponent+0x60>
	...

08006900 <_printf_float>:
 8006900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006904:	b091      	sub	sp, #68	; 0x44
 8006906:	460c      	mov	r4, r1
 8006908:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800690c:	4616      	mov	r6, r2
 800690e:	461f      	mov	r7, r3
 8006910:	4605      	mov	r5, r0
 8006912:	f002 fc7b 	bl	800920c <_localeconv_r>
 8006916:	6803      	ldr	r3, [r0, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	9309      	str	r3, [sp, #36]	; 0x24
 800691c:	f7f9 fc22 	bl	8000164 <strlen>
 8006920:	2300      	movs	r3, #0
 8006922:	930e      	str	r3, [sp, #56]	; 0x38
 8006924:	f8d8 3000 	ldr.w	r3, [r8]
 8006928:	900a      	str	r0, [sp, #40]	; 0x28
 800692a:	3307      	adds	r3, #7
 800692c:	f023 0307 	bic.w	r3, r3, #7
 8006930:	f103 0208 	add.w	r2, r3, #8
 8006934:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006938:	f8d4 b000 	ldr.w	fp, [r4]
 800693c:	f8c8 2000 	str.w	r2, [r8]
 8006940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006944:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006948:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800694c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006950:	930b      	str	r3, [sp, #44]	; 0x2c
 8006952:	f04f 32ff 	mov.w	r2, #4294967295
 8006956:	4640      	mov	r0, r8
 8006958:	4b9c      	ldr	r3, [pc, #624]	; (8006bcc <_printf_float+0x2cc>)
 800695a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800695c:	f7fa f860 	bl	8000a20 <__aeabi_dcmpun>
 8006960:	bb70      	cbnz	r0, 80069c0 <_printf_float+0xc0>
 8006962:	f04f 32ff 	mov.w	r2, #4294967295
 8006966:	4640      	mov	r0, r8
 8006968:	4b98      	ldr	r3, [pc, #608]	; (8006bcc <_printf_float+0x2cc>)
 800696a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800696c:	f7fa f83a 	bl	80009e4 <__aeabi_dcmple>
 8006970:	bb30      	cbnz	r0, 80069c0 <_printf_float+0xc0>
 8006972:	2200      	movs	r2, #0
 8006974:	2300      	movs	r3, #0
 8006976:	4640      	mov	r0, r8
 8006978:	4651      	mov	r1, sl
 800697a:	f7fa f829 	bl	80009d0 <__aeabi_dcmplt>
 800697e:	b110      	cbz	r0, 8006986 <_printf_float+0x86>
 8006980:	232d      	movs	r3, #45	; 0x2d
 8006982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006986:	4b92      	ldr	r3, [pc, #584]	; (8006bd0 <_printf_float+0x2d0>)
 8006988:	4892      	ldr	r0, [pc, #584]	; (8006bd4 <_printf_float+0x2d4>)
 800698a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800698e:	bf94      	ite	ls
 8006990:	4698      	movls	r8, r3
 8006992:	4680      	movhi	r8, r0
 8006994:	2303      	movs	r3, #3
 8006996:	f04f 0a00 	mov.w	sl, #0
 800699a:	6123      	str	r3, [r4, #16]
 800699c:	f02b 0304 	bic.w	r3, fp, #4
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	4633      	mov	r3, r6
 80069a4:	4621      	mov	r1, r4
 80069a6:	4628      	mov	r0, r5
 80069a8:	9700      	str	r7, [sp, #0]
 80069aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80069ac:	f000 f9d4 	bl	8006d58 <_printf_common>
 80069b0:	3001      	adds	r0, #1
 80069b2:	f040 8090 	bne.w	8006ad6 <_printf_float+0x1d6>
 80069b6:	f04f 30ff 	mov.w	r0, #4294967295
 80069ba:	b011      	add	sp, #68	; 0x44
 80069bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c0:	4642      	mov	r2, r8
 80069c2:	4653      	mov	r3, sl
 80069c4:	4640      	mov	r0, r8
 80069c6:	4651      	mov	r1, sl
 80069c8:	f7fa f82a 	bl	8000a20 <__aeabi_dcmpun>
 80069cc:	b148      	cbz	r0, 80069e2 <_printf_float+0xe2>
 80069ce:	f1ba 0f00 	cmp.w	sl, #0
 80069d2:	bfb8      	it	lt
 80069d4:	232d      	movlt	r3, #45	; 0x2d
 80069d6:	4880      	ldr	r0, [pc, #512]	; (8006bd8 <_printf_float+0x2d8>)
 80069d8:	bfb8      	it	lt
 80069da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80069de:	4b7f      	ldr	r3, [pc, #508]	; (8006bdc <_printf_float+0x2dc>)
 80069e0:	e7d3      	b.n	800698a <_printf_float+0x8a>
 80069e2:	6863      	ldr	r3, [r4, #4]
 80069e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	d142      	bne.n	8006a72 <_printf_float+0x172>
 80069ec:	2306      	movs	r3, #6
 80069ee:	6063      	str	r3, [r4, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	9206      	str	r2, [sp, #24]
 80069f4:	aa0e      	add	r2, sp, #56	; 0x38
 80069f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80069fa:	aa0d      	add	r2, sp, #52	; 0x34
 80069fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006a00:	9203      	str	r2, [sp, #12]
 8006a02:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006a06:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006a0a:	6023      	str	r3, [r4, #0]
 8006a0c:	6863      	ldr	r3, [r4, #4]
 8006a0e:	4642      	mov	r2, r8
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	4628      	mov	r0, r5
 8006a14:	4653      	mov	r3, sl
 8006a16:	910b      	str	r1, [sp, #44]	; 0x2c
 8006a18:	f7ff fed4 	bl	80067c4 <__cvt>
 8006a1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a1e:	4680      	mov	r8, r0
 8006a20:	2947      	cmp	r1, #71	; 0x47
 8006a22:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a24:	d108      	bne.n	8006a38 <_printf_float+0x138>
 8006a26:	1cc8      	adds	r0, r1, #3
 8006a28:	db02      	blt.n	8006a30 <_printf_float+0x130>
 8006a2a:	6863      	ldr	r3, [r4, #4]
 8006a2c:	4299      	cmp	r1, r3
 8006a2e:	dd40      	ble.n	8006ab2 <_printf_float+0x1b2>
 8006a30:	f1a9 0902 	sub.w	r9, r9, #2
 8006a34:	fa5f f989 	uxtb.w	r9, r9
 8006a38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006a3c:	d81f      	bhi.n	8006a7e <_printf_float+0x17e>
 8006a3e:	464a      	mov	r2, r9
 8006a40:	3901      	subs	r1, #1
 8006a42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a46:	910d      	str	r1, [sp, #52]	; 0x34
 8006a48:	f7ff ff1b 	bl	8006882 <__exponent>
 8006a4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a4e:	4682      	mov	sl, r0
 8006a50:	1813      	adds	r3, r2, r0
 8006a52:	2a01      	cmp	r2, #1
 8006a54:	6123      	str	r3, [r4, #16]
 8006a56:	dc02      	bgt.n	8006a5e <_printf_float+0x15e>
 8006a58:	6822      	ldr	r2, [r4, #0]
 8006a5a:	07d2      	lsls	r2, r2, #31
 8006a5c:	d501      	bpl.n	8006a62 <_printf_float+0x162>
 8006a5e:	3301      	adds	r3, #1
 8006a60:	6123      	str	r3, [r4, #16]
 8006a62:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d09b      	beq.n	80069a2 <_printf_float+0xa2>
 8006a6a:	232d      	movs	r3, #45	; 0x2d
 8006a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a70:	e797      	b.n	80069a2 <_printf_float+0xa2>
 8006a72:	2947      	cmp	r1, #71	; 0x47
 8006a74:	d1bc      	bne.n	80069f0 <_printf_float+0xf0>
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1ba      	bne.n	80069f0 <_printf_float+0xf0>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e7b7      	b.n	80069ee <_printf_float+0xee>
 8006a7e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006a82:	d118      	bne.n	8006ab6 <_printf_float+0x1b6>
 8006a84:	2900      	cmp	r1, #0
 8006a86:	6863      	ldr	r3, [r4, #4]
 8006a88:	dd0b      	ble.n	8006aa2 <_printf_float+0x1a2>
 8006a8a:	6121      	str	r1, [r4, #16]
 8006a8c:	b913      	cbnz	r3, 8006a94 <_printf_float+0x194>
 8006a8e:	6822      	ldr	r2, [r4, #0]
 8006a90:	07d0      	lsls	r0, r2, #31
 8006a92:	d502      	bpl.n	8006a9a <_printf_float+0x19a>
 8006a94:	3301      	adds	r3, #1
 8006a96:	440b      	add	r3, r1
 8006a98:	6123      	str	r3, [r4, #16]
 8006a9a:	f04f 0a00 	mov.w	sl, #0
 8006a9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006aa0:	e7df      	b.n	8006a62 <_printf_float+0x162>
 8006aa2:	b913      	cbnz	r3, 8006aaa <_printf_float+0x1aa>
 8006aa4:	6822      	ldr	r2, [r4, #0]
 8006aa6:	07d2      	lsls	r2, r2, #31
 8006aa8:	d501      	bpl.n	8006aae <_printf_float+0x1ae>
 8006aaa:	3302      	adds	r3, #2
 8006aac:	e7f4      	b.n	8006a98 <_printf_float+0x198>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e7f2      	b.n	8006a98 <_printf_float+0x198>
 8006ab2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006ab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ab8:	4299      	cmp	r1, r3
 8006aba:	db05      	blt.n	8006ac8 <_printf_float+0x1c8>
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	6121      	str	r1, [r4, #16]
 8006ac0:	07d8      	lsls	r0, r3, #31
 8006ac2:	d5ea      	bpl.n	8006a9a <_printf_float+0x19a>
 8006ac4:	1c4b      	adds	r3, r1, #1
 8006ac6:	e7e7      	b.n	8006a98 <_printf_float+0x198>
 8006ac8:	2900      	cmp	r1, #0
 8006aca:	bfcc      	ite	gt
 8006acc:	2201      	movgt	r2, #1
 8006ace:	f1c1 0202 	rsble	r2, r1, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	e7e0      	b.n	8006a98 <_printf_float+0x198>
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	055a      	lsls	r2, r3, #21
 8006ada:	d407      	bmi.n	8006aec <_printf_float+0x1ec>
 8006adc:	6923      	ldr	r3, [r4, #16]
 8006ade:	4642      	mov	r2, r8
 8006ae0:	4631      	mov	r1, r6
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	47b8      	blx	r7
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	d12b      	bne.n	8006b42 <_printf_float+0x242>
 8006aea:	e764      	b.n	80069b6 <_printf_float+0xb6>
 8006aec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006af0:	f240 80dd 	bls.w	8006cae <_printf_float+0x3ae>
 8006af4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006af8:	2200      	movs	r2, #0
 8006afa:	2300      	movs	r3, #0
 8006afc:	f7f9 ff5e 	bl	80009bc <__aeabi_dcmpeq>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d033      	beq.n	8006b6c <_printf_float+0x26c>
 8006b04:	2301      	movs	r3, #1
 8006b06:	4631      	mov	r1, r6
 8006b08:	4628      	mov	r0, r5
 8006b0a:	4a35      	ldr	r2, [pc, #212]	; (8006be0 <_printf_float+0x2e0>)
 8006b0c:	47b8      	blx	r7
 8006b0e:	3001      	adds	r0, #1
 8006b10:	f43f af51 	beq.w	80069b6 <_printf_float+0xb6>
 8006b14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	db02      	blt.n	8006b22 <_printf_float+0x222>
 8006b1c:	6823      	ldr	r3, [r4, #0]
 8006b1e:	07d8      	lsls	r0, r3, #31
 8006b20:	d50f      	bpl.n	8006b42 <_printf_float+0x242>
 8006b22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b26:	4631      	mov	r1, r6
 8006b28:	4628      	mov	r0, r5
 8006b2a:	47b8      	blx	r7
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	f43f af42 	beq.w	80069b6 <_printf_float+0xb6>
 8006b32:	f04f 0800 	mov.w	r8, #0
 8006b36:	f104 091a 	add.w	r9, r4, #26
 8006b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	4543      	cmp	r3, r8
 8006b40:	dc09      	bgt.n	8006b56 <_printf_float+0x256>
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	079b      	lsls	r3, r3, #30
 8006b46:	f100 8102 	bmi.w	8006d4e <_printf_float+0x44e>
 8006b4a:	68e0      	ldr	r0, [r4, #12]
 8006b4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b4e:	4298      	cmp	r0, r3
 8006b50:	bfb8      	it	lt
 8006b52:	4618      	movlt	r0, r3
 8006b54:	e731      	b.n	80069ba <_printf_float+0xba>
 8006b56:	2301      	movs	r3, #1
 8006b58:	464a      	mov	r2, r9
 8006b5a:	4631      	mov	r1, r6
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	47b8      	blx	r7
 8006b60:	3001      	adds	r0, #1
 8006b62:	f43f af28 	beq.w	80069b6 <_printf_float+0xb6>
 8006b66:	f108 0801 	add.w	r8, r8, #1
 8006b6a:	e7e6      	b.n	8006b3a <_printf_float+0x23a>
 8006b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	dc38      	bgt.n	8006be4 <_printf_float+0x2e4>
 8006b72:	2301      	movs	r3, #1
 8006b74:	4631      	mov	r1, r6
 8006b76:	4628      	mov	r0, r5
 8006b78:	4a19      	ldr	r2, [pc, #100]	; (8006be0 <_printf_float+0x2e0>)
 8006b7a:	47b8      	blx	r7
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	f43f af1a 	beq.w	80069b6 <_printf_float+0xb6>
 8006b82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b86:	4313      	orrs	r3, r2
 8006b88:	d102      	bne.n	8006b90 <_printf_float+0x290>
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	07d9      	lsls	r1, r3, #31
 8006b8e:	d5d8      	bpl.n	8006b42 <_printf_float+0x242>
 8006b90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b94:	4631      	mov	r1, r6
 8006b96:	4628      	mov	r0, r5
 8006b98:	47b8      	blx	r7
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	f43f af0b 	beq.w	80069b6 <_printf_float+0xb6>
 8006ba0:	f04f 0900 	mov.w	r9, #0
 8006ba4:	f104 0a1a 	add.w	sl, r4, #26
 8006ba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006baa:	425b      	negs	r3, r3
 8006bac:	454b      	cmp	r3, r9
 8006bae:	dc01      	bgt.n	8006bb4 <_printf_float+0x2b4>
 8006bb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bb2:	e794      	b.n	8006ade <_printf_float+0x1de>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	4652      	mov	r2, sl
 8006bb8:	4631      	mov	r1, r6
 8006bba:	4628      	mov	r0, r5
 8006bbc:	47b8      	blx	r7
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	f43f aef9 	beq.w	80069b6 <_printf_float+0xb6>
 8006bc4:	f109 0901 	add.w	r9, r9, #1
 8006bc8:	e7ee      	b.n	8006ba8 <_printf_float+0x2a8>
 8006bca:	bf00      	nop
 8006bcc:	7fefffff 	.word	0x7fefffff
 8006bd0:	0800c7b0 	.word	0x0800c7b0
 8006bd4:	0800c7b4 	.word	0x0800c7b4
 8006bd8:	0800c7bc 	.word	0x0800c7bc
 8006bdc:	0800c7b8 	.word	0x0800c7b8
 8006be0:	0800c7c0 	.word	0x0800c7c0
 8006be4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006be6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006be8:	429a      	cmp	r2, r3
 8006bea:	bfa8      	it	ge
 8006bec:	461a      	movge	r2, r3
 8006bee:	2a00      	cmp	r2, #0
 8006bf0:	4691      	mov	r9, r2
 8006bf2:	dc37      	bgt.n	8006c64 <_printf_float+0x364>
 8006bf4:	f04f 0b00 	mov.w	fp, #0
 8006bf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bfc:	f104 021a 	add.w	r2, r4, #26
 8006c00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006c04:	ebaa 0309 	sub.w	r3, sl, r9
 8006c08:	455b      	cmp	r3, fp
 8006c0a:	dc33      	bgt.n	8006c74 <_printf_float+0x374>
 8006c0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006c10:	429a      	cmp	r2, r3
 8006c12:	db3b      	blt.n	8006c8c <_printf_float+0x38c>
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	07da      	lsls	r2, r3, #31
 8006c18:	d438      	bmi.n	8006c8c <_printf_float+0x38c>
 8006c1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c1c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006c1e:	eba2 030a 	sub.w	r3, r2, sl
 8006c22:	eba2 0901 	sub.w	r9, r2, r1
 8006c26:	4599      	cmp	r9, r3
 8006c28:	bfa8      	it	ge
 8006c2a:	4699      	movge	r9, r3
 8006c2c:	f1b9 0f00 	cmp.w	r9, #0
 8006c30:	dc34      	bgt.n	8006c9c <_printf_float+0x39c>
 8006c32:	f04f 0800 	mov.w	r8, #0
 8006c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c3a:	f104 0a1a 	add.w	sl, r4, #26
 8006c3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006c42:	1a9b      	subs	r3, r3, r2
 8006c44:	eba3 0309 	sub.w	r3, r3, r9
 8006c48:	4543      	cmp	r3, r8
 8006c4a:	f77f af7a 	ble.w	8006b42 <_printf_float+0x242>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	4652      	mov	r2, sl
 8006c52:	4631      	mov	r1, r6
 8006c54:	4628      	mov	r0, r5
 8006c56:	47b8      	blx	r7
 8006c58:	3001      	adds	r0, #1
 8006c5a:	f43f aeac 	beq.w	80069b6 <_printf_float+0xb6>
 8006c5e:	f108 0801 	add.w	r8, r8, #1
 8006c62:	e7ec      	b.n	8006c3e <_printf_float+0x33e>
 8006c64:	4613      	mov	r3, r2
 8006c66:	4631      	mov	r1, r6
 8006c68:	4642      	mov	r2, r8
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	47b8      	blx	r7
 8006c6e:	3001      	adds	r0, #1
 8006c70:	d1c0      	bne.n	8006bf4 <_printf_float+0x2f4>
 8006c72:	e6a0      	b.n	80069b6 <_printf_float+0xb6>
 8006c74:	2301      	movs	r3, #1
 8006c76:	4631      	mov	r1, r6
 8006c78:	4628      	mov	r0, r5
 8006c7a:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c7c:	47b8      	blx	r7
 8006c7e:	3001      	adds	r0, #1
 8006c80:	f43f ae99 	beq.w	80069b6 <_printf_float+0xb6>
 8006c84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c86:	f10b 0b01 	add.w	fp, fp, #1
 8006c8a:	e7b9      	b.n	8006c00 <_printf_float+0x300>
 8006c8c:	4631      	mov	r1, r6
 8006c8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c92:	4628      	mov	r0, r5
 8006c94:	47b8      	blx	r7
 8006c96:	3001      	adds	r0, #1
 8006c98:	d1bf      	bne.n	8006c1a <_printf_float+0x31a>
 8006c9a:	e68c      	b.n	80069b6 <_printf_float+0xb6>
 8006c9c:	464b      	mov	r3, r9
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	eb08 020a 	add.w	r2, r8, sl
 8006ca6:	47b8      	blx	r7
 8006ca8:	3001      	adds	r0, #1
 8006caa:	d1c2      	bne.n	8006c32 <_printf_float+0x332>
 8006cac:	e683      	b.n	80069b6 <_printf_float+0xb6>
 8006cae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cb0:	2a01      	cmp	r2, #1
 8006cb2:	dc01      	bgt.n	8006cb8 <_printf_float+0x3b8>
 8006cb4:	07db      	lsls	r3, r3, #31
 8006cb6:	d537      	bpl.n	8006d28 <_printf_float+0x428>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	4642      	mov	r2, r8
 8006cbc:	4631      	mov	r1, r6
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	47b8      	blx	r7
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	f43f ae77 	beq.w	80069b6 <_printf_float+0xb6>
 8006cc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ccc:	4631      	mov	r1, r6
 8006cce:	4628      	mov	r0, r5
 8006cd0:	47b8      	blx	r7
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	f43f ae6f 	beq.w	80069b6 <_printf_float+0xb6>
 8006cd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f7f9 fe6c 	bl	80009bc <__aeabi_dcmpeq>
 8006ce4:	b9d8      	cbnz	r0, 8006d1e <_printf_float+0x41e>
 8006ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ce8:	f108 0201 	add.w	r2, r8, #1
 8006cec:	3b01      	subs	r3, #1
 8006cee:	4631      	mov	r1, r6
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	47b8      	blx	r7
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	d10e      	bne.n	8006d16 <_printf_float+0x416>
 8006cf8:	e65d      	b.n	80069b6 <_printf_float+0xb6>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	464a      	mov	r2, r9
 8006cfe:	4631      	mov	r1, r6
 8006d00:	4628      	mov	r0, r5
 8006d02:	47b8      	blx	r7
 8006d04:	3001      	adds	r0, #1
 8006d06:	f43f ae56 	beq.w	80069b6 <_printf_float+0xb6>
 8006d0a:	f108 0801 	add.w	r8, r8, #1
 8006d0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d10:	3b01      	subs	r3, #1
 8006d12:	4543      	cmp	r3, r8
 8006d14:	dcf1      	bgt.n	8006cfa <_printf_float+0x3fa>
 8006d16:	4653      	mov	r3, sl
 8006d18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d1c:	e6e0      	b.n	8006ae0 <_printf_float+0x1e0>
 8006d1e:	f04f 0800 	mov.w	r8, #0
 8006d22:	f104 091a 	add.w	r9, r4, #26
 8006d26:	e7f2      	b.n	8006d0e <_printf_float+0x40e>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	4642      	mov	r2, r8
 8006d2c:	e7df      	b.n	8006cee <_printf_float+0x3ee>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	464a      	mov	r2, r9
 8006d32:	4631      	mov	r1, r6
 8006d34:	4628      	mov	r0, r5
 8006d36:	47b8      	blx	r7
 8006d38:	3001      	adds	r0, #1
 8006d3a:	f43f ae3c 	beq.w	80069b6 <_printf_float+0xb6>
 8006d3e:	f108 0801 	add.w	r8, r8, #1
 8006d42:	68e3      	ldr	r3, [r4, #12]
 8006d44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006d46:	1a5b      	subs	r3, r3, r1
 8006d48:	4543      	cmp	r3, r8
 8006d4a:	dcf0      	bgt.n	8006d2e <_printf_float+0x42e>
 8006d4c:	e6fd      	b.n	8006b4a <_printf_float+0x24a>
 8006d4e:	f04f 0800 	mov.w	r8, #0
 8006d52:	f104 0919 	add.w	r9, r4, #25
 8006d56:	e7f4      	b.n	8006d42 <_printf_float+0x442>

08006d58 <_printf_common>:
 8006d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d5c:	4616      	mov	r6, r2
 8006d5e:	4699      	mov	r9, r3
 8006d60:	688a      	ldr	r2, [r1, #8]
 8006d62:	690b      	ldr	r3, [r1, #16]
 8006d64:	4607      	mov	r7, r0
 8006d66:	4293      	cmp	r3, r2
 8006d68:	bfb8      	it	lt
 8006d6a:	4613      	movlt	r3, r2
 8006d6c:	6033      	str	r3, [r6, #0]
 8006d6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d72:	460c      	mov	r4, r1
 8006d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d78:	b10a      	cbz	r2, 8006d7e <_printf_common+0x26>
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	6033      	str	r3, [r6, #0]
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	0699      	lsls	r1, r3, #26
 8006d82:	bf42      	ittt	mi
 8006d84:	6833      	ldrmi	r3, [r6, #0]
 8006d86:	3302      	addmi	r3, #2
 8006d88:	6033      	strmi	r3, [r6, #0]
 8006d8a:	6825      	ldr	r5, [r4, #0]
 8006d8c:	f015 0506 	ands.w	r5, r5, #6
 8006d90:	d106      	bne.n	8006da0 <_printf_common+0x48>
 8006d92:	f104 0a19 	add.w	sl, r4, #25
 8006d96:	68e3      	ldr	r3, [r4, #12]
 8006d98:	6832      	ldr	r2, [r6, #0]
 8006d9a:	1a9b      	subs	r3, r3, r2
 8006d9c:	42ab      	cmp	r3, r5
 8006d9e:	dc28      	bgt.n	8006df2 <_printf_common+0x9a>
 8006da0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006da4:	1e13      	subs	r3, r2, #0
 8006da6:	6822      	ldr	r2, [r4, #0]
 8006da8:	bf18      	it	ne
 8006daa:	2301      	movne	r3, #1
 8006dac:	0692      	lsls	r2, r2, #26
 8006dae:	d42d      	bmi.n	8006e0c <_printf_common+0xb4>
 8006db0:	4649      	mov	r1, r9
 8006db2:	4638      	mov	r0, r7
 8006db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006db8:	47c0      	blx	r8
 8006dba:	3001      	adds	r0, #1
 8006dbc:	d020      	beq.n	8006e00 <_printf_common+0xa8>
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	68e5      	ldr	r5, [r4, #12]
 8006dc2:	f003 0306 	and.w	r3, r3, #6
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	bf18      	it	ne
 8006dca:	2500      	movne	r5, #0
 8006dcc:	6832      	ldr	r2, [r6, #0]
 8006dce:	f04f 0600 	mov.w	r6, #0
 8006dd2:	68a3      	ldr	r3, [r4, #8]
 8006dd4:	bf08      	it	eq
 8006dd6:	1aad      	subeq	r5, r5, r2
 8006dd8:	6922      	ldr	r2, [r4, #16]
 8006dda:	bf08      	it	eq
 8006ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006de0:	4293      	cmp	r3, r2
 8006de2:	bfc4      	itt	gt
 8006de4:	1a9b      	subgt	r3, r3, r2
 8006de6:	18ed      	addgt	r5, r5, r3
 8006de8:	341a      	adds	r4, #26
 8006dea:	42b5      	cmp	r5, r6
 8006dec:	d11a      	bne.n	8006e24 <_printf_common+0xcc>
 8006dee:	2000      	movs	r0, #0
 8006df0:	e008      	b.n	8006e04 <_printf_common+0xac>
 8006df2:	2301      	movs	r3, #1
 8006df4:	4652      	mov	r2, sl
 8006df6:	4649      	mov	r1, r9
 8006df8:	4638      	mov	r0, r7
 8006dfa:	47c0      	blx	r8
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	d103      	bne.n	8006e08 <_printf_common+0xb0>
 8006e00:	f04f 30ff 	mov.w	r0, #4294967295
 8006e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e08:	3501      	adds	r5, #1
 8006e0a:	e7c4      	b.n	8006d96 <_printf_common+0x3e>
 8006e0c:	2030      	movs	r0, #48	; 0x30
 8006e0e:	18e1      	adds	r1, r4, r3
 8006e10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e1a:	4422      	add	r2, r4
 8006e1c:	3302      	adds	r3, #2
 8006e1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e22:	e7c5      	b.n	8006db0 <_printf_common+0x58>
 8006e24:	2301      	movs	r3, #1
 8006e26:	4622      	mov	r2, r4
 8006e28:	4649      	mov	r1, r9
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	47c0      	blx	r8
 8006e2e:	3001      	adds	r0, #1
 8006e30:	d0e6      	beq.n	8006e00 <_printf_common+0xa8>
 8006e32:	3601      	adds	r6, #1
 8006e34:	e7d9      	b.n	8006dea <_printf_common+0x92>
	...

08006e38 <_printf_i>:
 8006e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	7e27      	ldrb	r7, [r4, #24]
 8006e40:	4691      	mov	r9, r2
 8006e42:	2f78      	cmp	r7, #120	; 0x78
 8006e44:	4680      	mov	r8, r0
 8006e46:	469a      	mov	sl, r3
 8006e48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e4e:	d807      	bhi.n	8006e60 <_printf_i+0x28>
 8006e50:	2f62      	cmp	r7, #98	; 0x62
 8006e52:	d80a      	bhi.n	8006e6a <_printf_i+0x32>
 8006e54:	2f00      	cmp	r7, #0
 8006e56:	f000 80d9 	beq.w	800700c <_printf_i+0x1d4>
 8006e5a:	2f58      	cmp	r7, #88	; 0x58
 8006e5c:	f000 80a4 	beq.w	8006fa8 <_printf_i+0x170>
 8006e60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e68:	e03a      	b.n	8006ee0 <_printf_i+0xa8>
 8006e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e6e:	2b15      	cmp	r3, #21
 8006e70:	d8f6      	bhi.n	8006e60 <_printf_i+0x28>
 8006e72:	a001      	add	r0, pc, #4	; (adr r0, 8006e78 <_printf_i+0x40>)
 8006e74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e78:	08006ed1 	.word	0x08006ed1
 8006e7c:	08006ee5 	.word	0x08006ee5
 8006e80:	08006e61 	.word	0x08006e61
 8006e84:	08006e61 	.word	0x08006e61
 8006e88:	08006e61 	.word	0x08006e61
 8006e8c:	08006e61 	.word	0x08006e61
 8006e90:	08006ee5 	.word	0x08006ee5
 8006e94:	08006e61 	.word	0x08006e61
 8006e98:	08006e61 	.word	0x08006e61
 8006e9c:	08006e61 	.word	0x08006e61
 8006ea0:	08006e61 	.word	0x08006e61
 8006ea4:	08006ff3 	.word	0x08006ff3
 8006ea8:	08006f15 	.word	0x08006f15
 8006eac:	08006fd5 	.word	0x08006fd5
 8006eb0:	08006e61 	.word	0x08006e61
 8006eb4:	08006e61 	.word	0x08006e61
 8006eb8:	08007015 	.word	0x08007015
 8006ebc:	08006e61 	.word	0x08006e61
 8006ec0:	08006f15 	.word	0x08006f15
 8006ec4:	08006e61 	.word	0x08006e61
 8006ec8:	08006e61 	.word	0x08006e61
 8006ecc:	08006fdd 	.word	0x08006fdd
 8006ed0:	680b      	ldr	r3, [r1, #0]
 8006ed2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ed6:	1d1a      	adds	r2, r3, #4
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	600a      	str	r2, [r1, #0]
 8006edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e0a4      	b.n	800702e <_printf_i+0x1f6>
 8006ee4:	6825      	ldr	r5, [r4, #0]
 8006ee6:	6808      	ldr	r0, [r1, #0]
 8006ee8:	062e      	lsls	r6, r5, #24
 8006eea:	f100 0304 	add.w	r3, r0, #4
 8006eee:	d50a      	bpl.n	8006f06 <_printf_i+0xce>
 8006ef0:	6805      	ldr	r5, [r0, #0]
 8006ef2:	600b      	str	r3, [r1, #0]
 8006ef4:	2d00      	cmp	r5, #0
 8006ef6:	da03      	bge.n	8006f00 <_printf_i+0xc8>
 8006ef8:	232d      	movs	r3, #45	; 0x2d
 8006efa:	426d      	negs	r5, r5
 8006efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f00:	230a      	movs	r3, #10
 8006f02:	485e      	ldr	r0, [pc, #376]	; (800707c <_printf_i+0x244>)
 8006f04:	e019      	b.n	8006f3a <_printf_i+0x102>
 8006f06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006f0a:	6805      	ldr	r5, [r0, #0]
 8006f0c:	600b      	str	r3, [r1, #0]
 8006f0e:	bf18      	it	ne
 8006f10:	b22d      	sxthne	r5, r5
 8006f12:	e7ef      	b.n	8006ef4 <_printf_i+0xbc>
 8006f14:	680b      	ldr	r3, [r1, #0]
 8006f16:	6825      	ldr	r5, [r4, #0]
 8006f18:	1d18      	adds	r0, r3, #4
 8006f1a:	6008      	str	r0, [r1, #0]
 8006f1c:	0628      	lsls	r0, r5, #24
 8006f1e:	d501      	bpl.n	8006f24 <_printf_i+0xec>
 8006f20:	681d      	ldr	r5, [r3, #0]
 8006f22:	e002      	b.n	8006f2a <_printf_i+0xf2>
 8006f24:	0669      	lsls	r1, r5, #25
 8006f26:	d5fb      	bpl.n	8006f20 <_printf_i+0xe8>
 8006f28:	881d      	ldrh	r5, [r3, #0]
 8006f2a:	2f6f      	cmp	r7, #111	; 0x6f
 8006f2c:	bf0c      	ite	eq
 8006f2e:	2308      	moveq	r3, #8
 8006f30:	230a      	movne	r3, #10
 8006f32:	4852      	ldr	r0, [pc, #328]	; (800707c <_printf_i+0x244>)
 8006f34:	2100      	movs	r1, #0
 8006f36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f3a:	6866      	ldr	r6, [r4, #4]
 8006f3c:	2e00      	cmp	r6, #0
 8006f3e:	bfa8      	it	ge
 8006f40:	6821      	ldrge	r1, [r4, #0]
 8006f42:	60a6      	str	r6, [r4, #8]
 8006f44:	bfa4      	itt	ge
 8006f46:	f021 0104 	bicge.w	r1, r1, #4
 8006f4a:	6021      	strge	r1, [r4, #0]
 8006f4c:	b90d      	cbnz	r5, 8006f52 <_printf_i+0x11a>
 8006f4e:	2e00      	cmp	r6, #0
 8006f50:	d04d      	beq.n	8006fee <_printf_i+0x1b6>
 8006f52:	4616      	mov	r6, r2
 8006f54:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f58:	fb03 5711 	mls	r7, r3, r1, r5
 8006f5c:	5dc7      	ldrb	r7, [r0, r7]
 8006f5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f62:	462f      	mov	r7, r5
 8006f64:	42bb      	cmp	r3, r7
 8006f66:	460d      	mov	r5, r1
 8006f68:	d9f4      	bls.n	8006f54 <_printf_i+0x11c>
 8006f6a:	2b08      	cmp	r3, #8
 8006f6c:	d10b      	bne.n	8006f86 <_printf_i+0x14e>
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	07df      	lsls	r7, r3, #31
 8006f72:	d508      	bpl.n	8006f86 <_printf_i+0x14e>
 8006f74:	6923      	ldr	r3, [r4, #16]
 8006f76:	6861      	ldr	r1, [r4, #4]
 8006f78:	4299      	cmp	r1, r3
 8006f7a:	bfde      	ittt	le
 8006f7c:	2330      	movle	r3, #48	; 0x30
 8006f7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f86:	1b92      	subs	r2, r2, r6
 8006f88:	6122      	str	r2, [r4, #16]
 8006f8a:	464b      	mov	r3, r9
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	4640      	mov	r0, r8
 8006f90:	f8cd a000 	str.w	sl, [sp]
 8006f94:	aa03      	add	r2, sp, #12
 8006f96:	f7ff fedf 	bl	8006d58 <_printf_common>
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	d14c      	bne.n	8007038 <_printf_i+0x200>
 8006f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa2:	b004      	add	sp, #16
 8006fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa8:	4834      	ldr	r0, [pc, #208]	; (800707c <_printf_i+0x244>)
 8006faa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006fae:	680e      	ldr	r6, [r1, #0]
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	f856 5b04 	ldr.w	r5, [r6], #4
 8006fb6:	061f      	lsls	r7, r3, #24
 8006fb8:	600e      	str	r6, [r1, #0]
 8006fba:	d514      	bpl.n	8006fe6 <_printf_i+0x1ae>
 8006fbc:	07d9      	lsls	r1, r3, #31
 8006fbe:	bf44      	itt	mi
 8006fc0:	f043 0320 	orrmi.w	r3, r3, #32
 8006fc4:	6023      	strmi	r3, [r4, #0]
 8006fc6:	b91d      	cbnz	r5, 8006fd0 <_printf_i+0x198>
 8006fc8:	6823      	ldr	r3, [r4, #0]
 8006fca:	f023 0320 	bic.w	r3, r3, #32
 8006fce:	6023      	str	r3, [r4, #0]
 8006fd0:	2310      	movs	r3, #16
 8006fd2:	e7af      	b.n	8006f34 <_printf_i+0xfc>
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	f043 0320 	orr.w	r3, r3, #32
 8006fda:	6023      	str	r3, [r4, #0]
 8006fdc:	2378      	movs	r3, #120	; 0x78
 8006fde:	4828      	ldr	r0, [pc, #160]	; (8007080 <_printf_i+0x248>)
 8006fe0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fe4:	e7e3      	b.n	8006fae <_printf_i+0x176>
 8006fe6:	065e      	lsls	r6, r3, #25
 8006fe8:	bf48      	it	mi
 8006fea:	b2ad      	uxthmi	r5, r5
 8006fec:	e7e6      	b.n	8006fbc <_printf_i+0x184>
 8006fee:	4616      	mov	r6, r2
 8006ff0:	e7bb      	b.n	8006f6a <_printf_i+0x132>
 8006ff2:	680b      	ldr	r3, [r1, #0]
 8006ff4:	6826      	ldr	r6, [r4, #0]
 8006ff6:	1d1d      	adds	r5, r3, #4
 8006ff8:	6960      	ldr	r0, [r4, #20]
 8006ffa:	600d      	str	r5, [r1, #0]
 8006ffc:	0635      	lsls	r5, r6, #24
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	d501      	bpl.n	8007006 <_printf_i+0x1ce>
 8007002:	6018      	str	r0, [r3, #0]
 8007004:	e002      	b.n	800700c <_printf_i+0x1d4>
 8007006:	0671      	lsls	r1, r6, #25
 8007008:	d5fb      	bpl.n	8007002 <_printf_i+0x1ca>
 800700a:	8018      	strh	r0, [r3, #0]
 800700c:	2300      	movs	r3, #0
 800700e:	4616      	mov	r6, r2
 8007010:	6123      	str	r3, [r4, #16]
 8007012:	e7ba      	b.n	8006f8a <_printf_i+0x152>
 8007014:	680b      	ldr	r3, [r1, #0]
 8007016:	1d1a      	adds	r2, r3, #4
 8007018:	600a      	str	r2, [r1, #0]
 800701a:	681e      	ldr	r6, [r3, #0]
 800701c:	2100      	movs	r1, #0
 800701e:	4630      	mov	r0, r6
 8007020:	6862      	ldr	r2, [r4, #4]
 8007022:	f002 f911 	bl	8009248 <memchr>
 8007026:	b108      	cbz	r0, 800702c <_printf_i+0x1f4>
 8007028:	1b80      	subs	r0, r0, r6
 800702a:	6060      	str	r0, [r4, #4]
 800702c:	6863      	ldr	r3, [r4, #4]
 800702e:	6123      	str	r3, [r4, #16]
 8007030:	2300      	movs	r3, #0
 8007032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007036:	e7a8      	b.n	8006f8a <_printf_i+0x152>
 8007038:	4632      	mov	r2, r6
 800703a:	4649      	mov	r1, r9
 800703c:	4640      	mov	r0, r8
 800703e:	6923      	ldr	r3, [r4, #16]
 8007040:	47d0      	blx	sl
 8007042:	3001      	adds	r0, #1
 8007044:	d0ab      	beq.n	8006f9e <_printf_i+0x166>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	079b      	lsls	r3, r3, #30
 800704a:	d413      	bmi.n	8007074 <_printf_i+0x23c>
 800704c:	68e0      	ldr	r0, [r4, #12]
 800704e:	9b03      	ldr	r3, [sp, #12]
 8007050:	4298      	cmp	r0, r3
 8007052:	bfb8      	it	lt
 8007054:	4618      	movlt	r0, r3
 8007056:	e7a4      	b.n	8006fa2 <_printf_i+0x16a>
 8007058:	2301      	movs	r3, #1
 800705a:	4632      	mov	r2, r6
 800705c:	4649      	mov	r1, r9
 800705e:	4640      	mov	r0, r8
 8007060:	47d0      	blx	sl
 8007062:	3001      	adds	r0, #1
 8007064:	d09b      	beq.n	8006f9e <_printf_i+0x166>
 8007066:	3501      	adds	r5, #1
 8007068:	68e3      	ldr	r3, [r4, #12]
 800706a:	9903      	ldr	r1, [sp, #12]
 800706c:	1a5b      	subs	r3, r3, r1
 800706e:	42ab      	cmp	r3, r5
 8007070:	dcf2      	bgt.n	8007058 <_printf_i+0x220>
 8007072:	e7eb      	b.n	800704c <_printf_i+0x214>
 8007074:	2500      	movs	r5, #0
 8007076:	f104 0619 	add.w	r6, r4, #25
 800707a:	e7f5      	b.n	8007068 <_printf_i+0x230>
 800707c:	0800c7c2 	.word	0x0800c7c2
 8007080:	0800c7d3 	.word	0x0800c7d3

08007084 <siprintf>:
 8007084:	b40e      	push	{r1, r2, r3}
 8007086:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800708a:	b500      	push	{lr}
 800708c:	b09c      	sub	sp, #112	; 0x70
 800708e:	ab1d      	add	r3, sp, #116	; 0x74
 8007090:	9002      	str	r0, [sp, #8]
 8007092:	9006      	str	r0, [sp, #24]
 8007094:	9107      	str	r1, [sp, #28]
 8007096:	9104      	str	r1, [sp, #16]
 8007098:	4808      	ldr	r0, [pc, #32]	; (80070bc <siprintf+0x38>)
 800709a:	4909      	ldr	r1, [pc, #36]	; (80070c0 <siprintf+0x3c>)
 800709c:	f853 2b04 	ldr.w	r2, [r3], #4
 80070a0:	9105      	str	r1, [sp, #20]
 80070a2:	6800      	ldr	r0, [r0, #0]
 80070a4:	a902      	add	r1, sp, #8
 80070a6:	9301      	str	r3, [sp, #4]
 80070a8:	f002 fea4 	bl	8009df4 <_svfiprintf_r>
 80070ac:	2200      	movs	r2, #0
 80070ae:	9b02      	ldr	r3, [sp, #8]
 80070b0:	701a      	strb	r2, [r3, #0]
 80070b2:	b01c      	add	sp, #112	; 0x70
 80070b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80070b8:	b003      	add	sp, #12
 80070ba:	4770      	bx	lr
 80070bc:	2000003c 	.word	0x2000003c
 80070c0:	ffff0208 	.word	0xffff0208

080070c4 <strncpy>:
 80070c4:	4603      	mov	r3, r0
 80070c6:	b510      	push	{r4, lr}
 80070c8:	3901      	subs	r1, #1
 80070ca:	b132      	cbz	r2, 80070da <strncpy+0x16>
 80070cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80070d0:	3a01      	subs	r2, #1
 80070d2:	f803 4b01 	strb.w	r4, [r3], #1
 80070d6:	2c00      	cmp	r4, #0
 80070d8:	d1f7      	bne.n	80070ca <strncpy+0x6>
 80070da:	2100      	movs	r1, #0
 80070dc:	441a      	add	r2, r3
 80070de:	4293      	cmp	r3, r2
 80070e0:	d100      	bne.n	80070e4 <strncpy+0x20>
 80070e2:	bd10      	pop	{r4, pc}
 80070e4:	f803 1b01 	strb.w	r1, [r3], #1
 80070e8:	e7f9      	b.n	80070de <strncpy+0x1a>

080070ea <sulp>:
 80070ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ee:	460f      	mov	r7, r1
 80070f0:	4690      	mov	r8, r2
 80070f2:	f002 fc27 	bl	8009944 <__ulp>
 80070f6:	4604      	mov	r4, r0
 80070f8:	460d      	mov	r5, r1
 80070fa:	f1b8 0f00 	cmp.w	r8, #0
 80070fe:	d011      	beq.n	8007124 <sulp+0x3a>
 8007100:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007104:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007108:	2b00      	cmp	r3, #0
 800710a:	dd0b      	ble.n	8007124 <sulp+0x3a>
 800710c:	2400      	movs	r4, #0
 800710e:	051b      	lsls	r3, r3, #20
 8007110:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007114:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007118:	4622      	mov	r2, r4
 800711a:	462b      	mov	r3, r5
 800711c:	f7f9 f9e6 	bl	80004ec <__aeabi_dmul>
 8007120:	4604      	mov	r4, r0
 8007122:	460d      	mov	r5, r1
 8007124:	4620      	mov	r0, r4
 8007126:	4629      	mov	r1, r5
 8007128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800712c:	0000      	movs	r0, r0
	...

08007130 <_strtod_l>:
 8007130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007134:	469b      	mov	fp, r3
 8007136:	2300      	movs	r3, #0
 8007138:	b0a1      	sub	sp, #132	; 0x84
 800713a:	931c      	str	r3, [sp, #112]	; 0x70
 800713c:	4ba1      	ldr	r3, [pc, #644]	; (80073c4 <_strtod_l+0x294>)
 800713e:	4682      	mov	sl, r0
 8007140:	681f      	ldr	r7, [r3, #0]
 8007142:	460e      	mov	r6, r1
 8007144:	4638      	mov	r0, r7
 8007146:	9217      	str	r2, [sp, #92]	; 0x5c
 8007148:	f7f9 f80c 	bl	8000164 <strlen>
 800714c:	f04f 0800 	mov.w	r8, #0
 8007150:	4604      	mov	r4, r0
 8007152:	f04f 0900 	mov.w	r9, #0
 8007156:	961b      	str	r6, [sp, #108]	; 0x6c
 8007158:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800715a:	781a      	ldrb	r2, [r3, #0]
 800715c:	2a2b      	cmp	r2, #43	; 0x2b
 800715e:	d04c      	beq.n	80071fa <_strtod_l+0xca>
 8007160:	d83a      	bhi.n	80071d8 <_strtod_l+0xa8>
 8007162:	2a0d      	cmp	r2, #13
 8007164:	d833      	bhi.n	80071ce <_strtod_l+0x9e>
 8007166:	2a08      	cmp	r2, #8
 8007168:	d833      	bhi.n	80071d2 <_strtod_l+0xa2>
 800716a:	2a00      	cmp	r2, #0
 800716c:	d03d      	beq.n	80071ea <_strtod_l+0xba>
 800716e:	2300      	movs	r3, #0
 8007170:	930c      	str	r3, [sp, #48]	; 0x30
 8007172:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007174:	782b      	ldrb	r3, [r5, #0]
 8007176:	2b30      	cmp	r3, #48	; 0x30
 8007178:	f040 80af 	bne.w	80072da <_strtod_l+0x1aa>
 800717c:	786b      	ldrb	r3, [r5, #1]
 800717e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007182:	2b58      	cmp	r3, #88	; 0x58
 8007184:	d16c      	bne.n	8007260 <_strtod_l+0x130>
 8007186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007188:	4650      	mov	r0, sl
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	ab1c      	add	r3, sp, #112	; 0x70
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	4a8d      	ldr	r2, [pc, #564]	; (80073c8 <_strtod_l+0x298>)
 8007192:	f8cd b008 	str.w	fp, [sp, #8]
 8007196:	ab1d      	add	r3, sp, #116	; 0x74
 8007198:	a91b      	add	r1, sp, #108	; 0x6c
 800719a:	f001 fd39 	bl	8008c10 <__gethex>
 800719e:	f010 0607 	ands.w	r6, r0, #7
 80071a2:	4604      	mov	r4, r0
 80071a4:	d005      	beq.n	80071b2 <_strtod_l+0x82>
 80071a6:	2e06      	cmp	r6, #6
 80071a8:	d129      	bne.n	80071fe <_strtod_l+0xce>
 80071aa:	2300      	movs	r3, #0
 80071ac:	3501      	adds	r5, #1
 80071ae:	951b      	str	r5, [sp, #108]	; 0x6c
 80071b0:	930c      	str	r3, [sp, #48]	; 0x30
 80071b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f040 8596 	bne.w	8007ce6 <_strtod_l+0xbb6>
 80071ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071bc:	b1d3      	cbz	r3, 80071f4 <_strtod_l+0xc4>
 80071be:	4642      	mov	r2, r8
 80071c0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80071c4:	4610      	mov	r0, r2
 80071c6:	4619      	mov	r1, r3
 80071c8:	b021      	add	sp, #132	; 0x84
 80071ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ce:	2a20      	cmp	r2, #32
 80071d0:	d1cd      	bne.n	800716e <_strtod_l+0x3e>
 80071d2:	3301      	adds	r3, #1
 80071d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80071d6:	e7bf      	b.n	8007158 <_strtod_l+0x28>
 80071d8:	2a2d      	cmp	r2, #45	; 0x2d
 80071da:	d1c8      	bne.n	800716e <_strtod_l+0x3e>
 80071dc:	2201      	movs	r2, #1
 80071de:	920c      	str	r2, [sp, #48]	; 0x30
 80071e0:	1c5a      	adds	r2, r3, #1
 80071e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80071e4:	785b      	ldrb	r3, [r3, #1]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1c3      	bne.n	8007172 <_strtod_l+0x42>
 80071ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071ec:	961b      	str	r6, [sp, #108]	; 0x6c
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f040 8577 	bne.w	8007ce2 <_strtod_l+0xbb2>
 80071f4:	4642      	mov	r2, r8
 80071f6:	464b      	mov	r3, r9
 80071f8:	e7e4      	b.n	80071c4 <_strtod_l+0x94>
 80071fa:	2200      	movs	r2, #0
 80071fc:	e7ef      	b.n	80071de <_strtod_l+0xae>
 80071fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007200:	b13a      	cbz	r2, 8007212 <_strtod_l+0xe2>
 8007202:	2135      	movs	r1, #53	; 0x35
 8007204:	a81e      	add	r0, sp, #120	; 0x78
 8007206:	f002 fca1 	bl	8009b4c <__copybits>
 800720a:	4650      	mov	r0, sl
 800720c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800720e:	f002 f869 	bl	80092e4 <_Bfree>
 8007212:	3e01      	subs	r6, #1
 8007214:	2e05      	cmp	r6, #5
 8007216:	d807      	bhi.n	8007228 <_strtod_l+0xf8>
 8007218:	e8df f006 	tbb	[pc, r6]
 800721c:	1d180b0e 	.word	0x1d180b0e
 8007220:	030e      	.short	0x030e
 8007222:	f04f 0900 	mov.w	r9, #0
 8007226:	46c8      	mov	r8, r9
 8007228:	0721      	lsls	r1, r4, #28
 800722a:	d5c2      	bpl.n	80071b2 <_strtod_l+0x82>
 800722c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007230:	e7bf      	b.n	80071b2 <_strtod_l+0x82>
 8007232:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8007236:	e7f7      	b.n	8007228 <_strtod_l+0xf8>
 8007238:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800723a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800723e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007242:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007246:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800724a:	e7ed      	b.n	8007228 <_strtod_l+0xf8>
 800724c:	f04f 0800 	mov.w	r8, #0
 8007250:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80073cc <_strtod_l+0x29c>
 8007254:	e7e8      	b.n	8007228 <_strtod_l+0xf8>
 8007256:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800725a:	f04f 38ff 	mov.w	r8, #4294967295
 800725e:	e7e3      	b.n	8007228 <_strtod_l+0xf8>
 8007260:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	921b      	str	r2, [sp, #108]	; 0x6c
 8007266:	785b      	ldrb	r3, [r3, #1]
 8007268:	2b30      	cmp	r3, #48	; 0x30
 800726a:	d0f9      	beq.n	8007260 <_strtod_l+0x130>
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0a0      	beq.n	80071b2 <_strtod_l+0x82>
 8007270:	2301      	movs	r3, #1
 8007272:	9307      	str	r3, [sp, #28]
 8007274:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007276:	220a      	movs	r2, #10
 8007278:	9308      	str	r3, [sp, #32]
 800727a:	2300      	movs	r3, #0
 800727c:	469b      	mov	fp, r3
 800727e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007282:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007284:	7805      	ldrb	r5, [r0, #0]
 8007286:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800728a:	b2d9      	uxtb	r1, r3
 800728c:	2909      	cmp	r1, #9
 800728e:	d926      	bls.n	80072de <_strtod_l+0x1ae>
 8007290:	4622      	mov	r2, r4
 8007292:	4639      	mov	r1, r7
 8007294:	f003 f81c 	bl	800a2d0 <strncmp>
 8007298:	2800      	cmp	r0, #0
 800729a:	d032      	beq.n	8007302 <_strtod_l+0x1d2>
 800729c:	2000      	movs	r0, #0
 800729e:	462b      	mov	r3, r5
 80072a0:	465c      	mov	r4, fp
 80072a2:	4602      	mov	r2, r0
 80072a4:	9004      	str	r0, [sp, #16]
 80072a6:	2b65      	cmp	r3, #101	; 0x65
 80072a8:	d001      	beq.n	80072ae <_strtod_l+0x17e>
 80072aa:	2b45      	cmp	r3, #69	; 0x45
 80072ac:	d113      	bne.n	80072d6 <_strtod_l+0x1a6>
 80072ae:	b91c      	cbnz	r4, 80072b8 <_strtod_l+0x188>
 80072b0:	9b07      	ldr	r3, [sp, #28]
 80072b2:	4303      	orrs	r3, r0
 80072b4:	d099      	beq.n	80071ea <_strtod_l+0xba>
 80072b6:	2400      	movs	r4, #0
 80072b8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80072ba:	1c73      	adds	r3, r6, #1
 80072bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80072be:	7873      	ldrb	r3, [r6, #1]
 80072c0:	2b2b      	cmp	r3, #43	; 0x2b
 80072c2:	d078      	beq.n	80073b6 <_strtod_l+0x286>
 80072c4:	2b2d      	cmp	r3, #45	; 0x2d
 80072c6:	d07b      	beq.n	80073c0 <_strtod_l+0x290>
 80072c8:	2700      	movs	r7, #0
 80072ca:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80072ce:	2909      	cmp	r1, #9
 80072d0:	f240 8082 	bls.w	80073d8 <_strtod_l+0x2a8>
 80072d4:	961b      	str	r6, [sp, #108]	; 0x6c
 80072d6:	2500      	movs	r5, #0
 80072d8:	e09e      	b.n	8007418 <_strtod_l+0x2e8>
 80072da:	2300      	movs	r3, #0
 80072dc:	e7c9      	b.n	8007272 <_strtod_l+0x142>
 80072de:	f1bb 0f08 	cmp.w	fp, #8
 80072e2:	bfd5      	itete	le
 80072e4:	9906      	ldrle	r1, [sp, #24]
 80072e6:	9905      	ldrgt	r1, [sp, #20]
 80072e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80072ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80072f0:	f100 0001 	add.w	r0, r0, #1
 80072f4:	bfd4      	ite	le
 80072f6:	9306      	strle	r3, [sp, #24]
 80072f8:	9305      	strgt	r3, [sp, #20]
 80072fa:	f10b 0b01 	add.w	fp, fp, #1
 80072fe:	901b      	str	r0, [sp, #108]	; 0x6c
 8007300:	e7bf      	b.n	8007282 <_strtod_l+0x152>
 8007302:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007304:	191a      	adds	r2, r3, r4
 8007306:	921b      	str	r2, [sp, #108]	; 0x6c
 8007308:	5d1b      	ldrb	r3, [r3, r4]
 800730a:	f1bb 0f00 	cmp.w	fp, #0
 800730e:	d036      	beq.n	800737e <_strtod_l+0x24e>
 8007310:	465c      	mov	r4, fp
 8007312:	9004      	str	r0, [sp, #16]
 8007314:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007318:	2a09      	cmp	r2, #9
 800731a:	d912      	bls.n	8007342 <_strtod_l+0x212>
 800731c:	2201      	movs	r2, #1
 800731e:	e7c2      	b.n	80072a6 <_strtod_l+0x176>
 8007320:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007322:	3001      	adds	r0, #1
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	921b      	str	r2, [sp, #108]	; 0x6c
 8007328:	785b      	ldrb	r3, [r3, #1]
 800732a:	2b30      	cmp	r3, #48	; 0x30
 800732c:	d0f8      	beq.n	8007320 <_strtod_l+0x1f0>
 800732e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007332:	2a08      	cmp	r2, #8
 8007334:	f200 84dc 	bhi.w	8007cf0 <_strtod_l+0xbc0>
 8007338:	9004      	str	r0, [sp, #16]
 800733a:	2000      	movs	r0, #0
 800733c:	4604      	mov	r4, r0
 800733e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007340:	9208      	str	r2, [sp, #32]
 8007342:	3b30      	subs	r3, #48	; 0x30
 8007344:	f100 0201 	add.w	r2, r0, #1
 8007348:	d013      	beq.n	8007372 <_strtod_l+0x242>
 800734a:	9904      	ldr	r1, [sp, #16]
 800734c:	1905      	adds	r5, r0, r4
 800734e:	4411      	add	r1, r2
 8007350:	9104      	str	r1, [sp, #16]
 8007352:	4622      	mov	r2, r4
 8007354:	210a      	movs	r1, #10
 8007356:	42aa      	cmp	r2, r5
 8007358:	d113      	bne.n	8007382 <_strtod_l+0x252>
 800735a:	1822      	adds	r2, r4, r0
 800735c:	2a08      	cmp	r2, #8
 800735e:	f104 0401 	add.w	r4, r4, #1
 8007362:	4404      	add	r4, r0
 8007364:	dc1b      	bgt.n	800739e <_strtod_l+0x26e>
 8007366:	220a      	movs	r2, #10
 8007368:	9906      	ldr	r1, [sp, #24]
 800736a:	fb02 3301 	mla	r3, r2, r1, r3
 800736e:	9306      	str	r3, [sp, #24]
 8007370:	2200      	movs	r2, #0
 8007372:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007374:	4610      	mov	r0, r2
 8007376:	1c59      	adds	r1, r3, #1
 8007378:	911b      	str	r1, [sp, #108]	; 0x6c
 800737a:	785b      	ldrb	r3, [r3, #1]
 800737c:	e7ca      	b.n	8007314 <_strtod_l+0x1e4>
 800737e:	4658      	mov	r0, fp
 8007380:	e7d3      	b.n	800732a <_strtod_l+0x1fa>
 8007382:	2a08      	cmp	r2, #8
 8007384:	dc04      	bgt.n	8007390 <_strtod_l+0x260>
 8007386:	9f06      	ldr	r7, [sp, #24]
 8007388:	434f      	muls	r7, r1
 800738a:	9706      	str	r7, [sp, #24]
 800738c:	3201      	adds	r2, #1
 800738e:	e7e2      	b.n	8007356 <_strtod_l+0x226>
 8007390:	1c57      	adds	r7, r2, #1
 8007392:	2f10      	cmp	r7, #16
 8007394:	bfde      	ittt	le
 8007396:	9f05      	ldrle	r7, [sp, #20]
 8007398:	434f      	mulle	r7, r1
 800739a:	9705      	strle	r7, [sp, #20]
 800739c:	e7f6      	b.n	800738c <_strtod_l+0x25c>
 800739e:	2c10      	cmp	r4, #16
 80073a0:	bfdf      	itttt	le
 80073a2:	220a      	movle	r2, #10
 80073a4:	9905      	ldrle	r1, [sp, #20]
 80073a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80073aa:	9305      	strle	r3, [sp, #20]
 80073ac:	e7e0      	b.n	8007370 <_strtod_l+0x240>
 80073ae:	2300      	movs	r3, #0
 80073b0:	2201      	movs	r2, #1
 80073b2:	9304      	str	r3, [sp, #16]
 80073b4:	e77c      	b.n	80072b0 <_strtod_l+0x180>
 80073b6:	2700      	movs	r7, #0
 80073b8:	1cb3      	adds	r3, r6, #2
 80073ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80073bc:	78b3      	ldrb	r3, [r6, #2]
 80073be:	e784      	b.n	80072ca <_strtod_l+0x19a>
 80073c0:	2701      	movs	r7, #1
 80073c2:	e7f9      	b.n	80073b8 <_strtod_l+0x288>
 80073c4:	0800c9d4 	.word	0x0800c9d4
 80073c8:	0800c7e4 	.word	0x0800c7e4
 80073cc:	7ff00000 	.word	0x7ff00000
 80073d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073d2:	1c59      	adds	r1, r3, #1
 80073d4:	911b      	str	r1, [sp, #108]	; 0x6c
 80073d6:	785b      	ldrb	r3, [r3, #1]
 80073d8:	2b30      	cmp	r3, #48	; 0x30
 80073da:	d0f9      	beq.n	80073d0 <_strtod_l+0x2a0>
 80073dc:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80073e0:	2908      	cmp	r1, #8
 80073e2:	f63f af78 	bhi.w	80072d6 <_strtod_l+0x1a6>
 80073e6:	f04f 0e0a 	mov.w	lr, #10
 80073ea:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80073ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073f0:	9309      	str	r3, [sp, #36]	; 0x24
 80073f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073f4:	1c59      	adds	r1, r3, #1
 80073f6:	911b      	str	r1, [sp, #108]	; 0x6c
 80073f8:	785b      	ldrb	r3, [r3, #1]
 80073fa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80073fe:	2d09      	cmp	r5, #9
 8007400:	d935      	bls.n	800746e <_strtod_l+0x33e>
 8007402:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007404:	1b49      	subs	r1, r1, r5
 8007406:	2908      	cmp	r1, #8
 8007408:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800740c:	dc02      	bgt.n	8007414 <_strtod_l+0x2e4>
 800740e:	4565      	cmp	r5, ip
 8007410:	bfa8      	it	ge
 8007412:	4665      	movge	r5, ip
 8007414:	b107      	cbz	r7, 8007418 <_strtod_l+0x2e8>
 8007416:	426d      	negs	r5, r5
 8007418:	2c00      	cmp	r4, #0
 800741a:	d14c      	bne.n	80074b6 <_strtod_l+0x386>
 800741c:	9907      	ldr	r1, [sp, #28]
 800741e:	4301      	orrs	r1, r0
 8007420:	f47f aec7 	bne.w	80071b2 <_strtod_l+0x82>
 8007424:	2a00      	cmp	r2, #0
 8007426:	f47f aee0 	bne.w	80071ea <_strtod_l+0xba>
 800742a:	2b69      	cmp	r3, #105	; 0x69
 800742c:	d026      	beq.n	800747c <_strtod_l+0x34c>
 800742e:	dc23      	bgt.n	8007478 <_strtod_l+0x348>
 8007430:	2b49      	cmp	r3, #73	; 0x49
 8007432:	d023      	beq.n	800747c <_strtod_l+0x34c>
 8007434:	2b4e      	cmp	r3, #78	; 0x4e
 8007436:	f47f aed8 	bne.w	80071ea <_strtod_l+0xba>
 800743a:	499c      	ldr	r1, [pc, #624]	; (80076ac <_strtod_l+0x57c>)
 800743c:	a81b      	add	r0, sp, #108	; 0x6c
 800743e:	f001 fe35 	bl	80090ac <__match>
 8007442:	2800      	cmp	r0, #0
 8007444:	f43f aed1 	beq.w	80071ea <_strtod_l+0xba>
 8007448:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b28      	cmp	r3, #40	; 0x28
 800744e:	d12c      	bne.n	80074aa <_strtod_l+0x37a>
 8007450:	4997      	ldr	r1, [pc, #604]	; (80076b0 <_strtod_l+0x580>)
 8007452:	aa1e      	add	r2, sp, #120	; 0x78
 8007454:	a81b      	add	r0, sp, #108	; 0x6c
 8007456:	f001 fe3d 	bl	80090d4 <__hexnan>
 800745a:	2805      	cmp	r0, #5
 800745c:	d125      	bne.n	80074aa <_strtod_l+0x37a>
 800745e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007460:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8007464:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007468:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800746c:	e6a1      	b.n	80071b2 <_strtod_l+0x82>
 800746e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8007472:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007476:	e7bc      	b.n	80073f2 <_strtod_l+0x2c2>
 8007478:	2b6e      	cmp	r3, #110	; 0x6e
 800747a:	e7dc      	b.n	8007436 <_strtod_l+0x306>
 800747c:	498d      	ldr	r1, [pc, #564]	; (80076b4 <_strtod_l+0x584>)
 800747e:	a81b      	add	r0, sp, #108	; 0x6c
 8007480:	f001 fe14 	bl	80090ac <__match>
 8007484:	2800      	cmp	r0, #0
 8007486:	f43f aeb0 	beq.w	80071ea <_strtod_l+0xba>
 800748a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800748c:	498a      	ldr	r1, [pc, #552]	; (80076b8 <_strtod_l+0x588>)
 800748e:	3b01      	subs	r3, #1
 8007490:	a81b      	add	r0, sp, #108	; 0x6c
 8007492:	931b      	str	r3, [sp, #108]	; 0x6c
 8007494:	f001 fe0a 	bl	80090ac <__match>
 8007498:	b910      	cbnz	r0, 80074a0 <_strtod_l+0x370>
 800749a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800749c:	3301      	adds	r3, #1
 800749e:	931b      	str	r3, [sp, #108]	; 0x6c
 80074a0:	f04f 0800 	mov.w	r8, #0
 80074a4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80076c8 <_strtod_l+0x598>
 80074a8:	e683      	b.n	80071b2 <_strtod_l+0x82>
 80074aa:	4884      	ldr	r0, [pc, #528]	; (80076bc <_strtod_l+0x58c>)
 80074ac:	f002 fefa 	bl	800a2a4 <nan>
 80074b0:	4680      	mov	r8, r0
 80074b2:	4689      	mov	r9, r1
 80074b4:	e67d      	b.n	80071b2 <_strtod_l+0x82>
 80074b6:	9b04      	ldr	r3, [sp, #16]
 80074b8:	f1bb 0f00 	cmp.w	fp, #0
 80074bc:	bf08      	it	eq
 80074be:	46a3      	moveq	fp, r4
 80074c0:	1aeb      	subs	r3, r5, r3
 80074c2:	2c10      	cmp	r4, #16
 80074c4:	9806      	ldr	r0, [sp, #24]
 80074c6:	4626      	mov	r6, r4
 80074c8:	9307      	str	r3, [sp, #28]
 80074ca:	bfa8      	it	ge
 80074cc:	2610      	movge	r6, #16
 80074ce:	f7f8 ff93 	bl	80003f8 <__aeabi_ui2d>
 80074d2:	2c09      	cmp	r4, #9
 80074d4:	4680      	mov	r8, r0
 80074d6:	4689      	mov	r9, r1
 80074d8:	dd13      	ble.n	8007502 <_strtod_l+0x3d2>
 80074da:	4b79      	ldr	r3, [pc, #484]	; (80076c0 <_strtod_l+0x590>)
 80074dc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80074e0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80074e4:	f7f9 f802 	bl	80004ec <__aeabi_dmul>
 80074e8:	4680      	mov	r8, r0
 80074ea:	9805      	ldr	r0, [sp, #20]
 80074ec:	4689      	mov	r9, r1
 80074ee:	f7f8 ff83 	bl	80003f8 <__aeabi_ui2d>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4640      	mov	r0, r8
 80074f8:	4649      	mov	r1, r9
 80074fa:	f7f8 fe41 	bl	8000180 <__adddf3>
 80074fe:	4680      	mov	r8, r0
 8007500:	4689      	mov	r9, r1
 8007502:	2c0f      	cmp	r4, #15
 8007504:	dc36      	bgt.n	8007574 <_strtod_l+0x444>
 8007506:	9b07      	ldr	r3, [sp, #28]
 8007508:	2b00      	cmp	r3, #0
 800750a:	f43f ae52 	beq.w	80071b2 <_strtod_l+0x82>
 800750e:	dd22      	ble.n	8007556 <_strtod_l+0x426>
 8007510:	2b16      	cmp	r3, #22
 8007512:	dc09      	bgt.n	8007528 <_strtod_l+0x3f8>
 8007514:	4c6a      	ldr	r4, [pc, #424]	; (80076c0 <_strtod_l+0x590>)
 8007516:	4642      	mov	r2, r8
 8007518:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800751c:	464b      	mov	r3, r9
 800751e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007522:	f7f8 ffe3 	bl	80004ec <__aeabi_dmul>
 8007526:	e7c3      	b.n	80074b0 <_strtod_l+0x380>
 8007528:	9a07      	ldr	r2, [sp, #28]
 800752a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800752e:	4293      	cmp	r3, r2
 8007530:	db20      	blt.n	8007574 <_strtod_l+0x444>
 8007532:	4d63      	ldr	r5, [pc, #396]	; (80076c0 <_strtod_l+0x590>)
 8007534:	f1c4 040f 	rsb	r4, r4, #15
 8007538:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800753c:	4642      	mov	r2, r8
 800753e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007542:	464b      	mov	r3, r9
 8007544:	f7f8 ffd2 	bl	80004ec <__aeabi_dmul>
 8007548:	9b07      	ldr	r3, [sp, #28]
 800754a:	1b1c      	subs	r4, r3, r4
 800754c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007550:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007554:	e7e5      	b.n	8007522 <_strtod_l+0x3f2>
 8007556:	9b07      	ldr	r3, [sp, #28]
 8007558:	3316      	adds	r3, #22
 800755a:	db0b      	blt.n	8007574 <_strtod_l+0x444>
 800755c:	9b04      	ldr	r3, [sp, #16]
 800755e:	4a58      	ldr	r2, [pc, #352]	; (80076c0 <_strtod_l+0x590>)
 8007560:	1b5d      	subs	r5, r3, r5
 8007562:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007566:	4640      	mov	r0, r8
 8007568:	e9d5 2300 	ldrd	r2, r3, [r5]
 800756c:	4649      	mov	r1, r9
 800756e:	f7f9 f8e7 	bl	8000740 <__aeabi_ddiv>
 8007572:	e79d      	b.n	80074b0 <_strtod_l+0x380>
 8007574:	9b07      	ldr	r3, [sp, #28]
 8007576:	1ba6      	subs	r6, r4, r6
 8007578:	441e      	add	r6, r3
 800757a:	2e00      	cmp	r6, #0
 800757c:	dd71      	ble.n	8007662 <_strtod_l+0x532>
 800757e:	f016 030f 	ands.w	r3, r6, #15
 8007582:	d00a      	beq.n	800759a <_strtod_l+0x46a>
 8007584:	494e      	ldr	r1, [pc, #312]	; (80076c0 <_strtod_l+0x590>)
 8007586:	4642      	mov	r2, r8
 8007588:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800758c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007590:	464b      	mov	r3, r9
 8007592:	f7f8 ffab 	bl	80004ec <__aeabi_dmul>
 8007596:	4680      	mov	r8, r0
 8007598:	4689      	mov	r9, r1
 800759a:	f036 060f 	bics.w	r6, r6, #15
 800759e:	d050      	beq.n	8007642 <_strtod_l+0x512>
 80075a0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80075a4:	dd27      	ble.n	80075f6 <_strtod_l+0x4c6>
 80075a6:	f04f 0b00 	mov.w	fp, #0
 80075aa:	f8cd b010 	str.w	fp, [sp, #16]
 80075ae:	f8cd b020 	str.w	fp, [sp, #32]
 80075b2:	f8cd b018 	str.w	fp, [sp, #24]
 80075b6:	2322      	movs	r3, #34	; 0x22
 80075b8:	f04f 0800 	mov.w	r8, #0
 80075bc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80076c8 <_strtod_l+0x598>
 80075c0:	f8ca 3000 	str.w	r3, [sl]
 80075c4:	9b08      	ldr	r3, [sp, #32]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f43f adf3 	beq.w	80071b2 <_strtod_l+0x82>
 80075cc:	4650      	mov	r0, sl
 80075ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80075d0:	f001 fe88 	bl	80092e4 <_Bfree>
 80075d4:	4650      	mov	r0, sl
 80075d6:	9906      	ldr	r1, [sp, #24]
 80075d8:	f001 fe84 	bl	80092e4 <_Bfree>
 80075dc:	4650      	mov	r0, sl
 80075de:	9904      	ldr	r1, [sp, #16]
 80075e0:	f001 fe80 	bl	80092e4 <_Bfree>
 80075e4:	4650      	mov	r0, sl
 80075e6:	9908      	ldr	r1, [sp, #32]
 80075e8:	f001 fe7c 	bl	80092e4 <_Bfree>
 80075ec:	4659      	mov	r1, fp
 80075ee:	4650      	mov	r0, sl
 80075f0:	f001 fe78 	bl	80092e4 <_Bfree>
 80075f4:	e5dd      	b.n	80071b2 <_strtod_l+0x82>
 80075f6:	2300      	movs	r3, #0
 80075f8:	4640      	mov	r0, r8
 80075fa:	4649      	mov	r1, r9
 80075fc:	461f      	mov	r7, r3
 80075fe:	1136      	asrs	r6, r6, #4
 8007600:	2e01      	cmp	r6, #1
 8007602:	dc21      	bgt.n	8007648 <_strtod_l+0x518>
 8007604:	b10b      	cbz	r3, 800760a <_strtod_l+0x4da>
 8007606:	4680      	mov	r8, r0
 8007608:	4689      	mov	r9, r1
 800760a:	4b2e      	ldr	r3, [pc, #184]	; (80076c4 <_strtod_l+0x594>)
 800760c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007610:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007614:	4642      	mov	r2, r8
 8007616:	e9d7 0100 	ldrd	r0, r1, [r7]
 800761a:	464b      	mov	r3, r9
 800761c:	f7f8 ff66 	bl	80004ec <__aeabi_dmul>
 8007620:	4b29      	ldr	r3, [pc, #164]	; (80076c8 <_strtod_l+0x598>)
 8007622:	460a      	mov	r2, r1
 8007624:	400b      	ands	r3, r1
 8007626:	4929      	ldr	r1, [pc, #164]	; (80076cc <_strtod_l+0x59c>)
 8007628:	4680      	mov	r8, r0
 800762a:	428b      	cmp	r3, r1
 800762c:	d8bb      	bhi.n	80075a6 <_strtod_l+0x476>
 800762e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007632:	428b      	cmp	r3, r1
 8007634:	bf86      	itte	hi
 8007636:	f04f 38ff 	movhi.w	r8, #4294967295
 800763a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80076d0 <_strtod_l+0x5a0>
 800763e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007642:	2300      	movs	r3, #0
 8007644:	9305      	str	r3, [sp, #20]
 8007646:	e07e      	b.n	8007746 <_strtod_l+0x616>
 8007648:	07f2      	lsls	r2, r6, #31
 800764a:	d507      	bpl.n	800765c <_strtod_l+0x52c>
 800764c:	4b1d      	ldr	r3, [pc, #116]	; (80076c4 <_strtod_l+0x594>)
 800764e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	f7f8 ff49 	bl	80004ec <__aeabi_dmul>
 800765a:	2301      	movs	r3, #1
 800765c:	3701      	adds	r7, #1
 800765e:	1076      	asrs	r6, r6, #1
 8007660:	e7ce      	b.n	8007600 <_strtod_l+0x4d0>
 8007662:	d0ee      	beq.n	8007642 <_strtod_l+0x512>
 8007664:	4276      	negs	r6, r6
 8007666:	f016 020f 	ands.w	r2, r6, #15
 800766a:	d00a      	beq.n	8007682 <_strtod_l+0x552>
 800766c:	4b14      	ldr	r3, [pc, #80]	; (80076c0 <_strtod_l+0x590>)
 800766e:	4640      	mov	r0, r8
 8007670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007674:	4649      	mov	r1, r9
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	f7f9 f861 	bl	8000740 <__aeabi_ddiv>
 800767e:	4680      	mov	r8, r0
 8007680:	4689      	mov	r9, r1
 8007682:	1136      	asrs	r6, r6, #4
 8007684:	d0dd      	beq.n	8007642 <_strtod_l+0x512>
 8007686:	2e1f      	cmp	r6, #31
 8007688:	dd24      	ble.n	80076d4 <_strtod_l+0x5a4>
 800768a:	f04f 0b00 	mov.w	fp, #0
 800768e:	f8cd b010 	str.w	fp, [sp, #16]
 8007692:	f8cd b020 	str.w	fp, [sp, #32]
 8007696:	f8cd b018 	str.w	fp, [sp, #24]
 800769a:	2322      	movs	r3, #34	; 0x22
 800769c:	f04f 0800 	mov.w	r8, #0
 80076a0:	f04f 0900 	mov.w	r9, #0
 80076a4:	f8ca 3000 	str.w	r3, [sl]
 80076a8:	e78c      	b.n	80075c4 <_strtod_l+0x494>
 80076aa:	bf00      	nop
 80076ac:	0800c7bd 	.word	0x0800c7bd
 80076b0:	0800c7f8 	.word	0x0800c7f8
 80076b4:	0800c7b5 	.word	0x0800c7b5
 80076b8:	0800c8ef 	.word	0x0800c8ef
 80076bc:	0800c8eb 	.word	0x0800c8eb
 80076c0:	0800ca70 	.word	0x0800ca70
 80076c4:	0800ca48 	.word	0x0800ca48
 80076c8:	7ff00000 	.word	0x7ff00000
 80076cc:	7ca00000 	.word	0x7ca00000
 80076d0:	7fefffff 	.word	0x7fefffff
 80076d4:	f016 0310 	ands.w	r3, r6, #16
 80076d8:	bf18      	it	ne
 80076da:	236a      	movne	r3, #106	; 0x6a
 80076dc:	4640      	mov	r0, r8
 80076de:	9305      	str	r3, [sp, #20]
 80076e0:	4649      	mov	r1, r9
 80076e2:	2300      	movs	r3, #0
 80076e4:	4fb2      	ldr	r7, [pc, #712]	; (80079b0 <_strtod_l+0x880>)
 80076e6:	07f2      	lsls	r2, r6, #31
 80076e8:	d504      	bpl.n	80076f4 <_strtod_l+0x5c4>
 80076ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076ee:	f7f8 fefd 	bl	80004ec <__aeabi_dmul>
 80076f2:	2301      	movs	r3, #1
 80076f4:	1076      	asrs	r6, r6, #1
 80076f6:	f107 0708 	add.w	r7, r7, #8
 80076fa:	d1f4      	bne.n	80076e6 <_strtod_l+0x5b6>
 80076fc:	b10b      	cbz	r3, 8007702 <_strtod_l+0x5d2>
 80076fe:	4680      	mov	r8, r0
 8007700:	4689      	mov	r9, r1
 8007702:	9b05      	ldr	r3, [sp, #20]
 8007704:	b1bb      	cbz	r3, 8007736 <_strtod_l+0x606>
 8007706:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800770a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800770e:	2b00      	cmp	r3, #0
 8007710:	4649      	mov	r1, r9
 8007712:	dd10      	ble.n	8007736 <_strtod_l+0x606>
 8007714:	2b1f      	cmp	r3, #31
 8007716:	f340 812b 	ble.w	8007970 <_strtod_l+0x840>
 800771a:	2b34      	cmp	r3, #52	; 0x34
 800771c:	bfd8      	it	le
 800771e:	f04f 32ff 	movle.w	r2, #4294967295
 8007722:	f04f 0800 	mov.w	r8, #0
 8007726:	bfcf      	iteee	gt
 8007728:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800772c:	3b20      	suble	r3, #32
 800772e:	fa02 f303 	lslle.w	r3, r2, r3
 8007732:	ea03 0901 	andle.w	r9, r3, r1
 8007736:	2200      	movs	r2, #0
 8007738:	2300      	movs	r3, #0
 800773a:	4640      	mov	r0, r8
 800773c:	4649      	mov	r1, r9
 800773e:	f7f9 f93d 	bl	80009bc <__aeabi_dcmpeq>
 8007742:	2800      	cmp	r0, #0
 8007744:	d1a1      	bne.n	800768a <_strtod_l+0x55a>
 8007746:	9b06      	ldr	r3, [sp, #24]
 8007748:	465a      	mov	r2, fp
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	4650      	mov	r0, sl
 800774e:	4623      	mov	r3, r4
 8007750:	9908      	ldr	r1, [sp, #32]
 8007752:	f001 fe33 	bl	80093bc <__s2b>
 8007756:	9008      	str	r0, [sp, #32]
 8007758:	2800      	cmp	r0, #0
 800775a:	f43f af24 	beq.w	80075a6 <_strtod_l+0x476>
 800775e:	9b04      	ldr	r3, [sp, #16]
 8007760:	f04f 0b00 	mov.w	fp, #0
 8007764:	1b5d      	subs	r5, r3, r5
 8007766:	9b07      	ldr	r3, [sp, #28]
 8007768:	f8cd b010 	str.w	fp, [sp, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	bfb4      	ite	lt
 8007770:	462b      	movlt	r3, r5
 8007772:	2300      	movge	r3, #0
 8007774:	930e      	str	r3, [sp, #56]	; 0x38
 8007776:	9b07      	ldr	r3, [sp, #28]
 8007778:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800777c:	9316      	str	r3, [sp, #88]	; 0x58
 800777e:	9b08      	ldr	r3, [sp, #32]
 8007780:	4650      	mov	r0, sl
 8007782:	6859      	ldr	r1, [r3, #4]
 8007784:	f001 fd6e 	bl	8009264 <_Balloc>
 8007788:	9006      	str	r0, [sp, #24]
 800778a:	2800      	cmp	r0, #0
 800778c:	f43f af13 	beq.w	80075b6 <_strtod_l+0x486>
 8007790:	9b08      	ldr	r3, [sp, #32]
 8007792:	300c      	adds	r0, #12
 8007794:	691a      	ldr	r2, [r3, #16]
 8007796:	f103 010c 	add.w	r1, r3, #12
 800779a:	3202      	adds	r2, #2
 800779c:	0092      	lsls	r2, r2, #2
 800779e:	f7fe fffb 	bl	8006798 <memcpy>
 80077a2:	ab1e      	add	r3, sp, #120	; 0x78
 80077a4:	9301      	str	r3, [sp, #4]
 80077a6:	ab1d      	add	r3, sp, #116	; 0x74
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	4642      	mov	r2, r8
 80077ac:	464b      	mov	r3, r9
 80077ae:	4650      	mov	r0, sl
 80077b0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80077b4:	f002 f940 	bl	8009a38 <__d2b>
 80077b8:	901c      	str	r0, [sp, #112]	; 0x70
 80077ba:	2800      	cmp	r0, #0
 80077bc:	f43f aefb 	beq.w	80075b6 <_strtod_l+0x486>
 80077c0:	2101      	movs	r1, #1
 80077c2:	4650      	mov	r0, sl
 80077c4:	f001 fe92 	bl	80094ec <__i2b>
 80077c8:	4603      	mov	r3, r0
 80077ca:	9004      	str	r0, [sp, #16]
 80077cc:	2800      	cmp	r0, #0
 80077ce:	f43f aef2 	beq.w	80075b6 <_strtod_l+0x486>
 80077d2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80077d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80077d6:	2d00      	cmp	r5, #0
 80077d8:	bfab      	itete	ge
 80077da:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80077dc:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80077de:	18ee      	addge	r6, r5, r3
 80077e0:	1b5c      	sublt	r4, r3, r5
 80077e2:	9b05      	ldr	r3, [sp, #20]
 80077e4:	bfa8      	it	ge
 80077e6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80077e8:	eba5 0503 	sub.w	r5, r5, r3
 80077ec:	4415      	add	r5, r2
 80077ee:	4b71      	ldr	r3, [pc, #452]	; (80079b4 <_strtod_l+0x884>)
 80077f0:	f105 35ff 	add.w	r5, r5, #4294967295
 80077f4:	bfb8      	it	lt
 80077f6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80077f8:	429d      	cmp	r5, r3
 80077fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80077fe:	f280 80c9 	bge.w	8007994 <_strtod_l+0x864>
 8007802:	1b5b      	subs	r3, r3, r5
 8007804:	2b1f      	cmp	r3, #31
 8007806:	f04f 0701 	mov.w	r7, #1
 800780a:	eba2 0203 	sub.w	r2, r2, r3
 800780e:	f300 80b6 	bgt.w	800797e <_strtod_l+0x84e>
 8007812:	2500      	movs	r5, #0
 8007814:	fa07 f303 	lsl.w	r3, r7, r3
 8007818:	930f      	str	r3, [sp, #60]	; 0x3c
 800781a:	18b7      	adds	r7, r6, r2
 800781c:	9b05      	ldr	r3, [sp, #20]
 800781e:	42be      	cmp	r6, r7
 8007820:	4414      	add	r4, r2
 8007822:	441c      	add	r4, r3
 8007824:	4633      	mov	r3, r6
 8007826:	bfa8      	it	ge
 8007828:	463b      	movge	r3, r7
 800782a:	42a3      	cmp	r3, r4
 800782c:	bfa8      	it	ge
 800782e:	4623      	movge	r3, r4
 8007830:	2b00      	cmp	r3, #0
 8007832:	bfc2      	ittt	gt
 8007834:	1aff      	subgt	r7, r7, r3
 8007836:	1ae4      	subgt	r4, r4, r3
 8007838:	1af6      	subgt	r6, r6, r3
 800783a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800783c:	2b00      	cmp	r3, #0
 800783e:	dd17      	ble.n	8007870 <_strtod_l+0x740>
 8007840:	461a      	mov	r2, r3
 8007842:	4650      	mov	r0, sl
 8007844:	9904      	ldr	r1, [sp, #16]
 8007846:	f001 ff0b 	bl	8009660 <__pow5mult>
 800784a:	9004      	str	r0, [sp, #16]
 800784c:	2800      	cmp	r0, #0
 800784e:	f43f aeb2 	beq.w	80075b6 <_strtod_l+0x486>
 8007852:	4601      	mov	r1, r0
 8007854:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007856:	4650      	mov	r0, sl
 8007858:	f001 fe5e 	bl	8009518 <__multiply>
 800785c:	9009      	str	r0, [sp, #36]	; 0x24
 800785e:	2800      	cmp	r0, #0
 8007860:	f43f aea9 	beq.w	80075b6 <_strtod_l+0x486>
 8007864:	4650      	mov	r0, sl
 8007866:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007868:	f001 fd3c 	bl	80092e4 <_Bfree>
 800786c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786e:	931c      	str	r3, [sp, #112]	; 0x70
 8007870:	2f00      	cmp	r7, #0
 8007872:	f300 8093 	bgt.w	800799c <_strtod_l+0x86c>
 8007876:	9b07      	ldr	r3, [sp, #28]
 8007878:	2b00      	cmp	r3, #0
 800787a:	dd08      	ble.n	800788e <_strtod_l+0x75e>
 800787c:	4650      	mov	r0, sl
 800787e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007880:	9906      	ldr	r1, [sp, #24]
 8007882:	f001 feed 	bl	8009660 <__pow5mult>
 8007886:	9006      	str	r0, [sp, #24]
 8007888:	2800      	cmp	r0, #0
 800788a:	f43f ae94 	beq.w	80075b6 <_strtod_l+0x486>
 800788e:	2c00      	cmp	r4, #0
 8007890:	dd08      	ble.n	80078a4 <_strtod_l+0x774>
 8007892:	4622      	mov	r2, r4
 8007894:	4650      	mov	r0, sl
 8007896:	9906      	ldr	r1, [sp, #24]
 8007898:	f001 ff3c 	bl	8009714 <__lshift>
 800789c:	9006      	str	r0, [sp, #24]
 800789e:	2800      	cmp	r0, #0
 80078a0:	f43f ae89 	beq.w	80075b6 <_strtod_l+0x486>
 80078a4:	2e00      	cmp	r6, #0
 80078a6:	dd08      	ble.n	80078ba <_strtod_l+0x78a>
 80078a8:	4632      	mov	r2, r6
 80078aa:	4650      	mov	r0, sl
 80078ac:	9904      	ldr	r1, [sp, #16]
 80078ae:	f001 ff31 	bl	8009714 <__lshift>
 80078b2:	9004      	str	r0, [sp, #16]
 80078b4:	2800      	cmp	r0, #0
 80078b6:	f43f ae7e 	beq.w	80075b6 <_strtod_l+0x486>
 80078ba:	4650      	mov	r0, sl
 80078bc:	9a06      	ldr	r2, [sp, #24]
 80078be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80078c0:	f001 ffb0 	bl	8009824 <__mdiff>
 80078c4:	4683      	mov	fp, r0
 80078c6:	2800      	cmp	r0, #0
 80078c8:	f43f ae75 	beq.w	80075b6 <_strtod_l+0x486>
 80078cc:	2400      	movs	r4, #0
 80078ce:	68c3      	ldr	r3, [r0, #12]
 80078d0:	9904      	ldr	r1, [sp, #16]
 80078d2:	60c4      	str	r4, [r0, #12]
 80078d4:	930d      	str	r3, [sp, #52]	; 0x34
 80078d6:	f001 ff89 	bl	80097ec <__mcmp>
 80078da:	42a0      	cmp	r0, r4
 80078dc:	da70      	bge.n	80079c0 <_strtod_l+0x890>
 80078de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078e0:	ea53 0308 	orrs.w	r3, r3, r8
 80078e4:	f040 8096 	bne.w	8007a14 <_strtod_l+0x8e4>
 80078e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f040 8091 	bne.w	8007a14 <_strtod_l+0x8e4>
 80078f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078f6:	0d1b      	lsrs	r3, r3, #20
 80078f8:	051b      	lsls	r3, r3, #20
 80078fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80078fe:	f240 8089 	bls.w	8007a14 <_strtod_l+0x8e4>
 8007902:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007906:	b923      	cbnz	r3, 8007912 <_strtod_l+0x7e2>
 8007908:	f8db 3010 	ldr.w	r3, [fp, #16]
 800790c:	2b01      	cmp	r3, #1
 800790e:	f340 8081 	ble.w	8007a14 <_strtod_l+0x8e4>
 8007912:	4659      	mov	r1, fp
 8007914:	2201      	movs	r2, #1
 8007916:	4650      	mov	r0, sl
 8007918:	f001 fefc 	bl	8009714 <__lshift>
 800791c:	9904      	ldr	r1, [sp, #16]
 800791e:	4683      	mov	fp, r0
 8007920:	f001 ff64 	bl	80097ec <__mcmp>
 8007924:	2800      	cmp	r0, #0
 8007926:	dd75      	ble.n	8007a14 <_strtod_l+0x8e4>
 8007928:	9905      	ldr	r1, [sp, #20]
 800792a:	464b      	mov	r3, r9
 800792c:	4a22      	ldr	r2, [pc, #136]	; (80079b8 <_strtod_l+0x888>)
 800792e:	2900      	cmp	r1, #0
 8007930:	f000 8091 	beq.w	8007a56 <_strtod_l+0x926>
 8007934:	ea02 0109 	and.w	r1, r2, r9
 8007938:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800793c:	f300 808b 	bgt.w	8007a56 <_strtod_l+0x926>
 8007940:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007944:	f77f aea9 	ble.w	800769a <_strtod_l+0x56a>
 8007948:	2300      	movs	r3, #0
 800794a:	4a1c      	ldr	r2, [pc, #112]	; (80079bc <_strtod_l+0x88c>)
 800794c:	4640      	mov	r0, r8
 800794e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007952:	4649      	mov	r1, r9
 8007954:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007958:	f7f8 fdc8 	bl	80004ec <__aeabi_dmul>
 800795c:	460b      	mov	r3, r1
 800795e:	4303      	orrs	r3, r0
 8007960:	bf08      	it	eq
 8007962:	2322      	moveq	r3, #34	; 0x22
 8007964:	4680      	mov	r8, r0
 8007966:	4689      	mov	r9, r1
 8007968:	bf08      	it	eq
 800796a:	f8ca 3000 	streq.w	r3, [sl]
 800796e:	e62d      	b.n	80075cc <_strtod_l+0x49c>
 8007970:	f04f 32ff 	mov.w	r2, #4294967295
 8007974:	fa02 f303 	lsl.w	r3, r2, r3
 8007978:	ea03 0808 	and.w	r8, r3, r8
 800797c:	e6db      	b.n	8007736 <_strtod_l+0x606>
 800797e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007982:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007986:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800798a:	35e2      	adds	r5, #226	; 0xe2
 800798c:	fa07 f505 	lsl.w	r5, r7, r5
 8007990:	970f      	str	r7, [sp, #60]	; 0x3c
 8007992:	e742      	b.n	800781a <_strtod_l+0x6ea>
 8007994:	2301      	movs	r3, #1
 8007996:	2500      	movs	r5, #0
 8007998:	930f      	str	r3, [sp, #60]	; 0x3c
 800799a:	e73e      	b.n	800781a <_strtod_l+0x6ea>
 800799c:	463a      	mov	r2, r7
 800799e:	4650      	mov	r0, sl
 80079a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80079a2:	f001 feb7 	bl	8009714 <__lshift>
 80079a6:	901c      	str	r0, [sp, #112]	; 0x70
 80079a8:	2800      	cmp	r0, #0
 80079aa:	f47f af64 	bne.w	8007876 <_strtod_l+0x746>
 80079ae:	e602      	b.n	80075b6 <_strtod_l+0x486>
 80079b0:	0800c810 	.word	0x0800c810
 80079b4:	fffffc02 	.word	0xfffffc02
 80079b8:	7ff00000 	.word	0x7ff00000
 80079bc:	39500000 	.word	0x39500000
 80079c0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80079c4:	d166      	bne.n	8007a94 <_strtod_l+0x964>
 80079c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079cc:	b35a      	cbz	r2, 8007a26 <_strtod_l+0x8f6>
 80079ce:	4a9c      	ldr	r2, [pc, #624]	; (8007c40 <_strtod_l+0xb10>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d12c      	bne.n	8007a2e <_strtod_l+0x8fe>
 80079d4:	9b05      	ldr	r3, [sp, #20]
 80079d6:	4640      	mov	r0, r8
 80079d8:	b303      	cbz	r3, 8007a1c <_strtod_l+0x8ec>
 80079da:	464b      	mov	r3, r9
 80079dc:	4a99      	ldr	r2, [pc, #612]	; (8007c44 <_strtod_l+0xb14>)
 80079de:	f04f 31ff 	mov.w	r1, #4294967295
 80079e2:	401a      	ands	r2, r3
 80079e4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80079e8:	d81b      	bhi.n	8007a22 <_strtod_l+0x8f2>
 80079ea:	0d12      	lsrs	r2, r2, #20
 80079ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80079f0:	fa01 f303 	lsl.w	r3, r1, r3
 80079f4:	4298      	cmp	r0, r3
 80079f6:	d11a      	bne.n	8007a2e <_strtod_l+0x8fe>
 80079f8:	4b93      	ldr	r3, [pc, #588]	; (8007c48 <_strtod_l+0xb18>)
 80079fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d102      	bne.n	8007a06 <_strtod_l+0x8d6>
 8007a00:	3001      	adds	r0, #1
 8007a02:	f43f add8 	beq.w	80075b6 <_strtod_l+0x486>
 8007a06:	f04f 0800 	mov.w	r8, #0
 8007a0a:	4b8e      	ldr	r3, [pc, #568]	; (8007c44 <_strtod_l+0xb14>)
 8007a0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a0e:	401a      	ands	r2, r3
 8007a10:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007a14:	9b05      	ldr	r3, [sp, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d196      	bne.n	8007948 <_strtod_l+0x818>
 8007a1a:	e5d7      	b.n	80075cc <_strtod_l+0x49c>
 8007a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a20:	e7e8      	b.n	80079f4 <_strtod_l+0x8c4>
 8007a22:	460b      	mov	r3, r1
 8007a24:	e7e6      	b.n	80079f4 <_strtod_l+0x8c4>
 8007a26:	ea53 0308 	orrs.w	r3, r3, r8
 8007a2a:	f43f af7d 	beq.w	8007928 <_strtod_l+0x7f8>
 8007a2e:	b1e5      	cbz	r5, 8007a6a <_strtod_l+0x93a>
 8007a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a32:	421d      	tst	r5, r3
 8007a34:	d0ee      	beq.n	8007a14 <_strtod_l+0x8e4>
 8007a36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a38:	4640      	mov	r0, r8
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	9a05      	ldr	r2, [sp, #20]
 8007a3e:	b1c3      	cbz	r3, 8007a72 <_strtod_l+0x942>
 8007a40:	f7ff fb53 	bl	80070ea <sulp>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a4c:	f7f8 fb98 	bl	8000180 <__adddf3>
 8007a50:	4680      	mov	r8, r0
 8007a52:	4689      	mov	r9, r1
 8007a54:	e7de      	b.n	8007a14 <_strtod_l+0x8e4>
 8007a56:	4013      	ands	r3, r2
 8007a58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a5c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007a60:	f04f 38ff 	mov.w	r8, #4294967295
 8007a64:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007a68:	e7d4      	b.n	8007a14 <_strtod_l+0x8e4>
 8007a6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a6c:	ea13 0f08 	tst.w	r3, r8
 8007a70:	e7e0      	b.n	8007a34 <_strtod_l+0x904>
 8007a72:	f7ff fb3a 	bl	80070ea <sulp>
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a7e:	f7f8 fb7d 	bl	800017c <__aeabi_dsub>
 8007a82:	2200      	movs	r2, #0
 8007a84:	2300      	movs	r3, #0
 8007a86:	4680      	mov	r8, r0
 8007a88:	4689      	mov	r9, r1
 8007a8a:	f7f8 ff97 	bl	80009bc <__aeabi_dcmpeq>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d0c0      	beq.n	8007a14 <_strtod_l+0x8e4>
 8007a92:	e602      	b.n	800769a <_strtod_l+0x56a>
 8007a94:	4658      	mov	r0, fp
 8007a96:	9904      	ldr	r1, [sp, #16]
 8007a98:	f002 f82a 	bl	8009af0 <__ratio>
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	460f      	mov	r7, r1
 8007aa6:	f7f8 ff9d 	bl	80009e4 <__aeabi_dcmple>
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	d075      	beq.n	8007b9a <_strtod_l+0xa6a>
 8007aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d047      	beq.n	8007b44 <_strtod_l+0xa14>
 8007ab4:	2600      	movs	r6, #0
 8007ab6:	4f65      	ldr	r7, [pc, #404]	; (8007c4c <_strtod_l+0xb1c>)
 8007ab8:	4d64      	ldr	r5, [pc, #400]	; (8007c4c <_strtod_l+0xb1c>)
 8007aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ac0:	0d1b      	lsrs	r3, r3, #20
 8007ac2:	051b      	lsls	r3, r3, #20
 8007ac4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ac6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ac8:	4b61      	ldr	r3, [pc, #388]	; (8007c50 <_strtod_l+0xb20>)
 8007aca:	429a      	cmp	r2, r3
 8007acc:	f040 80c8 	bne.w	8007c60 <_strtod_l+0xb30>
 8007ad0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ad4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ada:	4640      	mov	r0, r8
 8007adc:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007ae0:	4649      	mov	r1, r9
 8007ae2:	f001 ff2f 	bl	8009944 <__ulp>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4630      	mov	r0, r6
 8007aec:	4639      	mov	r1, r7
 8007aee:	f7f8 fcfd 	bl	80004ec <__aeabi_dmul>
 8007af2:	4642      	mov	r2, r8
 8007af4:	464b      	mov	r3, r9
 8007af6:	f7f8 fb43 	bl	8000180 <__adddf3>
 8007afa:	460b      	mov	r3, r1
 8007afc:	4951      	ldr	r1, [pc, #324]	; (8007c44 <_strtod_l+0xb14>)
 8007afe:	4a55      	ldr	r2, [pc, #340]	; (8007c54 <_strtod_l+0xb24>)
 8007b00:	4019      	ands	r1, r3
 8007b02:	4291      	cmp	r1, r2
 8007b04:	4680      	mov	r8, r0
 8007b06:	d95e      	bls.n	8007bc6 <_strtod_l+0xa96>
 8007b08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b0a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d103      	bne.n	8007b1a <_strtod_l+0x9ea>
 8007b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b14:	3301      	adds	r3, #1
 8007b16:	f43f ad4e 	beq.w	80075b6 <_strtod_l+0x486>
 8007b1a:	f04f 38ff 	mov.w	r8, #4294967295
 8007b1e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007c48 <_strtod_l+0xb18>
 8007b22:	4650      	mov	r0, sl
 8007b24:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b26:	f001 fbdd 	bl	80092e4 <_Bfree>
 8007b2a:	4650      	mov	r0, sl
 8007b2c:	9906      	ldr	r1, [sp, #24]
 8007b2e:	f001 fbd9 	bl	80092e4 <_Bfree>
 8007b32:	4650      	mov	r0, sl
 8007b34:	9904      	ldr	r1, [sp, #16]
 8007b36:	f001 fbd5 	bl	80092e4 <_Bfree>
 8007b3a:	4659      	mov	r1, fp
 8007b3c:	4650      	mov	r0, sl
 8007b3e:	f001 fbd1 	bl	80092e4 <_Bfree>
 8007b42:	e61c      	b.n	800777e <_strtod_l+0x64e>
 8007b44:	f1b8 0f00 	cmp.w	r8, #0
 8007b48:	d119      	bne.n	8007b7e <_strtod_l+0xa4e>
 8007b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b50:	b9e3      	cbnz	r3, 8007b8c <_strtod_l+0xa5c>
 8007b52:	2200      	movs	r2, #0
 8007b54:	4630      	mov	r0, r6
 8007b56:	4639      	mov	r1, r7
 8007b58:	4b3c      	ldr	r3, [pc, #240]	; (8007c4c <_strtod_l+0xb1c>)
 8007b5a:	f7f8 ff39 	bl	80009d0 <__aeabi_dcmplt>
 8007b5e:	b9c8      	cbnz	r0, 8007b94 <_strtod_l+0xa64>
 8007b60:	2200      	movs	r2, #0
 8007b62:	4630      	mov	r0, r6
 8007b64:	4639      	mov	r1, r7
 8007b66:	4b3c      	ldr	r3, [pc, #240]	; (8007c58 <_strtod_l+0xb28>)
 8007b68:	f7f8 fcc0 	bl	80004ec <__aeabi_dmul>
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	460d      	mov	r5, r1
 8007b70:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007b74:	9418      	str	r4, [sp, #96]	; 0x60
 8007b76:	9319      	str	r3, [sp, #100]	; 0x64
 8007b78:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007b7c:	e79d      	b.n	8007aba <_strtod_l+0x98a>
 8007b7e:	f1b8 0f01 	cmp.w	r8, #1
 8007b82:	d103      	bne.n	8007b8c <_strtod_l+0xa5c>
 8007b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f43f ad87 	beq.w	800769a <_strtod_l+0x56a>
 8007b8c:	2600      	movs	r6, #0
 8007b8e:	2400      	movs	r4, #0
 8007b90:	4f32      	ldr	r7, [pc, #200]	; (8007c5c <_strtod_l+0xb2c>)
 8007b92:	e791      	b.n	8007ab8 <_strtod_l+0x988>
 8007b94:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007b96:	4d30      	ldr	r5, [pc, #192]	; (8007c58 <_strtod_l+0xb28>)
 8007b98:	e7ea      	b.n	8007b70 <_strtod_l+0xa40>
 8007b9a:	4b2f      	ldr	r3, [pc, #188]	; (8007c58 <_strtod_l+0xb28>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	4639      	mov	r1, r7
 8007ba2:	f7f8 fca3 	bl	80004ec <__aeabi_dmul>
 8007ba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ba8:	4604      	mov	r4, r0
 8007baa:	460d      	mov	r5, r1
 8007bac:	b933      	cbnz	r3, 8007bbc <_strtod_l+0xa8c>
 8007bae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bb2:	9010      	str	r0, [sp, #64]	; 0x40
 8007bb4:	9311      	str	r3, [sp, #68]	; 0x44
 8007bb6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007bba:	e77e      	b.n	8007aba <_strtod_l+0x98a>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007bc4:	e7f7      	b.n	8007bb6 <_strtod_l+0xa86>
 8007bc6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007bca:	9b05      	ldr	r3, [sp, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1a8      	bne.n	8007b22 <_strtod_l+0x9f2>
 8007bd0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bd6:	0d1b      	lsrs	r3, r3, #20
 8007bd8:	051b      	lsls	r3, r3, #20
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d1a1      	bne.n	8007b22 <_strtod_l+0x9f2>
 8007bde:	4620      	mov	r0, r4
 8007be0:	4629      	mov	r1, r5
 8007be2:	f7f9 fa49 	bl	8001078 <__aeabi_d2lz>
 8007be6:	f7f8 fc53 	bl	8000490 <__aeabi_l2d>
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	4620      	mov	r0, r4
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	f7f8 fac3 	bl	800017c <__aeabi_dsub>
 8007bf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bfc:	ea43 0308 	orr.w	r3, r3, r8
 8007c00:	4313      	orrs	r3, r2
 8007c02:	4604      	mov	r4, r0
 8007c04:	460d      	mov	r5, r1
 8007c06:	d066      	beq.n	8007cd6 <_strtod_l+0xba6>
 8007c08:	a309      	add	r3, pc, #36	; (adr r3, 8007c30 <_strtod_l+0xb00>)
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	f7f8 fedf 	bl	80009d0 <__aeabi_dcmplt>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	f47f acda 	bne.w	80075cc <_strtod_l+0x49c>
 8007c18:	a307      	add	r3, pc, #28	; (adr r3, 8007c38 <_strtod_l+0xb08>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	4620      	mov	r0, r4
 8007c20:	4629      	mov	r1, r5
 8007c22:	f7f8 fef3 	bl	8000a0c <__aeabi_dcmpgt>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f43f af7b 	beq.w	8007b22 <_strtod_l+0x9f2>
 8007c2c:	e4ce      	b.n	80075cc <_strtod_l+0x49c>
 8007c2e:	bf00      	nop
 8007c30:	94a03595 	.word	0x94a03595
 8007c34:	3fdfffff 	.word	0x3fdfffff
 8007c38:	35afe535 	.word	0x35afe535
 8007c3c:	3fe00000 	.word	0x3fe00000
 8007c40:	000fffff 	.word	0x000fffff
 8007c44:	7ff00000 	.word	0x7ff00000
 8007c48:	7fefffff 	.word	0x7fefffff
 8007c4c:	3ff00000 	.word	0x3ff00000
 8007c50:	7fe00000 	.word	0x7fe00000
 8007c54:	7c9fffff 	.word	0x7c9fffff
 8007c58:	3fe00000 	.word	0x3fe00000
 8007c5c:	bff00000 	.word	0xbff00000
 8007c60:	9b05      	ldr	r3, [sp, #20]
 8007c62:	b313      	cbz	r3, 8007caa <_strtod_l+0xb7a>
 8007c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c6a:	d81e      	bhi.n	8007caa <_strtod_l+0xb7a>
 8007c6c:	a326      	add	r3, pc, #152	; (adr r3, 8007d08 <_strtod_l+0xbd8>)
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	4620      	mov	r0, r4
 8007c74:	4629      	mov	r1, r5
 8007c76:	f7f8 feb5 	bl	80009e4 <__aeabi_dcmple>
 8007c7a:	b190      	cbz	r0, 8007ca2 <_strtod_l+0xb72>
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f7f8 ff0c 	bl	8000a9c <__aeabi_d2uiz>
 8007c84:	2801      	cmp	r0, #1
 8007c86:	bf38      	it	cc
 8007c88:	2001      	movcc	r0, #1
 8007c8a:	f7f8 fbb5 	bl	80003f8 <__aeabi_ui2d>
 8007c8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c90:	4604      	mov	r4, r0
 8007c92:	460d      	mov	r5, r1
 8007c94:	b9d3      	cbnz	r3, 8007ccc <_strtod_l+0xb9c>
 8007c96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c9a:	9012      	str	r0, [sp, #72]	; 0x48
 8007c9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007c9e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007ca2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ca4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007ca8:	1a9f      	subs	r7, r3, r2
 8007caa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007cae:	f001 fe49 	bl	8009944 <__ulp>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	4639      	mov	r1, r7
 8007cba:	f7f8 fc17 	bl	80004ec <__aeabi_dmul>
 8007cbe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007cc2:	f7f8 fa5d 	bl	8000180 <__adddf3>
 8007cc6:	4680      	mov	r8, r0
 8007cc8:	4689      	mov	r9, r1
 8007cca:	e77e      	b.n	8007bca <_strtod_l+0xa9a>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007cd4:	e7e3      	b.n	8007c9e <_strtod_l+0xb6e>
 8007cd6:	a30e      	add	r3, pc, #56	; (adr r3, 8007d10 <_strtod_l+0xbe0>)
 8007cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cdc:	f7f8 fe78 	bl	80009d0 <__aeabi_dcmplt>
 8007ce0:	e7a1      	b.n	8007c26 <_strtod_l+0xaf6>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	930c      	str	r3, [sp, #48]	; 0x30
 8007ce6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ce8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	f7ff ba65 	b.w	80071ba <_strtod_l+0x8a>
 8007cf0:	2b65      	cmp	r3, #101	; 0x65
 8007cf2:	f43f ab5c 	beq.w	80073ae <_strtod_l+0x27e>
 8007cf6:	2b45      	cmp	r3, #69	; 0x45
 8007cf8:	f43f ab59 	beq.w	80073ae <_strtod_l+0x27e>
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f7ff bb8d 	b.w	800741c <_strtod_l+0x2ec>
 8007d02:	bf00      	nop
 8007d04:	f3af 8000 	nop.w
 8007d08:	ffc00000 	.word	0xffc00000
 8007d0c:	41dfffff 	.word	0x41dfffff
 8007d10:	94a03595 	.word	0x94a03595
 8007d14:	3fcfffff 	.word	0x3fcfffff

08007d18 <strtod>:
 8007d18:	460a      	mov	r2, r1
 8007d1a:	4601      	mov	r1, r0
 8007d1c:	4802      	ldr	r0, [pc, #8]	; (8007d28 <strtod+0x10>)
 8007d1e:	4b03      	ldr	r3, [pc, #12]	; (8007d2c <strtod+0x14>)
 8007d20:	6800      	ldr	r0, [r0, #0]
 8007d22:	f7ff ba05 	b.w	8007130 <_strtod_l>
 8007d26:	bf00      	nop
 8007d28:	2000003c 	.word	0x2000003c
 8007d2c:	200000a4 	.word	0x200000a4

08007d30 <strtok>:
 8007d30:	4b16      	ldr	r3, [pc, #88]	; (8007d8c <strtok+0x5c>)
 8007d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d36:	681f      	ldr	r7, [r3, #0]
 8007d38:	4605      	mov	r5, r0
 8007d3a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8007d3c:	460e      	mov	r6, r1
 8007d3e:	b9ec      	cbnz	r4, 8007d7c <strtok+0x4c>
 8007d40:	2050      	movs	r0, #80	; 0x50
 8007d42:	f001 fa67 	bl	8009214 <malloc>
 8007d46:	4602      	mov	r2, r0
 8007d48:	65b8      	str	r0, [r7, #88]	; 0x58
 8007d4a:	b920      	cbnz	r0, 8007d56 <strtok+0x26>
 8007d4c:	2157      	movs	r1, #87	; 0x57
 8007d4e:	4b10      	ldr	r3, [pc, #64]	; (8007d90 <strtok+0x60>)
 8007d50:	4810      	ldr	r0, [pc, #64]	; (8007d94 <strtok+0x64>)
 8007d52:	f000 f849 	bl	8007de8 <__assert_func>
 8007d56:	e9c0 4400 	strd	r4, r4, [r0]
 8007d5a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007d5e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007d62:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007d66:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007d6a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007d6e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007d72:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007d76:	6184      	str	r4, [r0, #24]
 8007d78:	7704      	strb	r4, [r0, #28]
 8007d7a:	6244      	str	r4, [r0, #36]	; 0x24
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	4628      	mov	r0, r5
 8007d80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d82:	2301      	movs	r3, #1
 8007d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d88:	f000 b806 	b.w	8007d98 <__strtok_r>
 8007d8c:	2000003c 	.word	0x2000003c
 8007d90:	0800c838 	.word	0x0800c838
 8007d94:	0800c84f 	.word	0x0800c84f

08007d98 <__strtok_r>:
 8007d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d9a:	b908      	cbnz	r0, 8007da0 <__strtok_r+0x8>
 8007d9c:	6810      	ldr	r0, [r2, #0]
 8007d9e:	b188      	cbz	r0, 8007dc4 <__strtok_r+0x2c>
 8007da0:	4604      	mov	r4, r0
 8007da2:	460f      	mov	r7, r1
 8007da4:	4620      	mov	r0, r4
 8007da6:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007daa:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007dae:	b91e      	cbnz	r6, 8007db8 <__strtok_r+0x20>
 8007db0:	b965      	cbnz	r5, 8007dcc <__strtok_r+0x34>
 8007db2:	4628      	mov	r0, r5
 8007db4:	6015      	str	r5, [r2, #0]
 8007db6:	e005      	b.n	8007dc4 <__strtok_r+0x2c>
 8007db8:	42b5      	cmp	r5, r6
 8007dba:	d1f6      	bne.n	8007daa <__strtok_r+0x12>
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1f0      	bne.n	8007da2 <__strtok_r+0xa>
 8007dc0:	6014      	str	r4, [r2, #0]
 8007dc2:	7003      	strb	r3, [r0, #0]
 8007dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dc6:	461c      	mov	r4, r3
 8007dc8:	e00c      	b.n	8007de4 <__strtok_r+0x4c>
 8007dca:	b915      	cbnz	r5, 8007dd2 <__strtok_r+0x3a>
 8007dcc:	460e      	mov	r6, r1
 8007dce:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007dd2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007dd6:	42ab      	cmp	r3, r5
 8007dd8:	d1f7      	bne.n	8007dca <__strtok_r+0x32>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0f3      	beq.n	8007dc6 <__strtok_r+0x2e>
 8007dde:	2300      	movs	r3, #0
 8007de0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007de4:	6014      	str	r4, [r2, #0]
 8007de6:	e7ed      	b.n	8007dc4 <__strtok_r+0x2c>

08007de8 <__assert_func>:
 8007de8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dea:	4614      	mov	r4, r2
 8007dec:	461a      	mov	r2, r3
 8007dee:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <__assert_func+0x2c>)
 8007df0:	4605      	mov	r5, r0
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68d8      	ldr	r0, [r3, #12]
 8007df6:	b14c      	cbz	r4, 8007e0c <__assert_func+0x24>
 8007df8:	4b07      	ldr	r3, [pc, #28]	; (8007e18 <__assert_func+0x30>)
 8007dfa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007dfe:	9100      	str	r1, [sp, #0]
 8007e00:	462b      	mov	r3, r5
 8007e02:	4906      	ldr	r1, [pc, #24]	; (8007e1c <__assert_func+0x34>)
 8007e04:	f000 fe8a 	bl	8008b1c <fiprintf>
 8007e08:	f002 fb42 	bl	800a490 <abort>
 8007e0c:	4b04      	ldr	r3, [pc, #16]	; (8007e20 <__assert_func+0x38>)
 8007e0e:	461c      	mov	r4, r3
 8007e10:	e7f3      	b.n	8007dfa <__assert_func+0x12>
 8007e12:	bf00      	nop
 8007e14:	2000003c 	.word	0x2000003c
 8007e18:	0800c8b0 	.word	0x0800c8b0
 8007e1c:	0800c8bd 	.word	0x0800c8bd
 8007e20:	0800c8eb 	.word	0x0800c8eb

08007e24 <quorem>:
 8007e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e28:	6903      	ldr	r3, [r0, #16]
 8007e2a:	690c      	ldr	r4, [r1, #16]
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	42a3      	cmp	r3, r4
 8007e30:	f2c0 8083 	blt.w	8007f3a <quorem+0x116>
 8007e34:	3c01      	subs	r4, #1
 8007e36:	f100 0514 	add.w	r5, r0, #20
 8007e3a:	f101 0814 	add.w	r8, r1, #20
 8007e3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e42:	9301      	str	r3, [sp, #4]
 8007e44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e5c:	d332      	bcc.n	8007ec4 <quorem+0xa0>
 8007e5e:	f04f 0e00 	mov.w	lr, #0
 8007e62:	4640      	mov	r0, r8
 8007e64:	46ac      	mov	ip, r5
 8007e66:	46f2      	mov	sl, lr
 8007e68:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e6c:	b293      	uxth	r3, r2
 8007e6e:	fb06 e303 	mla	r3, r6, r3, lr
 8007e72:	0c12      	lsrs	r2, r2, #16
 8007e74:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e78:	fb06 e202 	mla	r2, r6, r2, lr
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	ebaa 0303 	sub.w	r3, sl, r3
 8007e82:	f8dc a000 	ldr.w	sl, [ip]
 8007e86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e8a:	fa1f fa8a 	uxth.w	sl, sl
 8007e8e:	4453      	add	r3, sl
 8007e90:	fa1f fa82 	uxth.w	sl, r2
 8007e94:	f8dc 2000 	ldr.w	r2, [ip]
 8007e98:	4581      	cmp	r9, r0
 8007e9a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007e9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ea8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007eac:	f84c 3b04 	str.w	r3, [ip], #4
 8007eb0:	d2da      	bcs.n	8007e68 <quorem+0x44>
 8007eb2:	f855 300b 	ldr.w	r3, [r5, fp]
 8007eb6:	b92b      	cbnz	r3, 8007ec4 <quorem+0xa0>
 8007eb8:	9b01      	ldr	r3, [sp, #4]
 8007eba:	3b04      	subs	r3, #4
 8007ebc:	429d      	cmp	r5, r3
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	d32f      	bcc.n	8007f22 <quorem+0xfe>
 8007ec2:	613c      	str	r4, [r7, #16]
 8007ec4:	4638      	mov	r0, r7
 8007ec6:	f001 fc91 	bl	80097ec <__mcmp>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	db25      	blt.n	8007f1a <quorem+0xf6>
 8007ece:	4628      	mov	r0, r5
 8007ed0:	f04f 0c00 	mov.w	ip, #0
 8007ed4:	3601      	adds	r6, #1
 8007ed6:	f858 1b04 	ldr.w	r1, [r8], #4
 8007eda:	f8d0 e000 	ldr.w	lr, [r0]
 8007ede:	b28b      	uxth	r3, r1
 8007ee0:	ebac 0303 	sub.w	r3, ip, r3
 8007ee4:	fa1f f28e 	uxth.w	r2, lr
 8007ee8:	4413      	add	r3, r2
 8007eea:	0c0a      	lsrs	r2, r1, #16
 8007eec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ef0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007efa:	45c1      	cmp	r9, r8
 8007efc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f00:	f840 3b04 	str.w	r3, [r0], #4
 8007f04:	d2e7      	bcs.n	8007ed6 <quorem+0xb2>
 8007f06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f0e:	b922      	cbnz	r2, 8007f1a <quorem+0xf6>
 8007f10:	3b04      	subs	r3, #4
 8007f12:	429d      	cmp	r5, r3
 8007f14:	461a      	mov	r2, r3
 8007f16:	d30a      	bcc.n	8007f2e <quorem+0x10a>
 8007f18:	613c      	str	r4, [r7, #16]
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	b003      	add	sp, #12
 8007f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f22:	6812      	ldr	r2, [r2, #0]
 8007f24:	3b04      	subs	r3, #4
 8007f26:	2a00      	cmp	r2, #0
 8007f28:	d1cb      	bne.n	8007ec2 <quorem+0x9e>
 8007f2a:	3c01      	subs	r4, #1
 8007f2c:	e7c6      	b.n	8007ebc <quorem+0x98>
 8007f2e:	6812      	ldr	r2, [r2, #0]
 8007f30:	3b04      	subs	r3, #4
 8007f32:	2a00      	cmp	r2, #0
 8007f34:	d1f0      	bne.n	8007f18 <quorem+0xf4>
 8007f36:	3c01      	subs	r4, #1
 8007f38:	e7eb      	b.n	8007f12 <quorem+0xee>
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	e7ee      	b.n	8007f1c <quorem+0xf8>
	...

08007f40 <_dtoa_r>:
 8007f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f44:	4616      	mov	r6, r2
 8007f46:	461f      	mov	r7, r3
 8007f48:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007f4a:	b099      	sub	sp, #100	; 0x64
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007f52:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007f56:	b974      	cbnz	r4, 8007f76 <_dtoa_r+0x36>
 8007f58:	2010      	movs	r0, #16
 8007f5a:	f001 f95b 	bl	8009214 <malloc>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	6268      	str	r0, [r5, #36]	; 0x24
 8007f62:	b920      	cbnz	r0, 8007f6e <_dtoa_r+0x2e>
 8007f64:	21ea      	movs	r1, #234	; 0xea
 8007f66:	4bae      	ldr	r3, [pc, #696]	; (8008220 <_dtoa_r+0x2e0>)
 8007f68:	48ae      	ldr	r0, [pc, #696]	; (8008224 <_dtoa_r+0x2e4>)
 8007f6a:	f7ff ff3d 	bl	8007de8 <__assert_func>
 8007f6e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f72:	6004      	str	r4, [r0, #0]
 8007f74:	60c4      	str	r4, [r0, #12]
 8007f76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f78:	6819      	ldr	r1, [r3, #0]
 8007f7a:	b151      	cbz	r1, 8007f92 <_dtoa_r+0x52>
 8007f7c:	685a      	ldr	r2, [r3, #4]
 8007f7e:	2301      	movs	r3, #1
 8007f80:	4093      	lsls	r3, r2
 8007f82:	604a      	str	r2, [r1, #4]
 8007f84:	608b      	str	r3, [r1, #8]
 8007f86:	4628      	mov	r0, r5
 8007f88:	f001 f9ac 	bl	80092e4 <_Bfree>
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	1e3b      	subs	r3, r7, #0
 8007f94:	bfaf      	iteee	ge
 8007f96:	2300      	movge	r3, #0
 8007f98:	2201      	movlt	r2, #1
 8007f9a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007f9e:	9305      	strlt	r3, [sp, #20]
 8007fa0:	bfa8      	it	ge
 8007fa2:	f8c8 3000 	strge.w	r3, [r8]
 8007fa6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007faa:	4b9f      	ldr	r3, [pc, #636]	; (8008228 <_dtoa_r+0x2e8>)
 8007fac:	bfb8      	it	lt
 8007fae:	f8c8 2000 	strlt.w	r2, [r8]
 8007fb2:	ea33 0309 	bics.w	r3, r3, r9
 8007fb6:	d119      	bne.n	8007fec <_dtoa_r+0xac>
 8007fb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fbc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007fbe:	6013      	str	r3, [r2, #0]
 8007fc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fc4:	4333      	orrs	r3, r6
 8007fc6:	f000 8580 	beq.w	8008aca <_dtoa_r+0xb8a>
 8007fca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007fcc:	b953      	cbnz	r3, 8007fe4 <_dtoa_r+0xa4>
 8007fce:	4b97      	ldr	r3, [pc, #604]	; (800822c <_dtoa_r+0x2ec>)
 8007fd0:	e022      	b.n	8008018 <_dtoa_r+0xd8>
 8007fd2:	4b97      	ldr	r3, [pc, #604]	; (8008230 <_dtoa_r+0x2f0>)
 8007fd4:	9308      	str	r3, [sp, #32]
 8007fd6:	3308      	adds	r3, #8
 8007fd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007fda:	6013      	str	r3, [r2, #0]
 8007fdc:	9808      	ldr	r0, [sp, #32]
 8007fde:	b019      	add	sp, #100	; 0x64
 8007fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe4:	4b91      	ldr	r3, [pc, #580]	; (800822c <_dtoa_r+0x2ec>)
 8007fe6:	9308      	str	r3, [sp, #32]
 8007fe8:	3303      	adds	r3, #3
 8007fea:	e7f5      	b.n	8007fd8 <_dtoa_r+0x98>
 8007fec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007ff0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007ff4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	f7f8 fcde 	bl	80009bc <__aeabi_dcmpeq>
 8008000:	4680      	mov	r8, r0
 8008002:	b158      	cbz	r0, 800801c <_dtoa_r+0xdc>
 8008004:	2301      	movs	r3, #1
 8008006:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008008:	6013      	str	r3, [r2, #0]
 800800a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 8559 	beq.w	8008ac4 <_dtoa_r+0xb84>
 8008012:	4888      	ldr	r0, [pc, #544]	; (8008234 <_dtoa_r+0x2f4>)
 8008014:	6018      	str	r0, [r3, #0]
 8008016:	1e43      	subs	r3, r0, #1
 8008018:	9308      	str	r3, [sp, #32]
 800801a:	e7df      	b.n	8007fdc <_dtoa_r+0x9c>
 800801c:	ab16      	add	r3, sp, #88	; 0x58
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	ab17      	add	r3, sp, #92	; 0x5c
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	4628      	mov	r0, r5
 8008026:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800802a:	f001 fd05 	bl	8009a38 <__d2b>
 800802e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008032:	4682      	mov	sl, r0
 8008034:	2c00      	cmp	r4, #0
 8008036:	d07e      	beq.n	8008136 <_dtoa_r+0x1f6>
 8008038:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800803c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800803e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008042:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008046:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800804a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800804e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008052:	2200      	movs	r2, #0
 8008054:	4b78      	ldr	r3, [pc, #480]	; (8008238 <_dtoa_r+0x2f8>)
 8008056:	f7f8 f891 	bl	800017c <__aeabi_dsub>
 800805a:	a36b      	add	r3, pc, #428	; (adr r3, 8008208 <_dtoa_r+0x2c8>)
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	f7f8 fa44 	bl	80004ec <__aeabi_dmul>
 8008064:	a36a      	add	r3, pc, #424	; (adr r3, 8008210 <_dtoa_r+0x2d0>)
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	f7f8 f889 	bl	8000180 <__adddf3>
 800806e:	4606      	mov	r6, r0
 8008070:	4620      	mov	r0, r4
 8008072:	460f      	mov	r7, r1
 8008074:	f7f8 f9d0 	bl	8000418 <__aeabi_i2d>
 8008078:	a367      	add	r3, pc, #412	; (adr r3, 8008218 <_dtoa_r+0x2d8>)
 800807a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807e:	f7f8 fa35 	bl	80004ec <__aeabi_dmul>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4630      	mov	r0, r6
 8008088:	4639      	mov	r1, r7
 800808a:	f7f8 f879 	bl	8000180 <__adddf3>
 800808e:	4606      	mov	r6, r0
 8008090:	460f      	mov	r7, r1
 8008092:	f7f8 fcdb 	bl	8000a4c <__aeabi_d2iz>
 8008096:	2200      	movs	r2, #0
 8008098:	4681      	mov	r9, r0
 800809a:	2300      	movs	r3, #0
 800809c:	4630      	mov	r0, r6
 800809e:	4639      	mov	r1, r7
 80080a0:	f7f8 fc96 	bl	80009d0 <__aeabi_dcmplt>
 80080a4:	b148      	cbz	r0, 80080ba <_dtoa_r+0x17a>
 80080a6:	4648      	mov	r0, r9
 80080a8:	f7f8 f9b6 	bl	8000418 <__aeabi_i2d>
 80080ac:	4632      	mov	r2, r6
 80080ae:	463b      	mov	r3, r7
 80080b0:	f7f8 fc84 	bl	80009bc <__aeabi_dcmpeq>
 80080b4:	b908      	cbnz	r0, 80080ba <_dtoa_r+0x17a>
 80080b6:	f109 39ff 	add.w	r9, r9, #4294967295
 80080ba:	f1b9 0f16 	cmp.w	r9, #22
 80080be:	d857      	bhi.n	8008170 <_dtoa_r+0x230>
 80080c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080c4:	4b5d      	ldr	r3, [pc, #372]	; (800823c <_dtoa_r+0x2fc>)
 80080c6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f7f8 fc7f 	bl	80009d0 <__aeabi_dcmplt>
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d04e      	beq.n	8008174 <_dtoa_r+0x234>
 80080d6:	2300      	movs	r3, #0
 80080d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80080dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80080de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80080e0:	1b1c      	subs	r4, r3, r4
 80080e2:	1e63      	subs	r3, r4, #1
 80080e4:	9309      	str	r3, [sp, #36]	; 0x24
 80080e6:	bf49      	itett	mi
 80080e8:	f1c4 0301 	rsbmi	r3, r4, #1
 80080ec:	2300      	movpl	r3, #0
 80080ee:	9306      	strmi	r3, [sp, #24]
 80080f0:	2300      	movmi	r3, #0
 80080f2:	bf54      	ite	pl
 80080f4:	9306      	strpl	r3, [sp, #24]
 80080f6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80080f8:	f1b9 0f00 	cmp.w	r9, #0
 80080fc:	db3c      	blt.n	8008178 <_dtoa_r+0x238>
 80080fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008100:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008104:	444b      	add	r3, r9
 8008106:	9309      	str	r3, [sp, #36]	; 0x24
 8008108:	2300      	movs	r3, #0
 800810a:	930a      	str	r3, [sp, #40]	; 0x28
 800810c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800810e:	2b09      	cmp	r3, #9
 8008110:	d86c      	bhi.n	80081ec <_dtoa_r+0x2ac>
 8008112:	2b05      	cmp	r3, #5
 8008114:	bfc4      	itt	gt
 8008116:	3b04      	subgt	r3, #4
 8008118:	9322      	strgt	r3, [sp, #136]	; 0x88
 800811a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800811c:	bfc8      	it	gt
 800811e:	2400      	movgt	r4, #0
 8008120:	f1a3 0302 	sub.w	r3, r3, #2
 8008124:	bfd8      	it	le
 8008126:	2401      	movle	r4, #1
 8008128:	2b03      	cmp	r3, #3
 800812a:	f200 808b 	bhi.w	8008244 <_dtoa_r+0x304>
 800812e:	e8df f003 	tbb	[pc, r3]
 8008132:	4f2d      	.short	0x4f2d
 8008134:	5b4d      	.short	0x5b4d
 8008136:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800813a:	441c      	add	r4, r3
 800813c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008140:	2b20      	cmp	r3, #32
 8008142:	bfc3      	ittte	gt
 8008144:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008148:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800814c:	fa09 f303 	lslgt.w	r3, r9, r3
 8008150:	f1c3 0320 	rsble	r3, r3, #32
 8008154:	bfc6      	itte	gt
 8008156:	fa26 f000 	lsrgt.w	r0, r6, r0
 800815a:	4318      	orrgt	r0, r3
 800815c:	fa06 f003 	lslle.w	r0, r6, r3
 8008160:	f7f8 f94a 	bl	80003f8 <__aeabi_ui2d>
 8008164:	2301      	movs	r3, #1
 8008166:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800816a:	3c01      	subs	r4, #1
 800816c:	9313      	str	r3, [sp, #76]	; 0x4c
 800816e:	e770      	b.n	8008052 <_dtoa_r+0x112>
 8008170:	2301      	movs	r3, #1
 8008172:	e7b3      	b.n	80080dc <_dtoa_r+0x19c>
 8008174:	900f      	str	r0, [sp, #60]	; 0x3c
 8008176:	e7b2      	b.n	80080de <_dtoa_r+0x19e>
 8008178:	9b06      	ldr	r3, [sp, #24]
 800817a:	eba3 0309 	sub.w	r3, r3, r9
 800817e:	9306      	str	r3, [sp, #24]
 8008180:	f1c9 0300 	rsb	r3, r9, #0
 8008184:	930a      	str	r3, [sp, #40]	; 0x28
 8008186:	2300      	movs	r3, #0
 8008188:	930e      	str	r3, [sp, #56]	; 0x38
 800818a:	e7bf      	b.n	800810c <_dtoa_r+0x1cc>
 800818c:	2300      	movs	r3, #0
 800818e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008190:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008192:	2b00      	cmp	r3, #0
 8008194:	dc59      	bgt.n	800824a <_dtoa_r+0x30a>
 8008196:	f04f 0b01 	mov.w	fp, #1
 800819a:	465b      	mov	r3, fp
 800819c:	f8cd b008 	str.w	fp, [sp, #8]
 80081a0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80081a4:	2200      	movs	r2, #0
 80081a6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80081a8:	6042      	str	r2, [r0, #4]
 80081aa:	2204      	movs	r2, #4
 80081ac:	f102 0614 	add.w	r6, r2, #20
 80081b0:	429e      	cmp	r6, r3
 80081b2:	6841      	ldr	r1, [r0, #4]
 80081b4:	d94f      	bls.n	8008256 <_dtoa_r+0x316>
 80081b6:	4628      	mov	r0, r5
 80081b8:	f001 f854 	bl	8009264 <_Balloc>
 80081bc:	9008      	str	r0, [sp, #32]
 80081be:	2800      	cmp	r0, #0
 80081c0:	d14d      	bne.n	800825e <_dtoa_r+0x31e>
 80081c2:	4602      	mov	r2, r0
 80081c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081c8:	4b1d      	ldr	r3, [pc, #116]	; (8008240 <_dtoa_r+0x300>)
 80081ca:	e6cd      	b.n	8007f68 <_dtoa_r+0x28>
 80081cc:	2301      	movs	r3, #1
 80081ce:	e7de      	b.n	800818e <_dtoa_r+0x24e>
 80081d0:	2300      	movs	r3, #0
 80081d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80081d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80081d6:	eb09 0b03 	add.w	fp, r9, r3
 80081da:	f10b 0301 	add.w	r3, fp, #1
 80081de:	2b01      	cmp	r3, #1
 80081e0:	9302      	str	r3, [sp, #8]
 80081e2:	bfb8      	it	lt
 80081e4:	2301      	movlt	r3, #1
 80081e6:	e7dd      	b.n	80081a4 <_dtoa_r+0x264>
 80081e8:	2301      	movs	r3, #1
 80081ea:	e7f2      	b.n	80081d2 <_dtoa_r+0x292>
 80081ec:	2401      	movs	r4, #1
 80081ee:	2300      	movs	r3, #0
 80081f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80081f2:	9322      	str	r3, [sp, #136]	; 0x88
 80081f4:	f04f 3bff 	mov.w	fp, #4294967295
 80081f8:	2200      	movs	r2, #0
 80081fa:	2312      	movs	r3, #18
 80081fc:	f8cd b008 	str.w	fp, [sp, #8]
 8008200:	9223      	str	r2, [sp, #140]	; 0x8c
 8008202:	e7cf      	b.n	80081a4 <_dtoa_r+0x264>
 8008204:	f3af 8000 	nop.w
 8008208:	636f4361 	.word	0x636f4361
 800820c:	3fd287a7 	.word	0x3fd287a7
 8008210:	8b60c8b3 	.word	0x8b60c8b3
 8008214:	3fc68a28 	.word	0x3fc68a28
 8008218:	509f79fb 	.word	0x509f79fb
 800821c:	3fd34413 	.word	0x3fd34413
 8008220:	0800c838 	.word	0x0800c838
 8008224:	0800c8f9 	.word	0x0800c8f9
 8008228:	7ff00000 	.word	0x7ff00000
 800822c:	0800c8f5 	.word	0x0800c8f5
 8008230:	0800c8ec 	.word	0x0800c8ec
 8008234:	0800c7c1 	.word	0x0800c7c1
 8008238:	3ff80000 	.word	0x3ff80000
 800823c:	0800ca70 	.word	0x0800ca70
 8008240:	0800c958 	.word	0x0800c958
 8008244:	2301      	movs	r3, #1
 8008246:	930b      	str	r3, [sp, #44]	; 0x2c
 8008248:	e7d4      	b.n	80081f4 <_dtoa_r+0x2b4>
 800824a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800824e:	465b      	mov	r3, fp
 8008250:	f8cd b008 	str.w	fp, [sp, #8]
 8008254:	e7a6      	b.n	80081a4 <_dtoa_r+0x264>
 8008256:	3101      	adds	r1, #1
 8008258:	6041      	str	r1, [r0, #4]
 800825a:	0052      	lsls	r2, r2, #1
 800825c:	e7a6      	b.n	80081ac <_dtoa_r+0x26c>
 800825e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008260:	9a08      	ldr	r2, [sp, #32]
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	9b02      	ldr	r3, [sp, #8]
 8008266:	2b0e      	cmp	r3, #14
 8008268:	f200 80a8 	bhi.w	80083bc <_dtoa_r+0x47c>
 800826c:	2c00      	cmp	r4, #0
 800826e:	f000 80a5 	beq.w	80083bc <_dtoa_r+0x47c>
 8008272:	f1b9 0f00 	cmp.w	r9, #0
 8008276:	dd34      	ble.n	80082e2 <_dtoa_r+0x3a2>
 8008278:	4a9a      	ldr	r2, [pc, #616]	; (80084e4 <_dtoa_r+0x5a4>)
 800827a:	f009 030f 	and.w	r3, r9, #15
 800827e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008282:	f419 7f80 	tst.w	r9, #256	; 0x100
 8008286:	e9d3 3400 	ldrd	r3, r4, [r3]
 800828a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800828e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8008292:	d016      	beq.n	80082c2 <_dtoa_r+0x382>
 8008294:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008298:	4b93      	ldr	r3, [pc, #588]	; (80084e8 <_dtoa_r+0x5a8>)
 800829a:	2703      	movs	r7, #3
 800829c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082a0:	f7f8 fa4e 	bl	8000740 <__aeabi_ddiv>
 80082a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082a8:	f004 040f 	and.w	r4, r4, #15
 80082ac:	4e8e      	ldr	r6, [pc, #568]	; (80084e8 <_dtoa_r+0x5a8>)
 80082ae:	b954      	cbnz	r4, 80082c6 <_dtoa_r+0x386>
 80082b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80082b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082b8:	f7f8 fa42 	bl	8000740 <__aeabi_ddiv>
 80082bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082c0:	e029      	b.n	8008316 <_dtoa_r+0x3d6>
 80082c2:	2702      	movs	r7, #2
 80082c4:	e7f2      	b.n	80082ac <_dtoa_r+0x36c>
 80082c6:	07e1      	lsls	r1, r4, #31
 80082c8:	d508      	bpl.n	80082dc <_dtoa_r+0x39c>
 80082ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082d2:	f7f8 f90b 	bl	80004ec <__aeabi_dmul>
 80082d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80082da:	3701      	adds	r7, #1
 80082dc:	1064      	asrs	r4, r4, #1
 80082de:	3608      	adds	r6, #8
 80082e0:	e7e5      	b.n	80082ae <_dtoa_r+0x36e>
 80082e2:	f000 80a5 	beq.w	8008430 <_dtoa_r+0x4f0>
 80082e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082ea:	f1c9 0400 	rsb	r4, r9, #0
 80082ee:	4b7d      	ldr	r3, [pc, #500]	; (80084e4 <_dtoa_r+0x5a4>)
 80082f0:	f004 020f 	and.w	r2, r4, #15
 80082f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fc:	f7f8 f8f6 	bl	80004ec <__aeabi_dmul>
 8008300:	2702      	movs	r7, #2
 8008302:	2300      	movs	r3, #0
 8008304:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008308:	4e77      	ldr	r6, [pc, #476]	; (80084e8 <_dtoa_r+0x5a8>)
 800830a:	1124      	asrs	r4, r4, #4
 800830c:	2c00      	cmp	r4, #0
 800830e:	f040 8084 	bne.w	800841a <_dtoa_r+0x4da>
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1d2      	bne.n	80082bc <_dtoa_r+0x37c>
 8008316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 808b 	beq.w	8008434 <_dtoa_r+0x4f4>
 800831e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008322:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008326:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800832a:	2200      	movs	r2, #0
 800832c:	4b6f      	ldr	r3, [pc, #444]	; (80084ec <_dtoa_r+0x5ac>)
 800832e:	f7f8 fb4f 	bl	80009d0 <__aeabi_dcmplt>
 8008332:	2800      	cmp	r0, #0
 8008334:	d07e      	beq.n	8008434 <_dtoa_r+0x4f4>
 8008336:	9b02      	ldr	r3, [sp, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d07b      	beq.n	8008434 <_dtoa_r+0x4f4>
 800833c:	f1bb 0f00 	cmp.w	fp, #0
 8008340:	dd38      	ble.n	80083b4 <_dtoa_r+0x474>
 8008342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008346:	2200      	movs	r2, #0
 8008348:	4b69      	ldr	r3, [pc, #420]	; (80084f0 <_dtoa_r+0x5b0>)
 800834a:	f7f8 f8cf 	bl	80004ec <__aeabi_dmul>
 800834e:	465c      	mov	r4, fp
 8008350:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008354:	f109 38ff 	add.w	r8, r9, #4294967295
 8008358:	3701      	adds	r7, #1
 800835a:	4638      	mov	r0, r7
 800835c:	f7f8 f85c 	bl	8000418 <__aeabi_i2d>
 8008360:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008364:	f7f8 f8c2 	bl	80004ec <__aeabi_dmul>
 8008368:	2200      	movs	r2, #0
 800836a:	4b62      	ldr	r3, [pc, #392]	; (80084f4 <_dtoa_r+0x5b4>)
 800836c:	f7f7 ff08 	bl	8000180 <__adddf3>
 8008370:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008374:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008378:	9611      	str	r6, [sp, #68]	; 0x44
 800837a:	2c00      	cmp	r4, #0
 800837c:	d15d      	bne.n	800843a <_dtoa_r+0x4fa>
 800837e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008382:	2200      	movs	r2, #0
 8008384:	4b5c      	ldr	r3, [pc, #368]	; (80084f8 <_dtoa_r+0x5b8>)
 8008386:	f7f7 fef9 	bl	800017c <__aeabi_dsub>
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008392:	4633      	mov	r3, r6
 8008394:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008396:	f7f8 fb39 	bl	8000a0c <__aeabi_dcmpgt>
 800839a:	2800      	cmp	r0, #0
 800839c:	f040 829e 	bne.w	80088dc <_dtoa_r+0x99c>
 80083a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80083a6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80083aa:	f7f8 fb11 	bl	80009d0 <__aeabi_dcmplt>
 80083ae:	2800      	cmp	r0, #0
 80083b0:	f040 8292 	bne.w	80088d8 <_dtoa_r+0x998>
 80083b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80083b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80083bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f2c0 8153 	blt.w	800866a <_dtoa_r+0x72a>
 80083c4:	f1b9 0f0e 	cmp.w	r9, #14
 80083c8:	f300 814f 	bgt.w	800866a <_dtoa_r+0x72a>
 80083cc:	4b45      	ldr	r3, [pc, #276]	; (80084e4 <_dtoa_r+0x5a4>)
 80083ce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80083d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80083d6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80083da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f280 80db 	bge.w	8008598 <_dtoa_r+0x658>
 80083e2:	9b02      	ldr	r3, [sp, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f300 80d7 	bgt.w	8008598 <_dtoa_r+0x658>
 80083ea:	f040 8274 	bne.w	80088d6 <_dtoa_r+0x996>
 80083ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083f2:	2200      	movs	r2, #0
 80083f4:	4b40      	ldr	r3, [pc, #256]	; (80084f8 <_dtoa_r+0x5b8>)
 80083f6:	f7f8 f879 	bl	80004ec <__aeabi_dmul>
 80083fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083fe:	f7f8 fafb 	bl	80009f8 <__aeabi_dcmpge>
 8008402:	9c02      	ldr	r4, [sp, #8]
 8008404:	4626      	mov	r6, r4
 8008406:	2800      	cmp	r0, #0
 8008408:	f040 824a 	bne.w	80088a0 <_dtoa_r+0x960>
 800840c:	2331      	movs	r3, #49	; 0x31
 800840e:	9f08      	ldr	r7, [sp, #32]
 8008410:	f109 0901 	add.w	r9, r9, #1
 8008414:	f807 3b01 	strb.w	r3, [r7], #1
 8008418:	e246      	b.n	80088a8 <_dtoa_r+0x968>
 800841a:	07e2      	lsls	r2, r4, #31
 800841c:	d505      	bpl.n	800842a <_dtoa_r+0x4ea>
 800841e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008422:	f7f8 f863 	bl	80004ec <__aeabi_dmul>
 8008426:	2301      	movs	r3, #1
 8008428:	3701      	adds	r7, #1
 800842a:	1064      	asrs	r4, r4, #1
 800842c:	3608      	adds	r6, #8
 800842e:	e76d      	b.n	800830c <_dtoa_r+0x3cc>
 8008430:	2702      	movs	r7, #2
 8008432:	e770      	b.n	8008316 <_dtoa_r+0x3d6>
 8008434:	46c8      	mov	r8, r9
 8008436:	9c02      	ldr	r4, [sp, #8]
 8008438:	e78f      	b.n	800835a <_dtoa_r+0x41a>
 800843a:	9908      	ldr	r1, [sp, #32]
 800843c:	4b29      	ldr	r3, [pc, #164]	; (80084e4 <_dtoa_r+0x5a4>)
 800843e:	4421      	add	r1, r4
 8008440:	9112      	str	r1, [sp, #72]	; 0x48
 8008442:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008444:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008448:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800844c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008450:	2900      	cmp	r1, #0
 8008452:	d055      	beq.n	8008500 <_dtoa_r+0x5c0>
 8008454:	2000      	movs	r0, #0
 8008456:	4929      	ldr	r1, [pc, #164]	; (80084fc <_dtoa_r+0x5bc>)
 8008458:	f7f8 f972 	bl	8000740 <__aeabi_ddiv>
 800845c:	463b      	mov	r3, r7
 800845e:	4632      	mov	r2, r6
 8008460:	f7f7 fe8c 	bl	800017c <__aeabi_dsub>
 8008464:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008468:	9f08      	ldr	r7, [sp, #32]
 800846a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800846e:	f7f8 faed 	bl	8000a4c <__aeabi_d2iz>
 8008472:	4604      	mov	r4, r0
 8008474:	f7f7 ffd0 	bl	8000418 <__aeabi_i2d>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008480:	f7f7 fe7c 	bl	800017c <__aeabi_dsub>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	3430      	adds	r4, #48	; 0x30
 800848a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800848e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008492:	f807 4b01 	strb.w	r4, [r7], #1
 8008496:	f7f8 fa9b 	bl	80009d0 <__aeabi_dcmplt>
 800849a:	2800      	cmp	r0, #0
 800849c:	d174      	bne.n	8008588 <_dtoa_r+0x648>
 800849e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084a2:	2000      	movs	r0, #0
 80084a4:	4911      	ldr	r1, [pc, #68]	; (80084ec <_dtoa_r+0x5ac>)
 80084a6:	f7f7 fe69 	bl	800017c <__aeabi_dsub>
 80084aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80084ae:	f7f8 fa8f 	bl	80009d0 <__aeabi_dcmplt>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	f040 80b6 	bne.w	8008624 <_dtoa_r+0x6e4>
 80084b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084ba:	429f      	cmp	r7, r3
 80084bc:	f43f af7a 	beq.w	80083b4 <_dtoa_r+0x474>
 80084c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80084c4:	2200      	movs	r2, #0
 80084c6:	4b0a      	ldr	r3, [pc, #40]	; (80084f0 <_dtoa_r+0x5b0>)
 80084c8:	f7f8 f810 	bl	80004ec <__aeabi_dmul>
 80084cc:	2200      	movs	r2, #0
 80084ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80084d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084d6:	4b06      	ldr	r3, [pc, #24]	; (80084f0 <_dtoa_r+0x5b0>)
 80084d8:	f7f8 f808 	bl	80004ec <__aeabi_dmul>
 80084dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084e0:	e7c3      	b.n	800846a <_dtoa_r+0x52a>
 80084e2:	bf00      	nop
 80084e4:	0800ca70 	.word	0x0800ca70
 80084e8:	0800ca48 	.word	0x0800ca48
 80084ec:	3ff00000 	.word	0x3ff00000
 80084f0:	40240000 	.word	0x40240000
 80084f4:	401c0000 	.word	0x401c0000
 80084f8:	40140000 	.word	0x40140000
 80084fc:	3fe00000 	.word	0x3fe00000
 8008500:	4630      	mov	r0, r6
 8008502:	4639      	mov	r1, r7
 8008504:	f7f7 fff2 	bl	80004ec <__aeabi_dmul>
 8008508:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800850a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800850e:	9c08      	ldr	r4, [sp, #32]
 8008510:	9314      	str	r3, [sp, #80]	; 0x50
 8008512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008516:	f7f8 fa99 	bl	8000a4c <__aeabi_d2iz>
 800851a:	9015      	str	r0, [sp, #84]	; 0x54
 800851c:	f7f7 ff7c 	bl	8000418 <__aeabi_i2d>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008528:	f7f7 fe28 	bl	800017c <__aeabi_dsub>
 800852c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800852e:	4606      	mov	r6, r0
 8008530:	3330      	adds	r3, #48	; 0x30
 8008532:	f804 3b01 	strb.w	r3, [r4], #1
 8008536:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008538:	460f      	mov	r7, r1
 800853a:	429c      	cmp	r4, r3
 800853c:	f04f 0200 	mov.w	r2, #0
 8008540:	d124      	bne.n	800858c <_dtoa_r+0x64c>
 8008542:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008546:	4bb3      	ldr	r3, [pc, #716]	; (8008814 <_dtoa_r+0x8d4>)
 8008548:	f7f7 fe1a 	bl	8000180 <__adddf3>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	4630      	mov	r0, r6
 8008552:	4639      	mov	r1, r7
 8008554:	f7f8 fa5a 	bl	8000a0c <__aeabi_dcmpgt>
 8008558:	2800      	cmp	r0, #0
 800855a:	d162      	bne.n	8008622 <_dtoa_r+0x6e2>
 800855c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008560:	2000      	movs	r0, #0
 8008562:	49ac      	ldr	r1, [pc, #688]	; (8008814 <_dtoa_r+0x8d4>)
 8008564:	f7f7 fe0a 	bl	800017c <__aeabi_dsub>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	4630      	mov	r0, r6
 800856e:	4639      	mov	r1, r7
 8008570:	f7f8 fa2e 	bl	80009d0 <__aeabi_dcmplt>
 8008574:	2800      	cmp	r0, #0
 8008576:	f43f af1d 	beq.w	80083b4 <_dtoa_r+0x474>
 800857a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800857c:	1e7b      	subs	r3, r7, #1
 800857e:	9314      	str	r3, [sp, #80]	; 0x50
 8008580:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008584:	2b30      	cmp	r3, #48	; 0x30
 8008586:	d0f8      	beq.n	800857a <_dtoa_r+0x63a>
 8008588:	46c1      	mov	r9, r8
 800858a:	e03a      	b.n	8008602 <_dtoa_r+0x6c2>
 800858c:	4ba2      	ldr	r3, [pc, #648]	; (8008818 <_dtoa_r+0x8d8>)
 800858e:	f7f7 ffad 	bl	80004ec <__aeabi_dmul>
 8008592:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008596:	e7bc      	b.n	8008512 <_dtoa_r+0x5d2>
 8008598:	9f08      	ldr	r7, [sp, #32]
 800859a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800859e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085a2:	f7f8 f8cd 	bl	8000740 <__aeabi_ddiv>
 80085a6:	f7f8 fa51 	bl	8000a4c <__aeabi_d2iz>
 80085aa:	4604      	mov	r4, r0
 80085ac:	f7f7 ff34 	bl	8000418 <__aeabi_i2d>
 80085b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085b4:	f7f7 ff9a 	bl	80004ec <__aeabi_dmul>
 80085b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80085bc:	460b      	mov	r3, r1
 80085be:	4602      	mov	r2, r0
 80085c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085c4:	f7f7 fdda 	bl	800017c <__aeabi_dsub>
 80085c8:	f807 6b01 	strb.w	r6, [r7], #1
 80085cc:	9e08      	ldr	r6, [sp, #32]
 80085ce:	9b02      	ldr	r3, [sp, #8]
 80085d0:	1bbe      	subs	r6, r7, r6
 80085d2:	42b3      	cmp	r3, r6
 80085d4:	d13a      	bne.n	800864c <_dtoa_r+0x70c>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	f7f7 fdd1 	bl	8000180 <__adddf3>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085ea:	f7f8 fa0f 	bl	8000a0c <__aeabi_dcmpgt>
 80085ee:	bb58      	cbnz	r0, 8008648 <_dtoa_r+0x708>
 80085f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085f8:	f7f8 f9e0 	bl	80009bc <__aeabi_dcmpeq>
 80085fc:	b108      	cbz	r0, 8008602 <_dtoa_r+0x6c2>
 80085fe:	07e1      	lsls	r1, r4, #31
 8008600:	d422      	bmi.n	8008648 <_dtoa_r+0x708>
 8008602:	4628      	mov	r0, r5
 8008604:	4651      	mov	r1, sl
 8008606:	f000 fe6d 	bl	80092e4 <_Bfree>
 800860a:	2300      	movs	r3, #0
 800860c:	703b      	strb	r3, [r7, #0]
 800860e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008610:	f109 0001 	add.w	r0, r9, #1
 8008614:	6018      	str	r0, [r3, #0]
 8008616:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008618:	2b00      	cmp	r3, #0
 800861a:	f43f acdf 	beq.w	8007fdc <_dtoa_r+0x9c>
 800861e:	601f      	str	r7, [r3, #0]
 8008620:	e4dc      	b.n	8007fdc <_dtoa_r+0x9c>
 8008622:	4627      	mov	r7, r4
 8008624:	463b      	mov	r3, r7
 8008626:	461f      	mov	r7, r3
 8008628:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800862c:	2a39      	cmp	r2, #57	; 0x39
 800862e:	d107      	bne.n	8008640 <_dtoa_r+0x700>
 8008630:	9a08      	ldr	r2, [sp, #32]
 8008632:	429a      	cmp	r2, r3
 8008634:	d1f7      	bne.n	8008626 <_dtoa_r+0x6e6>
 8008636:	2230      	movs	r2, #48	; 0x30
 8008638:	9908      	ldr	r1, [sp, #32]
 800863a:	f108 0801 	add.w	r8, r8, #1
 800863e:	700a      	strb	r2, [r1, #0]
 8008640:	781a      	ldrb	r2, [r3, #0]
 8008642:	3201      	adds	r2, #1
 8008644:	701a      	strb	r2, [r3, #0]
 8008646:	e79f      	b.n	8008588 <_dtoa_r+0x648>
 8008648:	46c8      	mov	r8, r9
 800864a:	e7eb      	b.n	8008624 <_dtoa_r+0x6e4>
 800864c:	2200      	movs	r2, #0
 800864e:	4b72      	ldr	r3, [pc, #456]	; (8008818 <_dtoa_r+0x8d8>)
 8008650:	f7f7 ff4c 	bl	80004ec <__aeabi_dmul>
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800865c:	2200      	movs	r2, #0
 800865e:	2300      	movs	r3, #0
 8008660:	f7f8 f9ac 	bl	80009bc <__aeabi_dcmpeq>
 8008664:	2800      	cmp	r0, #0
 8008666:	d098      	beq.n	800859a <_dtoa_r+0x65a>
 8008668:	e7cb      	b.n	8008602 <_dtoa_r+0x6c2>
 800866a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800866c:	2a00      	cmp	r2, #0
 800866e:	f000 80cd 	beq.w	800880c <_dtoa_r+0x8cc>
 8008672:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008674:	2a01      	cmp	r2, #1
 8008676:	f300 80af 	bgt.w	80087d8 <_dtoa_r+0x898>
 800867a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800867c:	2a00      	cmp	r2, #0
 800867e:	f000 80a7 	beq.w	80087d0 <_dtoa_r+0x890>
 8008682:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008686:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008688:	9f06      	ldr	r7, [sp, #24]
 800868a:	9a06      	ldr	r2, [sp, #24]
 800868c:	2101      	movs	r1, #1
 800868e:	441a      	add	r2, r3
 8008690:	9206      	str	r2, [sp, #24]
 8008692:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008694:	4628      	mov	r0, r5
 8008696:	441a      	add	r2, r3
 8008698:	9209      	str	r2, [sp, #36]	; 0x24
 800869a:	f000 ff27 	bl	80094ec <__i2b>
 800869e:	4606      	mov	r6, r0
 80086a0:	2f00      	cmp	r7, #0
 80086a2:	dd0c      	ble.n	80086be <_dtoa_r+0x77e>
 80086a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	dd09      	ble.n	80086be <_dtoa_r+0x77e>
 80086aa:	42bb      	cmp	r3, r7
 80086ac:	bfa8      	it	ge
 80086ae:	463b      	movge	r3, r7
 80086b0:	9a06      	ldr	r2, [sp, #24]
 80086b2:	1aff      	subs	r7, r7, r3
 80086b4:	1ad2      	subs	r2, r2, r3
 80086b6:	9206      	str	r2, [sp, #24]
 80086b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	9309      	str	r3, [sp, #36]	; 0x24
 80086be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c0:	b1f3      	cbz	r3, 8008700 <_dtoa_r+0x7c0>
 80086c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 80a9 	beq.w	800881c <_dtoa_r+0x8dc>
 80086ca:	2c00      	cmp	r4, #0
 80086cc:	dd10      	ble.n	80086f0 <_dtoa_r+0x7b0>
 80086ce:	4631      	mov	r1, r6
 80086d0:	4622      	mov	r2, r4
 80086d2:	4628      	mov	r0, r5
 80086d4:	f000 ffc4 	bl	8009660 <__pow5mult>
 80086d8:	4652      	mov	r2, sl
 80086da:	4601      	mov	r1, r0
 80086dc:	4606      	mov	r6, r0
 80086de:	4628      	mov	r0, r5
 80086e0:	f000 ff1a 	bl	8009518 <__multiply>
 80086e4:	4680      	mov	r8, r0
 80086e6:	4651      	mov	r1, sl
 80086e8:	4628      	mov	r0, r5
 80086ea:	f000 fdfb 	bl	80092e4 <_Bfree>
 80086ee:	46c2      	mov	sl, r8
 80086f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086f2:	1b1a      	subs	r2, r3, r4
 80086f4:	d004      	beq.n	8008700 <_dtoa_r+0x7c0>
 80086f6:	4651      	mov	r1, sl
 80086f8:	4628      	mov	r0, r5
 80086fa:	f000 ffb1 	bl	8009660 <__pow5mult>
 80086fe:	4682      	mov	sl, r0
 8008700:	2101      	movs	r1, #1
 8008702:	4628      	mov	r0, r5
 8008704:	f000 fef2 	bl	80094ec <__i2b>
 8008708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800870a:	4604      	mov	r4, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	f340 8087 	ble.w	8008820 <_dtoa_r+0x8e0>
 8008712:	461a      	mov	r2, r3
 8008714:	4601      	mov	r1, r0
 8008716:	4628      	mov	r0, r5
 8008718:	f000 ffa2 	bl	8009660 <__pow5mult>
 800871c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800871e:	4604      	mov	r4, r0
 8008720:	2b01      	cmp	r3, #1
 8008722:	f340 8080 	ble.w	8008826 <_dtoa_r+0x8e6>
 8008726:	f04f 0800 	mov.w	r8, #0
 800872a:	6923      	ldr	r3, [r4, #16]
 800872c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008730:	6918      	ldr	r0, [r3, #16]
 8008732:	f000 fe8d 	bl	8009450 <__hi0bits>
 8008736:	f1c0 0020 	rsb	r0, r0, #32
 800873a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800873c:	4418      	add	r0, r3
 800873e:	f010 001f 	ands.w	r0, r0, #31
 8008742:	f000 8092 	beq.w	800886a <_dtoa_r+0x92a>
 8008746:	f1c0 0320 	rsb	r3, r0, #32
 800874a:	2b04      	cmp	r3, #4
 800874c:	f340 808a 	ble.w	8008864 <_dtoa_r+0x924>
 8008750:	f1c0 001c 	rsb	r0, r0, #28
 8008754:	9b06      	ldr	r3, [sp, #24]
 8008756:	4407      	add	r7, r0
 8008758:	4403      	add	r3, r0
 800875a:	9306      	str	r3, [sp, #24]
 800875c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800875e:	4403      	add	r3, r0
 8008760:	9309      	str	r3, [sp, #36]	; 0x24
 8008762:	9b06      	ldr	r3, [sp, #24]
 8008764:	2b00      	cmp	r3, #0
 8008766:	dd05      	ble.n	8008774 <_dtoa_r+0x834>
 8008768:	4651      	mov	r1, sl
 800876a:	461a      	mov	r2, r3
 800876c:	4628      	mov	r0, r5
 800876e:	f000 ffd1 	bl	8009714 <__lshift>
 8008772:	4682      	mov	sl, r0
 8008774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008776:	2b00      	cmp	r3, #0
 8008778:	dd05      	ble.n	8008786 <_dtoa_r+0x846>
 800877a:	4621      	mov	r1, r4
 800877c:	461a      	mov	r2, r3
 800877e:	4628      	mov	r0, r5
 8008780:	f000 ffc8 	bl	8009714 <__lshift>
 8008784:	4604      	mov	r4, r0
 8008786:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008788:	2b00      	cmp	r3, #0
 800878a:	d070      	beq.n	800886e <_dtoa_r+0x92e>
 800878c:	4621      	mov	r1, r4
 800878e:	4650      	mov	r0, sl
 8008790:	f001 f82c 	bl	80097ec <__mcmp>
 8008794:	2800      	cmp	r0, #0
 8008796:	da6a      	bge.n	800886e <_dtoa_r+0x92e>
 8008798:	2300      	movs	r3, #0
 800879a:	4651      	mov	r1, sl
 800879c:	220a      	movs	r2, #10
 800879e:	4628      	mov	r0, r5
 80087a0:	f000 fdc2 	bl	8009328 <__multadd>
 80087a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087a6:	4682      	mov	sl, r0
 80087a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 8193 	beq.w	8008ad8 <_dtoa_r+0xb98>
 80087b2:	4631      	mov	r1, r6
 80087b4:	2300      	movs	r3, #0
 80087b6:	220a      	movs	r2, #10
 80087b8:	4628      	mov	r0, r5
 80087ba:	f000 fdb5 	bl	8009328 <__multadd>
 80087be:	f1bb 0f00 	cmp.w	fp, #0
 80087c2:	4606      	mov	r6, r0
 80087c4:	f300 8093 	bgt.w	80088ee <_dtoa_r+0x9ae>
 80087c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	dc57      	bgt.n	800887e <_dtoa_r+0x93e>
 80087ce:	e08e      	b.n	80088ee <_dtoa_r+0x9ae>
 80087d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80087d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80087d6:	e756      	b.n	8008686 <_dtoa_r+0x746>
 80087d8:	9b02      	ldr	r3, [sp, #8]
 80087da:	1e5c      	subs	r4, r3, #1
 80087dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087de:	42a3      	cmp	r3, r4
 80087e0:	bfb7      	itett	lt
 80087e2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80087e4:	1b1c      	subge	r4, r3, r4
 80087e6:	1ae2      	sublt	r2, r4, r3
 80087e8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80087ea:	bfbe      	ittt	lt
 80087ec:	940a      	strlt	r4, [sp, #40]	; 0x28
 80087ee:	189b      	addlt	r3, r3, r2
 80087f0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80087f2:	9b02      	ldr	r3, [sp, #8]
 80087f4:	bfb8      	it	lt
 80087f6:	2400      	movlt	r4, #0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	bfbb      	ittet	lt
 80087fc:	9b06      	ldrlt	r3, [sp, #24]
 80087fe:	9a02      	ldrlt	r2, [sp, #8]
 8008800:	9f06      	ldrge	r7, [sp, #24]
 8008802:	1a9f      	sublt	r7, r3, r2
 8008804:	bfac      	ite	ge
 8008806:	9b02      	ldrge	r3, [sp, #8]
 8008808:	2300      	movlt	r3, #0
 800880a:	e73e      	b.n	800868a <_dtoa_r+0x74a>
 800880c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800880e:	9f06      	ldr	r7, [sp, #24]
 8008810:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008812:	e745      	b.n	80086a0 <_dtoa_r+0x760>
 8008814:	3fe00000 	.word	0x3fe00000
 8008818:	40240000 	.word	0x40240000
 800881c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800881e:	e76a      	b.n	80086f6 <_dtoa_r+0x7b6>
 8008820:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008822:	2b01      	cmp	r3, #1
 8008824:	dc19      	bgt.n	800885a <_dtoa_r+0x91a>
 8008826:	9b04      	ldr	r3, [sp, #16]
 8008828:	b9bb      	cbnz	r3, 800885a <_dtoa_r+0x91a>
 800882a:	9b05      	ldr	r3, [sp, #20]
 800882c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008830:	b99b      	cbnz	r3, 800885a <_dtoa_r+0x91a>
 8008832:	9b05      	ldr	r3, [sp, #20]
 8008834:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008838:	0d1b      	lsrs	r3, r3, #20
 800883a:	051b      	lsls	r3, r3, #20
 800883c:	b183      	cbz	r3, 8008860 <_dtoa_r+0x920>
 800883e:	f04f 0801 	mov.w	r8, #1
 8008842:	9b06      	ldr	r3, [sp, #24]
 8008844:	3301      	adds	r3, #1
 8008846:	9306      	str	r3, [sp, #24]
 8008848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800884a:	3301      	adds	r3, #1
 800884c:	9309      	str	r3, [sp, #36]	; 0x24
 800884e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008850:	2b00      	cmp	r3, #0
 8008852:	f47f af6a 	bne.w	800872a <_dtoa_r+0x7ea>
 8008856:	2001      	movs	r0, #1
 8008858:	e76f      	b.n	800873a <_dtoa_r+0x7fa>
 800885a:	f04f 0800 	mov.w	r8, #0
 800885e:	e7f6      	b.n	800884e <_dtoa_r+0x90e>
 8008860:	4698      	mov	r8, r3
 8008862:	e7f4      	b.n	800884e <_dtoa_r+0x90e>
 8008864:	f43f af7d 	beq.w	8008762 <_dtoa_r+0x822>
 8008868:	4618      	mov	r0, r3
 800886a:	301c      	adds	r0, #28
 800886c:	e772      	b.n	8008754 <_dtoa_r+0x814>
 800886e:	9b02      	ldr	r3, [sp, #8]
 8008870:	2b00      	cmp	r3, #0
 8008872:	dc36      	bgt.n	80088e2 <_dtoa_r+0x9a2>
 8008874:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008876:	2b02      	cmp	r3, #2
 8008878:	dd33      	ble.n	80088e2 <_dtoa_r+0x9a2>
 800887a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800887e:	f1bb 0f00 	cmp.w	fp, #0
 8008882:	d10d      	bne.n	80088a0 <_dtoa_r+0x960>
 8008884:	4621      	mov	r1, r4
 8008886:	465b      	mov	r3, fp
 8008888:	2205      	movs	r2, #5
 800888a:	4628      	mov	r0, r5
 800888c:	f000 fd4c 	bl	8009328 <__multadd>
 8008890:	4601      	mov	r1, r0
 8008892:	4604      	mov	r4, r0
 8008894:	4650      	mov	r0, sl
 8008896:	f000 ffa9 	bl	80097ec <__mcmp>
 800889a:	2800      	cmp	r0, #0
 800889c:	f73f adb6 	bgt.w	800840c <_dtoa_r+0x4cc>
 80088a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088a2:	9f08      	ldr	r7, [sp, #32]
 80088a4:	ea6f 0903 	mvn.w	r9, r3
 80088a8:	f04f 0800 	mov.w	r8, #0
 80088ac:	4621      	mov	r1, r4
 80088ae:	4628      	mov	r0, r5
 80088b0:	f000 fd18 	bl	80092e4 <_Bfree>
 80088b4:	2e00      	cmp	r6, #0
 80088b6:	f43f aea4 	beq.w	8008602 <_dtoa_r+0x6c2>
 80088ba:	f1b8 0f00 	cmp.w	r8, #0
 80088be:	d005      	beq.n	80088cc <_dtoa_r+0x98c>
 80088c0:	45b0      	cmp	r8, r6
 80088c2:	d003      	beq.n	80088cc <_dtoa_r+0x98c>
 80088c4:	4641      	mov	r1, r8
 80088c6:	4628      	mov	r0, r5
 80088c8:	f000 fd0c 	bl	80092e4 <_Bfree>
 80088cc:	4631      	mov	r1, r6
 80088ce:	4628      	mov	r0, r5
 80088d0:	f000 fd08 	bl	80092e4 <_Bfree>
 80088d4:	e695      	b.n	8008602 <_dtoa_r+0x6c2>
 80088d6:	2400      	movs	r4, #0
 80088d8:	4626      	mov	r6, r4
 80088da:	e7e1      	b.n	80088a0 <_dtoa_r+0x960>
 80088dc:	46c1      	mov	r9, r8
 80088de:	4626      	mov	r6, r4
 80088e0:	e594      	b.n	800840c <_dtoa_r+0x4cc>
 80088e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088e4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 80fc 	beq.w	8008ae6 <_dtoa_r+0xba6>
 80088ee:	2f00      	cmp	r7, #0
 80088f0:	dd05      	ble.n	80088fe <_dtoa_r+0x9be>
 80088f2:	4631      	mov	r1, r6
 80088f4:	463a      	mov	r2, r7
 80088f6:	4628      	mov	r0, r5
 80088f8:	f000 ff0c 	bl	8009714 <__lshift>
 80088fc:	4606      	mov	r6, r0
 80088fe:	f1b8 0f00 	cmp.w	r8, #0
 8008902:	d05c      	beq.n	80089be <_dtoa_r+0xa7e>
 8008904:	4628      	mov	r0, r5
 8008906:	6871      	ldr	r1, [r6, #4]
 8008908:	f000 fcac 	bl	8009264 <_Balloc>
 800890c:	4607      	mov	r7, r0
 800890e:	b928      	cbnz	r0, 800891c <_dtoa_r+0x9dc>
 8008910:	4602      	mov	r2, r0
 8008912:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008916:	4b7e      	ldr	r3, [pc, #504]	; (8008b10 <_dtoa_r+0xbd0>)
 8008918:	f7ff bb26 	b.w	8007f68 <_dtoa_r+0x28>
 800891c:	6932      	ldr	r2, [r6, #16]
 800891e:	f106 010c 	add.w	r1, r6, #12
 8008922:	3202      	adds	r2, #2
 8008924:	0092      	lsls	r2, r2, #2
 8008926:	300c      	adds	r0, #12
 8008928:	f7fd ff36 	bl	8006798 <memcpy>
 800892c:	2201      	movs	r2, #1
 800892e:	4639      	mov	r1, r7
 8008930:	4628      	mov	r0, r5
 8008932:	f000 feef 	bl	8009714 <__lshift>
 8008936:	46b0      	mov	r8, r6
 8008938:	4606      	mov	r6, r0
 800893a:	9b08      	ldr	r3, [sp, #32]
 800893c:	3301      	adds	r3, #1
 800893e:	9302      	str	r3, [sp, #8]
 8008940:	9b08      	ldr	r3, [sp, #32]
 8008942:	445b      	add	r3, fp
 8008944:	930a      	str	r3, [sp, #40]	; 0x28
 8008946:	9b04      	ldr	r3, [sp, #16]
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	9309      	str	r3, [sp, #36]	; 0x24
 800894e:	9b02      	ldr	r3, [sp, #8]
 8008950:	4621      	mov	r1, r4
 8008952:	4650      	mov	r0, sl
 8008954:	f103 3bff 	add.w	fp, r3, #4294967295
 8008958:	f7ff fa64 	bl	8007e24 <quorem>
 800895c:	4603      	mov	r3, r0
 800895e:	4641      	mov	r1, r8
 8008960:	3330      	adds	r3, #48	; 0x30
 8008962:	9004      	str	r0, [sp, #16]
 8008964:	4650      	mov	r0, sl
 8008966:	930b      	str	r3, [sp, #44]	; 0x2c
 8008968:	f000 ff40 	bl	80097ec <__mcmp>
 800896c:	4632      	mov	r2, r6
 800896e:	9006      	str	r0, [sp, #24]
 8008970:	4621      	mov	r1, r4
 8008972:	4628      	mov	r0, r5
 8008974:	f000 ff56 	bl	8009824 <__mdiff>
 8008978:	68c2      	ldr	r2, [r0, #12]
 800897a:	4607      	mov	r7, r0
 800897c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800897e:	bb02      	cbnz	r2, 80089c2 <_dtoa_r+0xa82>
 8008980:	4601      	mov	r1, r0
 8008982:	4650      	mov	r0, sl
 8008984:	f000 ff32 	bl	80097ec <__mcmp>
 8008988:	4602      	mov	r2, r0
 800898a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800898c:	4639      	mov	r1, r7
 800898e:	4628      	mov	r0, r5
 8008990:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008994:	f000 fca6 	bl	80092e4 <_Bfree>
 8008998:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800899a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800899c:	9f02      	ldr	r7, [sp, #8]
 800899e:	ea43 0102 	orr.w	r1, r3, r2
 80089a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a4:	430b      	orrs	r3, r1
 80089a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089a8:	d10d      	bne.n	80089c6 <_dtoa_r+0xa86>
 80089aa:	2b39      	cmp	r3, #57	; 0x39
 80089ac:	d027      	beq.n	80089fe <_dtoa_r+0xabe>
 80089ae:	9a06      	ldr	r2, [sp, #24]
 80089b0:	2a00      	cmp	r2, #0
 80089b2:	dd01      	ble.n	80089b8 <_dtoa_r+0xa78>
 80089b4:	9b04      	ldr	r3, [sp, #16]
 80089b6:	3331      	adds	r3, #49	; 0x31
 80089b8:	f88b 3000 	strb.w	r3, [fp]
 80089bc:	e776      	b.n	80088ac <_dtoa_r+0x96c>
 80089be:	4630      	mov	r0, r6
 80089c0:	e7b9      	b.n	8008936 <_dtoa_r+0x9f6>
 80089c2:	2201      	movs	r2, #1
 80089c4:	e7e2      	b.n	800898c <_dtoa_r+0xa4c>
 80089c6:	9906      	ldr	r1, [sp, #24]
 80089c8:	2900      	cmp	r1, #0
 80089ca:	db04      	blt.n	80089d6 <_dtoa_r+0xa96>
 80089cc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80089ce:	4301      	orrs	r1, r0
 80089d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089d2:	4301      	orrs	r1, r0
 80089d4:	d120      	bne.n	8008a18 <_dtoa_r+0xad8>
 80089d6:	2a00      	cmp	r2, #0
 80089d8:	ddee      	ble.n	80089b8 <_dtoa_r+0xa78>
 80089da:	4651      	mov	r1, sl
 80089dc:	2201      	movs	r2, #1
 80089de:	4628      	mov	r0, r5
 80089e0:	9302      	str	r3, [sp, #8]
 80089e2:	f000 fe97 	bl	8009714 <__lshift>
 80089e6:	4621      	mov	r1, r4
 80089e8:	4682      	mov	sl, r0
 80089ea:	f000 feff 	bl	80097ec <__mcmp>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	9b02      	ldr	r3, [sp, #8]
 80089f2:	dc02      	bgt.n	80089fa <_dtoa_r+0xaba>
 80089f4:	d1e0      	bne.n	80089b8 <_dtoa_r+0xa78>
 80089f6:	07da      	lsls	r2, r3, #31
 80089f8:	d5de      	bpl.n	80089b8 <_dtoa_r+0xa78>
 80089fa:	2b39      	cmp	r3, #57	; 0x39
 80089fc:	d1da      	bne.n	80089b4 <_dtoa_r+0xa74>
 80089fe:	2339      	movs	r3, #57	; 0x39
 8008a00:	f88b 3000 	strb.w	r3, [fp]
 8008a04:	463b      	mov	r3, r7
 8008a06:	461f      	mov	r7, r3
 8008a08:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	2a39      	cmp	r2, #57	; 0x39
 8008a10:	d050      	beq.n	8008ab4 <_dtoa_r+0xb74>
 8008a12:	3201      	adds	r2, #1
 8008a14:	701a      	strb	r2, [r3, #0]
 8008a16:	e749      	b.n	80088ac <_dtoa_r+0x96c>
 8008a18:	2a00      	cmp	r2, #0
 8008a1a:	dd03      	ble.n	8008a24 <_dtoa_r+0xae4>
 8008a1c:	2b39      	cmp	r3, #57	; 0x39
 8008a1e:	d0ee      	beq.n	80089fe <_dtoa_r+0xabe>
 8008a20:	3301      	adds	r3, #1
 8008a22:	e7c9      	b.n	80089b8 <_dtoa_r+0xa78>
 8008a24:	9a02      	ldr	r2, [sp, #8]
 8008a26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a28:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008a2c:	428a      	cmp	r2, r1
 8008a2e:	d02a      	beq.n	8008a86 <_dtoa_r+0xb46>
 8008a30:	4651      	mov	r1, sl
 8008a32:	2300      	movs	r3, #0
 8008a34:	220a      	movs	r2, #10
 8008a36:	4628      	mov	r0, r5
 8008a38:	f000 fc76 	bl	8009328 <__multadd>
 8008a3c:	45b0      	cmp	r8, r6
 8008a3e:	4682      	mov	sl, r0
 8008a40:	f04f 0300 	mov.w	r3, #0
 8008a44:	f04f 020a 	mov.w	r2, #10
 8008a48:	4641      	mov	r1, r8
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	d107      	bne.n	8008a5e <_dtoa_r+0xb1e>
 8008a4e:	f000 fc6b 	bl	8009328 <__multadd>
 8008a52:	4680      	mov	r8, r0
 8008a54:	4606      	mov	r6, r0
 8008a56:	9b02      	ldr	r3, [sp, #8]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	9302      	str	r3, [sp, #8]
 8008a5c:	e777      	b.n	800894e <_dtoa_r+0xa0e>
 8008a5e:	f000 fc63 	bl	8009328 <__multadd>
 8008a62:	4631      	mov	r1, r6
 8008a64:	4680      	mov	r8, r0
 8008a66:	2300      	movs	r3, #0
 8008a68:	220a      	movs	r2, #10
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f000 fc5c 	bl	8009328 <__multadd>
 8008a70:	4606      	mov	r6, r0
 8008a72:	e7f0      	b.n	8008a56 <_dtoa_r+0xb16>
 8008a74:	f1bb 0f00 	cmp.w	fp, #0
 8008a78:	bfcc      	ite	gt
 8008a7a:	465f      	movgt	r7, fp
 8008a7c:	2701      	movle	r7, #1
 8008a7e:	f04f 0800 	mov.w	r8, #0
 8008a82:	9a08      	ldr	r2, [sp, #32]
 8008a84:	4417      	add	r7, r2
 8008a86:	4651      	mov	r1, sl
 8008a88:	2201      	movs	r2, #1
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	9302      	str	r3, [sp, #8]
 8008a8e:	f000 fe41 	bl	8009714 <__lshift>
 8008a92:	4621      	mov	r1, r4
 8008a94:	4682      	mov	sl, r0
 8008a96:	f000 fea9 	bl	80097ec <__mcmp>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	dcb2      	bgt.n	8008a04 <_dtoa_r+0xac4>
 8008a9e:	d102      	bne.n	8008aa6 <_dtoa_r+0xb66>
 8008aa0:	9b02      	ldr	r3, [sp, #8]
 8008aa2:	07db      	lsls	r3, r3, #31
 8008aa4:	d4ae      	bmi.n	8008a04 <_dtoa_r+0xac4>
 8008aa6:	463b      	mov	r3, r7
 8008aa8:	461f      	mov	r7, r3
 8008aaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008aae:	2a30      	cmp	r2, #48	; 0x30
 8008ab0:	d0fa      	beq.n	8008aa8 <_dtoa_r+0xb68>
 8008ab2:	e6fb      	b.n	80088ac <_dtoa_r+0x96c>
 8008ab4:	9a08      	ldr	r2, [sp, #32]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d1a5      	bne.n	8008a06 <_dtoa_r+0xac6>
 8008aba:	2331      	movs	r3, #49	; 0x31
 8008abc:	f109 0901 	add.w	r9, r9, #1
 8008ac0:	7013      	strb	r3, [r2, #0]
 8008ac2:	e6f3      	b.n	80088ac <_dtoa_r+0x96c>
 8008ac4:	4b13      	ldr	r3, [pc, #76]	; (8008b14 <_dtoa_r+0xbd4>)
 8008ac6:	f7ff baa7 	b.w	8008018 <_dtoa_r+0xd8>
 8008aca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f47f aa80 	bne.w	8007fd2 <_dtoa_r+0x92>
 8008ad2:	4b11      	ldr	r3, [pc, #68]	; (8008b18 <_dtoa_r+0xbd8>)
 8008ad4:	f7ff baa0 	b.w	8008018 <_dtoa_r+0xd8>
 8008ad8:	f1bb 0f00 	cmp.w	fp, #0
 8008adc:	dc03      	bgt.n	8008ae6 <_dtoa_r+0xba6>
 8008ade:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	f73f aecc 	bgt.w	800887e <_dtoa_r+0x93e>
 8008ae6:	9f08      	ldr	r7, [sp, #32]
 8008ae8:	4621      	mov	r1, r4
 8008aea:	4650      	mov	r0, sl
 8008aec:	f7ff f99a 	bl	8007e24 <quorem>
 8008af0:	9a08      	ldr	r2, [sp, #32]
 8008af2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008af6:	f807 3b01 	strb.w	r3, [r7], #1
 8008afa:	1aba      	subs	r2, r7, r2
 8008afc:	4593      	cmp	fp, r2
 8008afe:	ddb9      	ble.n	8008a74 <_dtoa_r+0xb34>
 8008b00:	4651      	mov	r1, sl
 8008b02:	2300      	movs	r3, #0
 8008b04:	220a      	movs	r2, #10
 8008b06:	4628      	mov	r0, r5
 8008b08:	f000 fc0e 	bl	8009328 <__multadd>
 8008b0c:	4682      	mov	sl, r0
 8008b0e:	e7eb      	b.n	8008ae8 <_dtoa_r+0xba8>
 8008b10:	0800c958 	.word	0x0800c958
 8008b14:	0800c7c0 	.word	0x0800c7c0
 8008b18:	0800c8ec 	.word	0x0800c8ec

08008b1c <fiprintf>:
 8008b1c:	b40e      	push	{r1, r2, r3}
 8008b1e:	b503      	push	{r0, r1, lr}
 8008b20:	4601      	mov	r1, r0
 8008b22:	ab03      	add	r3, sp, #12
 8008b24:	4805      	ldr	r0, [pc, #20]	; (8008b3c <fiprintf+0x20>)
 8008b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b2a:	6800      	ldr	r0, [r0, #0]
 8008b2c:	9301      	str	r3, [sp, #4]
 8008b2e:	f001 fa89 	bl	800a044 <_vfiprintf_r>
 8008b32:	b002      	add	sp, #8
 8008b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b38:	b003      	add	sp, #12
 8008b3a:	4770      	bx	lr
 8008b3c:	2000003c 	.word	0x2000003c

08008b40 <rshift>:
 8008b40:	6903      	ldr	r3, [r0, #16]
 8008b42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008b4a:	f100 0414 	add.w	r4, r0, #20
 8008b4e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b52:	dd46      	ble.n	8008be2 <rshift+0xa2>
 8008b54:	f011 011f 	ands.w	r1, r1, #31
 8008b58:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b5c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b60:	d10c      	bne.n	8008b7c <rshift+0x3c>
 8008b62:	4629      	mov	r1, r5
 8008b64:	f100 0710 	add.w	r7, r0, #16
 8008b68:	42b1      	cmp	r1, r6
 8008b6a:	d335      	bcc.n	8008bd8 <rshift+0x98>
 8008b6c:	1a9b      	subs	r3, r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	1eea      	subs	r2, r5, #3
 8008b72:	4296      	cmp	r6, r2
 8008b74:	bf38      	it	cc
 8008b76:	2300      	movcc	r3, #0
 8008b78:	4423      	add	r3, r4
 8008b7a:	e015      	b.n	8008ba8 <rshift+0x68>
 8008b7c:	46a1      	mov	r9, r4
 8008b7e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b82:	f1c1 0820 	rsb	r8, r1, #32
 8008b86:	40cf      	lsrs	r7, r1
 8008b88:	f105 0e04 	add.w	lr, r5, #4
 8008b8c:	4576      	cmp	r6, lr
 8008b8e:	46f4      	mov	ip, lr
 8008b90:	d816      	bhi.n	8008bc0 <rshift+0x80>
 8008b92:	1a9b      	subs	r3, r3, r2
 8008b94:	009a      	lsls	r2, r3, #2
 8008b96:	3a04      	subs	r2, #4
 8008b98:	3501      	adds	r5, #1
 8008b9a:	42ae      	cmp	r6, r5
 8008b9c:	bf38      	it	cc
 8008b9e:	2200      	movcc	r2, #0
 8008ba0:	18a3      	adds	r3, r4, r2
 8008ba2:	50a7      	str	r7, [r4, r2]
 8008ba4:	b107      	cbz	r7, 8008ba8 <rshift+0x68>
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	42a3      	cmp	r3, r4
 8008baa:	eba3 0204 	sub.w	r2, r3, r4
 8008bae:	bf08      	it	eq
 8008bb0:	2300      	moveq	r3, #0
 8008bb2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008bb6:	6102      	str	r2, [r0, #16]
 8008bb8:	bf08      	it	eq
 8008bba:	6143      	streq	r3, [r0, #20]
 8008bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bc0:	f8dc c000 	ldr.w	ip, [ip]
 8008bc4:	fa0c fc08 	lsl.w	ip, ip, r8
 8008bc8:	ea4c 0707 	orr.w	r7, ip, r7
 8008bcc:	f849 7b04 	str.w	r7, [r9], #4
 8008bd0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008bd4:	40cf      	lsrs	r7, r1
 8008bd6:	e7d9      	b.n	8008b8c <rshift+0x4c>
 8008bd8:	f851 cb04 	ldr.w	ip, [r1], #4
 8008bdc:	f847 cf04 	str.w	ip, [r7, #4]!
 8008be0:	e7c2      	b.n	8008b68 <rshift+0x28>
 8008be2:	4623      	mov	r3, r4
 8008be4:	e7e0      	b.n	8008ba8 <rshift+0x68>

08008be6 <__hexdig_fun>:
 8008be6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008bea:	2b09      	cmp	r3, #9
 8008bec:	d802      	bhi.n	8008bf4 <__hexdig_fun+0xe>
 8008bee:	3820      	subs	r0, #32
 8008bf0:	b2c0      	uxtb	r0, r0
 8008bf2:	4770      	bx	lr
 8008bf4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008bf8:	2b05      	cmp	r3, #5
 8008bfa:	d801      	bhi.n	8008c00 <__hexdig_fun+0x1a>
 8008bfc:	3847      	subs	r0, #71	; 0x47
 8008bfe:	e7f7      	b.n	8008bf0 <__hexdig_fun+0xa>
 8008c00:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008c04:	2b05      	cmp	r3, #5
 8008c06:	d801      	bhi.n	8008c0c <__hexdig_fun+0x26>
 8008c08:	3827      	subs	r0, #39	; 0x27
 8008c0a:	e7f1      	b.n	8008bf0 <__hexdig_fun+0xa>
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	4770      	bx	lr

08008c10 <__gethex>:
 8008c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c14:	b08b      	sub	sp, #44	; 0x2c
 8008c16:	9306      	str	r3, [sp, #24]
 8008c18:	4bb9      	ldr	r3, [pc, #740]	; (8008f00 <__gethex+0x2f0>)
 8008c1a:	9002      	str	r0, [sp, #8]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	468b      	mov	fp, r1
 8008c20:	4618      	mov	r0, r3
 8008c22:	4690      	mov	r8, r2
 8008c24:	9303      	str	r3, [sp, #12]
 8008c26:	f7f7 fa9d 	bl	8000164 <strlen>
 8008c2a:	4682      	mov	sl, r0
 8008c2c:	9b03      	ldr	r3, [sp, #12]
 8008c2e:	f8db 2000 	ldr.w	r2, [fp]
 8008c32:	4403      	add	r3, r0
 8008c34:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008c38:	9307      	str	r3, [sp, #28]
 8008c3a:	1c93      	adds	r3, r2, #2
 8008c3c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008c40:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008c44:	32fe      	adds	r2, #254	; 0xfe
 8008c46:	18d1      	adds	r1, r2, r3
 8008c48:	461f      	mov	r7, r3
 8008c4a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c4e:	9101      	str	r1, [sp, #4]
 8008c50:	2830      	cmp	r0, #48	; 0x30
 8008c52:	d0f8      	beq.n	8008c46 <__gethex+0x36>
 8008c54:	f7ff ffc7 	bl	8008be6 <__hexdig_fun>
 8008c58:	4604      	mov	r4, r0
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d13a      	bne.n	8008cd4 <__gethex+0xc4>
 8008c5e:	4652      	mov	r2, sl
 8008c60:	4638      	mov	r0, r7
 8008c62:	9903      	ldr	r1, [sp, #12]
 8008c64:	f001 fb34 	bl	800a2d0 <strncmp>
 8008c68:	4605      	mov	r5, r0
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	d166      	bne.n	8008d3c <__gethex+0x12c>
 8008c6e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008c72:	eb07 060a 	add.w	r6, r7, sl
 8008c76:	f7ff ffb6 	bl	8008be6 <__hexdig_fun>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	d060      	beq.n	8008d40 <__gethex+0x130>
 8008c7e:	4633      	mov	r3, r6
 8008c80:	7818      	ldrb	r0, [r3, #0]
 8008c82:	461f      	mov	r7, r3
 8008c84:	2830      	cmp	r0, #48	; 0x30
 8008c86:	f103 0301 	add.w	r3, r3, #1
 8008c8a:	d0f9      	beq.n	8008c80 <__gethex+0x70>
 8008c8c:	f7ff ffab 	bl	8008be6 <__hexdig_fun>
 8008c90:	2301      	movs	r3, #1
 8008c92:	fab0 f480 	clz	r4, r0
 8008c96:	4635      	mov	r5, r6
 8008c98:	0964      	lsrs	r4, r4, #5
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	463a      	mov	r2, r7
 8008c9e:	4616      	mov	r6, r2
 8008ca0:	7830      	ldrb	r0, [r6, #0]
 8008ca2:	3201      	adds	r2, #1
 8008ca4:	f7ff ff9f 	bl	8008be6 <__hexdig_fun>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d1f8      	bne.n	8008c9e <__gethex+0x8e>
 8008cac:	4652      	mov	r2, sl
 8008cae:	4630      	mov	r0, r6
 8008cb0:	9903      	ldr	r1, [sp, #12]
 8008cb2:	f001 fb0d 	bl	800a2d0 <strncmp>
 8008cb6:	b980      	cbnz	r0, 8008cda <__gethex+0xca>
 8008cb8:	b94d      	cbnz	r5, 8008cce <__gethex+0xbe>
 8008cba:	eb06 050a 	add.w	r5, r6, sl
 8008cbe:	462a      	mov	r2, r5
 8008cc0:	4616      	mov	r6, r2
 8008cc2:	7830      	ldrb	r0, [r6, #0]
 8008cc4:	3201      	adds	r2, #1
 8008cc6:	f7ff ff8e 	bl	8008be6 <__hexdig_fun>
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	d1f8      	bne.n	8008cc0 <__gethex+0xb0>
 8008cce:	1bad      	subs	r5, r5, r6
 8008cd0:	00ad      	lsls	r5, r5, #2
 8008cd2:	e004      	b.n	8008cde <__gethex+0xce>
 8008cd4:	2400      	movs	r4, #0
 8008cd6:	4625      	mov	r5, r4
 8008cd8:	e7e0      	b.n	8008c9c <__gethex+0x8c>
 8008cda:	2d00      	cmp	r5, #0
 8008cdc:	d1f7      	bne.n	8008cce <__gethex+0xbe>
 8008cde:	7833      	ldrb	r3, [r6, #0]
 8008ce0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ce4:	2b50      	cmp	r3, #80	; 0x50
 8008ce6:	d139      	bne.n	8008d5c <__gethex+0x14c>
 8008ce8:	7873      	ldrb	r3, [r6, #1]
 8008cea:	2b2b      	cmp	r3, #43	; 0x2b
 8008cec:	d02a      	beq.n	8008d44 <__gethex+0x134>
 8008cee:	2b2d      	cmp	r3, #45	; 0x2d
 8008cf0:	d02c      	beq.n	8008d4c <__gethex+0x13c>
 8008cf2:	f04f 0900 	mov.w	r9, #0
 8008cf6:	1c71      	adds	r1, r6, #1
 8008cf8:	7808      	ldrb	r0, [r1, #0]
 8008cfa:	f7ff ff74 	bl	8008be6 <__hexdig_fun>
 8008cfe:	1e43      	subs	r3, r0, #1
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b18      	cmp	r3, #24
 8008d04:	d82a      	bhi.n	8008d5c <__gethex+0x14c>
 8008d06:	f1a0 0210 	sub.w	r2, r0, #16
 8008d0a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d0e:	f7ff ff6a 	bl	8008be6 <__hexdig_fun>
 8008d12:	1e43      	subs	r3, r0, #1
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b18      	cmp	r3, #24
 8008d18:	d91b      	bls.n	8008d52 <__gethex+0x142>
 8008d1a:	f1b9 0f00 	cmp.w	r9, #0
 8008d1e:	d000      	beq.n	8008d22 <__gethex+0x112>
 8008d20:	4252      	negs	r2, r2
 8008d22:	4415      	add	r5, r2
 8008d24:	f8cb 1000 	str.w	r1, [fp]
 8008d28:	b1d4      	cbz	r4, 8008d60 <__gethex+0x150>
 8008d2a:	9b01      	ldr	r3, [sp, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	bf14      	ite	ne
 8008d30:	2700      	movne	r7, #0
 8008d32:	2706      	moveq	r7, #6
 8008d34:	4638      	mov	r0, r7
 8008d36:	b00b      	add	sp, #44	; 0x2c
 8008d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3c:	463e      	mov	r6, r7
 8008d3e:	4625      	mov	r5, r4
 8008d40:	2401      	movs	r4, #1
 8008d42:	e7cc      	b.n	8008cde <__gethex+0xce>
 8008d44:	f04f 0900 	mov.w	r9, #0
 8008d48:	1cb1      	adds	r1, r6, #2
 8008d4a:	e7d5      	b.n	8008cf8 <__gethex+0xe8>
 8008d4c:	f04f 0901 	mov.w	r9, #1
 8008d50:	e7fa      	b.n	8008d48 <__gethex+0x138>
 8008d52:	230a      	movs	r3, #10
 8008d54:	fb03 0202 	mla	r2, r3, r2, r0
 8008d58:	3a10      	subs	r2, #16
 8008d5a:	e7d6      	b.n	8008d0a <__gethex+0xfa>
 8008d5c:	4631      	mov	r1, r6
 8008d5e:	e7e1      	b.n	8008d24 <__gethex+0x114>
 8008d60:	4621      	mov	r1, r4
 8008d62:	1bf3      	subs	r3, r6, r7
 8008d64:	3b01      	subs	r3, #1
 8008d66:	2b07      	cmp	r3, #7
 8008d68:	dc0a      	bgt.n	8008d80 <__gethex+0x170>
 8008d6a:	9802      	ldr	r0, [sp, #8]
 8008d6c:	f000 fa7a 	bl	8009264 <_Balloc>
 8008d70:	4604      	mov	r4, r0
 8008d72:	b940      	cbnz	r0, 8008d86 <__gethex+0x176>
 8008d74:	4602      	mov	r2, r0
 8008d76:	21de      	movs	r1, #222	; 0xde
 8008d78:	4b62      	ldr	r3, [pc, #392]	; (8008f04 <__gethex+0x2f4>)
 8008d7a:	4863      	ldr	r0, [pc, #396]	; (8008f08 <__gethex+0x2f8>)
 8008d7c:	f7ff f834 	bl	8007de8 <__assert_func>
 8008d80:	3101      	adds	r1, #1
 8008d82:	105b      	asrs	r3, r3, #1
 8008d84:	e7ef      	b.n	8008d66 <__gethex+0x156>
 8008d86:	f04f 0b00 	mov.w	fp, #0
 8008d8a:	f100 0914 	add.w	r9, r0, #20
 8008d8e:	f1ca 0301 	rsb	r3, sl, #1
 8008d92:	f8cd 9010 	str.w	r9, [sp, #16]
 8008d96:	f8cd b004 	str.w	fp, [sp, #4]
 8008d9a:	9308      	str	r3, [sp, #32]
 8008d9c:	42b7      	cmp	r7, r6
 8008d9e:	d33f      	bcc.n	8008e20 <__gethex+0x210>
 8008da0:	9f04      	ldr	r7, [sp, #16]
 8008da2:	9b01      	ldr	r3, [sp, #4]
 8008da4:	f847 3b04 	str.w	r3, [r7], #4
 8008da8:	eba7 0709 	sub.w	r7, r7, r9
 8008dac:	10bf      	asrs	r7, r7, #2
 8008dae:	6127      	str	r7, [r4, #16]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 fb4d 	bl	8009450 <__hi0bits>
 8008db6:	017f      	lsls	r7, r7, #5
 8008db8:	f8d8 6000 	ldr.w	r6, [r8]
 8008dbc:	1a3f      	subs	r7, r7, r0
 8008dbe:	42b7      	cmp	r7, r6
 8008dc0:	dd62      	ble.n	8008e88 <__gethex+0x278>
 8008dc2:	1bbf      	subs	r7, r7, r6
 8008dc4:	4639      	mov	r1, r7
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f000 fee3 	bl	8009b92 <__any_on>
 8008dcc:	4682      	mov	sl, r0
 8008dce:	b1a8      	cbz	r0, 8008dfc <__gethex+0x1ec>
 8008dd0:	f04f 0a01 	mov.w	sl, #1
 8008dd4:	1e7b      	subs	r3, r7, #1
 8008dd6:	1159      	asrs	r1, r3, #5
 8008dd8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008ddc:	f003 021f 	and.w	r2, r3, #31
 8008de0:	fa0a f202 	lsl.w	r2, sl, r2
 8008de4:	420a      	tst	r2, r1
 8008de6:	d009      	beq.n	8008dfc <__gethex+0x1ec>
 8008de8:	4553      	cmp	r3, sl
 8008dea:	dd05      	ble.n	8008df8 <__gethex+0x1e8>
 8008dec:	4620      	mov	r0, r4
 8008dee:	1eb9      	subs	r1, r7, #2
 8008df0:	f000 fecf 	bl	8009b92 <__any_on>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d144      	bne.n	8008e82 <__gethex+0x272>
 8008df8:	f04f 0a02 	mov.w	sl, #2
 8008dfc:	4639      	mov	r1, r7
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f7ff fe9e 	bl	8008b40 <rshift>
 8008e04:	443d      	add	r5, r7
 8008e06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e0a:	42ab      	cmp	r3, r5
 8008e0c:	da4a      	bge.n	8008ea4 <__gethex+0x294>
 8008e0e:	4621      	mov	r1, r4
 8008e10:	9802      	ldr	r0, [sp, #8]
 8008e12:	f000 fa67 	bl	80092e4 <_Bfree>
 8008e16:	2300      	movs	r3, #0
 8008e18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e1a:	27a3      	movs	r7, #163	; 0xa3
 8008e1c:	6013      	str	r3, [r2, #0]
 8008e1e:	e789      	b.n	8008d34 <__gethex+0x124>
 8008e20:	1e73      	subs	r3, r6, #1
 8008e22:	9a07      	ldr	r2, [sp, #28]
 8008e24:	9305      	str	r3, [sp, #20]
 8008e26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d019      	beq.n	8008e62 <__gethex+0x252>
 8008e2e:	f1bb 0f20 	cmp.w	fp, #32
 8008e32:	d107      	bne.n	8008e44 <__gethex+0x234>
 8008e34:	9b04      	ldr	r3, [sp, #16]
 8008e36:	9a01      	ldr	r2, [sp, #4]
 8008e38:	f843 2b04 	str.w	r2, [r3], #4
 8008e3c:	9304      	str	r3, [sp, #16]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	469b      	mov	fp, r3
 8008e42:	9301      	str	r3, [sp, #4]
 8008e44:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008e48:	f7ff fecd 	bl	8008be6 <__hexdig_fun>
 8008e4c:	9b01      	ldr	r3, [sp, #4]
 8008e4e:	f000 000f 	and.w	r0, r0, #15
 8008e52:	fa00 f00b 	lsl.w	r0, r0, fp
 8008e56:	4303      	orrs	r3, r0
 8008e58:	9301      	str	r3, [sp, #4]
 8008e5a:	f10b 0b04 	add.w	fp, fp, #4
 8008e5e:	9b05      	ldr	r3, [sp, #20]
 8008e60:	e00d      	b.n	8008e7e <__gethex+0x26e>
 8008e62:	9b05      	ldr	r3, [sp, #20]
 8008e64:	9a08      	ldr	r2, [sp, #32]
 8008e66:	4413      	add	r3, r2
 8008e68:	42bb      	cmp	r3, r7
 8008e6a:	d3e0      	bcc.n	8008e2e <__gethex+0x21e>
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	4652      	mov	r2, sl
 8008e70:	9903      	ldr	r1, [sp, #12]
 8008e72:	9309      	str	r3, [sp, #36]	; 0x24
 8008e74:	f001 fa2c 	bl	800a2d0 <strncmp>
 8008e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d1d7      	bne.n	8008e2e <__gethex+0x21e>
 8008e7e:	461e      	mov	r6, r3
 8008e80:	e78c      	b.n	8008d9c <__gethex+0x18c>
 8008e82:	f04f 0a03 	mov.w	sl, #3
 8008e86:	e7b9      	b.n	8008dfc <__gethex+0x1ec>
 8008e88:	da09      	bge.n	8008e9e <__gethex+0x28e>
 8008e8a:	1bf7      	subs	r7, r6, r7
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	463a      	mov	r2, r7
 8008e90:	9802      	ldr	r0, [sp, #8]
 8008e92:	f000 fc3f 	bl	8009714 <__lshift>
 8008e96:	4604      	mov	r4, r0
 8008e98:	1bed      	subs	r5, r5, r7
 8008e9a:	f100 0914 	add.w	r9, r0, #20
 8008e9e:	f04f 0a00 	mov.w	sl, #0
 8008ea2:	e7b0      	b.n	8008e06 <__gethex+0x1f6>
 8008ea4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008ea8:	42a8      	cmp	r0, r5
 8008eaa:	dd71      	ble.n	8008f90 <__gethex+0x380>
 8008eac:	1b45      	subs	r5, r0, r5
 8008eae:	42ae      	cmp	r6, r5
 8008eb0:	dc34      	bgt.n	8008f1c <__gethex+0x30c>
 8008eb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d028      	beq.n	8008f0c <__gethex+0x2fc>
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d02a      	beq.n	8008f14 <__gethex+0x304>
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d115      	bne.n	8008eee <__gethex+0x2de>
 8008ec2:	42ae      	cmp	r6, r5
 8008ec4:	d113      	bne.n	8008eee <__gethex+0x2de>
 8008ec6:	2e01      	cmp	r6, #1
 8008ec8:	d10b      	bne.n	8008ee2 <__gethex+0x2d2>
 8008eca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ece:	9a06      	ldr	r2, [sp, #24]
 8008ed0:	2762      	movs	r7, #98	; 0x62
 8008ed2:	6013      	str	r3, [r2, #0]
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	6123      	str	r3, [r4, #16]
 8008ed8:	f8c9 3000 	str.w	r3, [r9]
 8008edc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ede:	601c      	str	r4, [r3, #0]
 8008ee0:	e728      	b.n	8008d34 <__gethex+0x124>
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	1e71      	subs	r1, r6, #1
 8008ee6:	f000 fe54 	bl	8009b92 <__any_on>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	d1ed      	bne.n	8008eca <__gethex+0x2ba>
 8008eee:	4621      	mov	r1, r4
 8008ef0:	9802      	ldr	r0, [sp, #8]
 8008ef2:	f000 f9f7 	bl	80092e4 <_Bfree>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008efa:	2750      	movs	r7, #80	; 0x50
 8008efc:	6013      	str	r3, [r2, #0]
 8008efe:	e719      	b.n	8008d34 <__gethex+0x124>
 8008f00:	0800c9d4 	.word	0x0800c9d4
 8008f04:	0800c958 	.word	0x0800c958
 8008f08:	0800c969 	.word	0x0800c969
 8008f0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1ed      	bne.n	8008eee <__gethex+0x2de>
 8008f12:	e7da      	b.n	8008eca <__gethex+0x2ba>
 8008f14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1d7      	bne.n	8008eca <__gethex+0x2ba>
 8008f1a:	e7e8      	b.n	8008eee <__gethex+0x2de>
 8008f1c:	1e6f      	subs	r7, r5, #1
 8008f1e:	f1ba 0f00 	cmp.w	sl, #0
 8008f22:	d132      	bne.n	8008f8a <__gethex+0x37a>
 8008f24:	b127      	cbz	r7, 8008f30 <__gethex+0x320>
 8008f26:	4639      	mov	r1, r7
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f000 fe32 	bl	8009b92 <__any_on>
 8008f2e:	4682      	mov	sl, r0
 8008f30:	2101      	movs	r1, #1
 8008f32:	117b      	asrs	r3, r7, #5
 8008f34:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008f38:	f007 071f 	and.w	r7, r7, #31
 8008f3c:	fa01 f707 	lsl.w	r7, r1, r7
 8008f40:	421f      	tst	r7, r3
 8008f42:	f04f 0702 	mov.w	r7, #2
 8008f46:	4629      	mov	r1, r5
 8008f48:	4620      	mov	r0, r4
 8008f4a:	bf18      	it	ne
 8008f4c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008f50:	1b76      	subs	r6, r6, r5
 8008f52:	f7ff fdf5 	bl	8008b40 <rshift>
 8008f56:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f5a:	f1ba 0f00 	cmp.w	sl, #0
 8008f5e:	d048      	beq.n	8008ff2 <__gethex+0x3e2>
 8008f60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d015      	beq.n	8008f94 <__gethex+0x384>
 8008f68:	2b03      	cmp	r3, #3
 8008f6a:	d017      	beq.n	8008f9c <__gethex+0x38c>
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d109      	bne.n	8008f84 <__gethex+0x374>
 8008f70:	f01a 0f02 	tst.w	sl, #2
 8008f74:	d006      	beq.n	8008f84 <__gethex+0x374>
 8008f76:	f8d9 0000 	ldr.w	r0, [r9]
 8008f7a:	ea4a 0a00 	orr.w	sl, sl, r0
 8008f7e:	f01a 0f01 	tst.w	sl, #1
 8008f82:	d10e      	bne.n	8008fa2 <__gethex+0x392>
 8008f84:	f047 0710 	orr.w	r7, r7, #16
 8008f88:	e033      	b.n	8008ff2 <__gethex+0x3e2>
 8008f8a:	f04f 0a01 	mov.w	sl, #1
 8008f8e:	e7cf      	b.n	8008f30 <__gethex+0x320>
 8008f90:	2701      	movs	r7, #1
 8008f92:	e7e2      	b.n	8008f5a <__gethex+0x34a>
 8008f94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f96:	f1c3 0301 	rsb	r3, r3, #1
 8008f9a:	9315      	str	r3, [sp, #84]	; 0x54
 8008f9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d0f0      	beq.n	8008f84 <__gethex+0x374>
 8008fa2:	f04f 0c00 	mov.w	ip, #0
 8008fa6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008faa:	f104 0314 	add.w	r3, r4, #20
 8008fae:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008fb2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fbc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008fc0:	d01c      	beq.n	8008ffc <__gethex+0x3ec>
 8008fc2:	3201      	adds	r2, #1
 8008fc4:	6002      	str	r2, [r0, #0]
 8008fc6:	2f02      	cmp	r7, #2
 8008fc8:	f104 0314 	add.w	r3, r4, #20
 8008fcc:	d13d      	bne.n	800904a <__gethex+0x43a>
 8008fce:	f8d8 2000 	ldr.w	r2, [r8]
 8008fd2:	3a01      	subs	r2, #1
 8008fd4:	42b2      	cmp	r2, r6
 8008fd6:	d10a      	bne.n	8008fee <__gethex+0x3de>
 8008fd8:	2201      	movs	r2, #1
 8008fda:	1171      	asrs	r1, r6, #5
 8008fdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008fe0:	f006 061f 	and.w	r6, r6, #31
 8008fe4:	fa02 f606 	lsl.w	r6, r2, r6
 8008fe8:	421e      	tst	r6, r3
 8008fea:	bf18      	it	ne
 8008fec:	4617      	movne	r7, r2
 8008fee:	f047 0720 	orr.w	r7, r7, #32
 8008ff2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ff4:	601c      	str	r4, [r3, #0]
 8008ff6:	9b06      	ldr	r3, [sp, #24]
 8008ff8:	601d      	str	r5, [r3, #0]
 8008ffa:	e69b      	b.n	8008d34 <__gethex+0x124>
 8008ffc:	4299      	cmp	r1, r3
 8008ffe:	f843 cc04 	str.w	ip, [r3, #-4]
 8009002:	d8d8      	bhi.n	8008fb6 <__gethex+0x3a6>
 8009004:	68a3      	ldr	r3, [r4, #8]
 8009006:	459b      	cmp	fp, r3
 8009008:	db17      	blt.n	800903a <__gethex+0x42a>
 800900a:	6861      	ldr	r1, [r4, #4]
 800900c:	9802      	ldr	r0, [sp, #8]
 800900e:	3101      	adds	r1, #1
 8009010:	f000 f928 	bl	8009264 <_Balloc>
 8009014:	4681      	mov	r9, r0
 8009016:	b918      	cbnz	r0, 8009020 <__gethex+0x410>
 8009018:	4602      	mov	r2, r0
 800901a:	2184      	movs	r1, #132	; 0x84
 800901c:	4b19      	ldr	r3, [pc, #100]	; (8009084 <__gethex+0x474>)
 800901e:	e6ac      	b.n	8008d7a <__gethex+0x16a>
 8009020:	6922      	ldr	r2, [r4, #16]
 8009022:	f104 010c 	add.w	r1, r4, #12
 8009026:	3202      	adds	r2, #2
 8009028:	0092      	lsls	r2, r2, #2
 800902a:	300c      	adds	r0, #12
 800902c:	f7fd fbb4 	bl	8006798 <memcpy>
 8009030:	4621      	mov	r1, r4
 8009032:	9802      	ldr	r0, [sp, #8]
 8009034:	f000 f956 	bl	80092e4 <_Bfree>
 8009038:	464c      	mov	r4, r9
 800903a:	6923      	ldr	r3, [r4, #16]
 800903c:	1c5a      	adds	r2, r3, #1
 800903e:	6122      	str	r2, [r4, #16]
 8009040:	2201      	movs	r2, #1
 8009042:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009046:	615a      	str	r2, [r3, #20]
 8009048:	e7bd      	b.n	8008fc6 <__gethex+0x3b6>
 800904a:	6922      	ldr	r2, [r4, #16]
 800904c:	455a      	cmp	r2, fp
 800904e:	dd0b      	ble.n	8009068 <__gethex+0x458>
 8009050:	2101      	movs	r1, #1
 8009052:	4620      	mov	r0, r4
 8009054:	f7ff fd74 	bl	8008b40 <rshift>
 8009058:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800905c:	3501      	adds	r5, #1
 800905e:	42ab      	cmp	r3, r5
 8009060:	f6ff aed5 	blt.w	8008e0e <__gethex+0x1fe>
 8009064:	2701      	movs	r7, #1
 8009066:	e7c2      	b.n	8008fee <__gethex+0x3de>
 8009068:	f016 061f 	ands.w	r6, r6, #31
 800906c:	d0fa      	beq.n	8009064 <__gethex+0x454>
 800906e:	449a      	add	sl, r3
 8009070:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009074:	f000 f9ec 	bl	8009450 <__hi0bits>
 8009078:	f1c6 0620 	rsb	r6, r6, #32
 800907c:	42b0      	cmp	r0, r6
 800907e:	dbe7      	blt.n	8009050 <__gethex+0x440>
 8009080:	e7f0      	b.n	8009064 <__gethex+0x454>
 8009082:	bf00      	nop
 8009084:	0800c958 	.word	0x0800c958

08009088 <L_shift>:
 8009088:	f1c2 0208 	rsb	r2, r2, #8
 800908c:	0092      	lsls	r2, r2, #2
 800908e:	b570      	push	{r4, r5, r6, lr}
 8009090:	f1c2 0620 	rsb	r6, r2, #32
 8009094:	6843      	ldr	r3, [r0, #4]
 8009096:	6804      	ldr	r4, [r0, #0]
 8009098:	fa03 f506 	lsl.w	r5, r3, r6
 800909c:	432c      	orrs	r4, r5
 800909e:	40d3      	lsrs	r3, r2
 80090a0:	6004      	str	r4, [r0, #0]
 80090a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80090a6:	4288      	cmp	r0, r1
 80090a8:	d3f4      	bcc.n	8009094 <L_shift+0xc>
 80090aa:	bd70      	pop	{r4, r5, r6, pc}

080090ac <__match>:
 80090ac:	b530      	push	{r4, r5, lr}
 80090ae:	6803      	ldr	r3, [r0, #0]
 80090b0:	3301      	adds	r3, #1
 80090b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090b6:	b914      	cbnz	r4, 80090be <__match+0x12>
 80090b8:	6003      	str	r3, [r0, #0]
 80090ba:	2001      	movs	r0, #1
 80090bc:	bd30      	pop	{r4, r5, pc}
 80090be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80090c6:	2d19      	cmp	r5, #25
 80090c8:	bf98      	it	ls
 80090ca:	3220      	addls	r2, #32
 80090cc:	42a2      	cmp	r2, r4
 80090ce:	d0f0      	beq.n	80090b2 <__match+0x6>
 80090d0:	2000      	movs	r0, #0
 80090d2:	e7f3      	b.n	80090bc <__match+0x10>

080090d4 <__hexnan>:
 80090d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d8:	2500      	movs	r5, #0
 80090da:	680b      	ldr	r3, [r1, #0]
 80090dc:	4682      	mov	sl, r0
 80090de:	115e      	asrs	r6, r3, #5
 80090e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80090e4:	f013 031f 	ands.w	r3, r3, #31
 80090e8:	bf18      	it	ne
 80090ea:	3604      	addne	r6, #4
 80090ec:	1f37      	subs	r7, r6, #4
 80090ee:	4690      	mov	r8, r2
 80090f0:	46b9      	mov	r9, r7
 80090f2:	463c      	mov	r4, r7
 80090f4:	46ab      	mov	fp, r5
 80090f6:	b087      	sub	sp, #28
 80090f8:	6801      	ldr	r1, [r0, #0]
 80090fa:	9301      	str	r3, [sp, #4]
 80090fc:	f846 5c04 	str.w	r5, [r6, #-4]
 8009100:	9502      	str	r5, [sp, #8]
 8009102:	784a      	ldrb	r2, [r1, #1]
 8009104:	1c4b      	adds	r3, r1, #1
 8009106:	9303      	str	r3, [sp, #12]
 8009108:	b342      	cbz	r2, 800915c <__hexnan+0x88>
 800910a:	4610      	mov	r0, r2
 800910c:	9105      	str	r1, [sp, #20]
 800910e:	9204      	str	r2, [sp, #16]
 8009110:	f7ff fd69 	bl	8008be6 <__hexdig_fun>
 8009114:	2800      	cmp	r0, #0
 8009116:	d14f      	bne.n	80091b8 <__hexnan+0xe4>
 8009118:	9a04      	ldr	r2, [sp, #16]
 800911a:	9905      	ldr	r1, [sp, #20]
 800911c:	2a20      	cmp	r2, #32
 800911e:	d818      	bhi.n	8009152 <__hexnan+0x7e>
 8009120:	9b02      	ldr	r3, [sp, #8]
 8009122:	459b      	cmp	fp, r3
 8009124:	dd13      	ble.n	800914e <__hexnan+0x7a>
 8009126:	454c      	cmp	r4, r9
 8009128:	d206      	bcs.n	8009138 <__hexnan+0x64>
 800912a:	2d07      	cmp	r5, #7
 800912c:	dc04      	bgt.n	8009138 <__hexnan+0x64>
 800912e:	462a      	mov	r2, r5
 8009130:	4649      	mov	r1, r9
 8009132:	4620      	mov	r0, r4
 8009134:	f7ff ffa8 	bl	8009088 <L_shift>
 8009138:	4544      	cmp	r4, r8
 800913a:	d950      	bls.n	80091de <__hexnan+0x10a>
 800913c:	2300      	movs	r3, #0
 800913e:	f1a4 0904 	sub.w	r9, r4, #4
 8009142:	f844 3c04 	str.w	r3, [r4, #-4]
 8009146:	461d      	mov	r5, r3
 8009148:	464c      	mov	r4, r9
 800914a:	f8cd b008 	str.w	fp, [sp, #8]
 800914e:	9903      	ldr	r1, [sp, #12]
 8009150:	e7d7      	b.n	8009102 <__hexnan+0x2e>
 8009152:	2a29      	cmp	r2, #41	; 0x29
 8009154:	d156      	bne.n	8009204 <__hexnan+0x130>
 8009156:	3102      	adds	r1, #2
 8009158:	f8ca 1000 	str.w	r1, [sl]
 800915c:	f1bb 0f00 	cmp.w	fp, #0
 8009160:	d050      	beq.n	8009204 <__hexnan+0x130>
 8009162:	454c      	cmp	r4, r9
 8009164:	d206      	bcs.n	8009174 <__hexnan+0xa0>
 8009166:	2d07      	cmp	r5, #7
 8009168:	dc04      	bgt.n	8009174 <__hexnan+0xa0>
 800916a:	462a      	mov	r2, r5
 800916c:	4649      	mov	r1, r9
 800916e:	4620      	mov	r0, r4
 8009170:	f7ff ff8a 	bl	8009088 <L_shift>
 8009174:	4544      	cmp	r4, r8
 8009176:	d934      	bls.n	80091e2 <__hexnan+0x10e>
 8009178:	4623      	mov	r3, r4
 800917a:	f1a8 0204 	sub.w	r2, r8, #4
 800917e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009182:	429f      	cmp	r7, r3
 8009184:	f842 1f04 	str.w	r1, [r2, #4]!
 8009188:	d2f9      	bcs.n	800917e <__hexnan+0xaa>
 800918a:	1b3b      	subs	r3, r7, r4
 800918c:	f023 0303 	bic.w	r3, r3, #3
 8009190:	3304      	adds	r3, #4
 8009192:	3401      	adds	r4, #1
 8009194:	3e03      	subs	r6, #3
 8009196:	42b4      	cmp	r4, r6
 8009198:	bf88      	it	hi
 800919a:	2304      	movhi	r3, #4
 800919c:	2200      	movs	r2, #0
 800919e:	4443      	add	r3, r8
 80091a0:	f843 2b04 	str.w	r2, [r3], #4
 80091a4:	429f      	cmp	r7, r3
 80091a6:	d2fb      	bcs.n	80091a0 <__hexnan+0xcc>
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	b91b      	cbnz	r3, 80091b4 <__hexnan+0xe0>
 80091ac:	4547      	cmp	r7, r8
 80091ae:	d127      	bne.n	8009200 <__hexnan+0x12c>
 80091b0:	2301      	movs	r3, #1
 80091b2:	603b      	str	r3, [r7, #0]
 80091b4:	2005      	movs	r0, #5
 80091b6:	e026      	b.n	8009206 <__hexnan+0x132>
 80091b8:	3501      	adds	r5, #1
 80091ba:	2d08      	cmp	r5, #8
 80091bc:	f10b 0b01 	add.w	fp, fp, #1
 80091c0:	dd06      	ble.n	80091d0 <__hexnan+0xfc>
 80091c2:	4544      	cmp	r4, r8
 80091c4:	d9c3      	bls.n	800914e <__hexnan+0x7a>
 80091c6:	2300      	movs	r3, #0
 80091c8:	2501      	movs	r5, #1
 80091ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80091ce:	3c04      	subs	r4, #4
 80091d0:	6822      	ldr	r2, [r4, #0]
 80091d2:	f000 000f 	and.w	r0, r0, #15
 80091d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80091da:	6022      	str	r2, [r4, #0]
 80091dc:	e7b7      	b.n	800914e <__hexnan+0x7a>
 80091de:	2508      	movs	r5, #8
 80091e0:	e7b5      	b.n	800914e <__hexnan+0x7a>
 80091e2:	9b01      	ldr	r3, [sp, #4]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d0df      	beq.n	80091a8 <__hexnan+0xd4>
 80091e8:	f04f 32ff 	mov.w	r2, #4294967295
 80091ec:	f1c3 0320 	rsb	r3, r3, #32
 80091f0:	fa22 f303 	lsr.w	r3, r2, r3
 80091f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80091f8:	401a      	ands	r2, r3
 80091fa:	f846 2c04 	str.w	r2, [r6, #-4]
 80091fe:	e7d3      	b.n	80091a8 <__hexnan+0xd4>
 8009200:	3f04      	subs	r7, #4
 8009202:	e7d1      	b.n	80091a8 <__hexnan+0xd4>
 8009204:	2004      	movs	r0, #4
 8009206:	b007      	add	sp, #28
 8009208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800920c <_localeconv_r>:
 800920c:	4800      	ldr	r0, [pc, #0]	; (8009210 <_localeconv_r+0x4>)
 800920e:	4770      	bx	lr
 8009210:	20000194 	.word	0x20000194

08009214 <malloc>:
 8009214:	4b02      	ldr	r3, [pc, #8]	; (8009220 <malloc+0xc>)
 8009216:	4601      	mov	r1, r0
 8009218:	6818      	ldr	r0, [r3, #0]
 800921a:	f000 bd35 	b.w	8009c88 <_malloc_r>
 800921e:	bf00      	nop
 8009220:	2000003c 	.word	0x2000003c

08009224 <__ascii_mbtowc>:
 8009224:	b082      	sub	sp, #8
 8009226:	b901      	cbnz	r1, 800922a <__ascii_mbtowc+0x6>
 8009228:	a901      	add	r1, sp, #4
 800922a:	b142      	cbz	r2, 800923e <__ascii_mbtowc+0x1a>
 800922c:	b14b      	cbz	r3, 8009242 <__ascii_mbtowc+0x1e>
 800922e:	7813      	ldrb	r3, [r2, #0]
 8009230:	600b      	str	r3, [r1, #0]
 8009232:	7812      	ldrb	r2, [r2, #0]
 8009234:	1e10      	subs	r0, r2, #0
 8009236:	bf18      	it	ne
 8009238:	2001      	movne	r0, #1
 800923a:	b002      	add	sp, #8
 800923c:	4770      	bx	lr
 800923e:	4610      	mov	r0, r2
 8009240:	e7fb      	b.n	800923a <__ascii_mbtowc+0x16>
 8009242:	f06f 0001 	mvn.w	r0, #1
 8009246:	e7f8      	b.n	800923a <__ascii_mbtowc+0x16>

08009248 <memchr>:
 8009248:	4603      	mov	r3, r0
 800924a:	b510      	push	{r4, lr}
 800924c:	b2c9      	uxtb	r1, r1
 800924e:	4402      	add	r2, r0
 8009250:	4293      	cmp	r3, r2
 8009252:	4618      	mov	r0, r3
 8009254:	d101      	bne.n	800925a <memchr+0x12>
 8009256:	2000      	movs	r0, #0
 8009258:	e003      	b.n	8009262 <memchr+0x1a>
 800925a:	7804      	ldrb	r4, [r0, #0]
 800925c:	3301      	adds	r3, #1
 800925e:	428c      	cmp	r4, r1
 8009260:	d1f6      	bne.n	8009250 <memchr+0x8>
 8009262:	bd10      	pop	{r4, pc}

08009264 <_Balloc>:
 8009264:	b570      	push	{r4, r5, r6, lr}
 8009266:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009268:	4604      	mov	r4, r0
 800926a:	460d      	mov	r5, r1
 800926c:	b976      	cbnz	r6, 800928c <_Balloc+0x28>
 800926e:	2010      	movs	r0, #16
 8009270:	f7ff ffd0 	bl	8009214 <malloc>
 8009274:	4602      	mov	r2, r0
 8009276:	6260      	str	r0, [r4, #36]	; 0x24
 8009278:	b920      	cbnz	r0, 8009284 <_Balloc+0x20>
 800927a:	2166      	movs	r1, #102	; 0x66
 800927c:	4b17      	ldr	r3, [pc, #92]	; (80092dc <_Balloc+0x78>)
 800927e:	4818      	ldr	r0, [pc, #96]	; (80092e0 <_Balloc+0x7c>)
 8009280:	f7fe fdb2 	bl	8007de8 <__assert_func>
 8009284:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009288:	6006      	str	r6, [r0, #0]
 800928a:	60c6      	str	r6, [r0, #12]
 800928c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800928e:	68f3      	ldr	r3, [r6, #12]
 8009290:	b183      	cbz	r3, 80092b4 <_Balloc+0x50>
 8009292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800929a:	b9b8      	cbnz	r0, 80092cc <_Balloc+0x68>
 800929c:	2101      	movs	r1, #1
 800929e:	fa01 f605 	lsl.w	r6, r1, r5
 80092a2:	1d72      	adds	r2, r6, #5
 80092a4:	4620      	mov	r0, r4
 80092a6:	0092      	lsls	r2, r2, #2
 80092a8:	f000 fc94 	bl	8009bd4 <_calloc_r>
 80092ac:	b160      	cbz	r0, 80092c8 <_Balloc+0x64>
 80092ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092b2:	e00e      	b.n	80092d2 <_Balloc+0x6e>
 80092b4:	2221      	movs	r2, #33	; 0x21
 80092b6:	2104      	movs	r1, #4
 80092b8:	4620      	mov	r0, r4
 80092ba:	f000 fc8b 	bl	8009bd4 <_calloc_r>
 80092be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092c0:	60f0      	str	r0, [r6, #12]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1e4      	bne.n	8009292 <_Balloc+0x2e>
 80092c8:	2000      	movs	r0, #0
 80092ca:	bd70      	pop	{r4, r5, r6, pc}
 80092cc:	6802      	ldr	r2, [r0, #0]
 80092ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092d2:	2300      	movs	r3, #0
 80092d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092d8:	e7f7      	b.n	80092ca <_Balloc+0x66>
 80092da:	bf00      	nop
 80092dc:	0800c838 	.word	0x0800c838
 80092e0:	0800c9e8 	.word	0x0800c9e8

080092e4 <_Bfree>:
 80092e4:	b570      	push	{r4, r5, r6, lr}
 80092e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092e8:	4605      	mov	r5, r0
 80092ea:	460c      	mov	r4, r1
 80092ec:	b976      	cbnz	r6, 800930c <_Bfree+0x28>
 80092ee:	2010      	movs	r0, #16
 80092f0:	f7ff ff90 	bl	8009214 <malloc>
 80092f4:	4602      	mov	r2, r0
 80092f6:	6268      	str	r0, [r5, #36]	; 0x24
 80092f8:	b920      	cbnz	r0, 8009304 <_Bfree+0x20>
 80092fa:	218a      	movs	r1, #138	; 0x8a
 80092fc:	4b08      	ldr	r3, [pc, #32]	; (8009320 <_Bfree+0x3c>)
 80092fe:	4809      	ldr	r0, [pc, #36]	; (8009324 <_Bfree+0x40>)
 8009300:	f7fe fd72 	bl	8007de8 <__assert_func>
 8009304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009308:	6006      	str	r6, [r0, #0]
 800930a:	60c6      	str	r6, [r0, #12]
 800930c:	b13c      	cbz	r4, 800931e <_Bfree+0x3a>
 800930e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009310:	6862      	ldr	r2, [r4, #4]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009318:	6021      	str	r1, [r4, #0]
 800931a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800931e:	bd70      	pop	{r4, r5, r6, pc}
 8009320:	0800c838 	.word	0x0800c838
 8009324:	0800c9e8 	.word	0x0800c9e8

08009328 <__multadd>:
 8009328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800932c:	4698      	mov	r8, r3
 800932e:	460c      	mov	r4, r1
 8009330:	2300      	movs	r3, #0
 8009332:	690e      	ldr	r6, [r1, #16]
 8009334:	4607      	mov	r7, r0
 8009336:	f101 0014 	add.w	r0, r1, #20
 800933a:	6805      	ldr	r5, [r0, #0]
 800933c:	3301      	adds	r3, #1
 800933e:	b2a9      	uxth	r1, r5
 8009340:	fb02 8101 	mla	r1, r2, r1, r8
 8009344:	0c2d      	lsrs	r5, r5, #16
 8009346:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800934a:	fb02 c505 	mla	r5, r2, r5, ip
 800934e:	b289      	uxth	r1, r1
 8009350:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009354:	429e      	cmp	r6, r3
 8009356:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800935a:	f840 1b04 	str.w	r1, [r0], #4
 800935e:	dcec      	bgt.n	800933a <__multadd+0x12>
 8009360:	f1b8 0f00 	cmp.w	r8, #0
 8009364:	d022      	beq.n	80093ac <__multadd+0x84>
 8009366:	68a3      	ldr	r3, [r4, #8]
 8009368:	42b3      	cmp	r3, r6
 800936a:	dc19      	bgt.n	80093a0 <__multadd+0x78>
 800936c:	6861      	ldr	r1, [r4, #4]
 800936e:	4638      	mov	r0, r7
 8009370:	3101      	adds	r1, #1
 8009372:	f7ff ff77 	bl	8009264 <_Balloc>
 8009376:	4605      	mov	r5, r0
 8009378:	b928      	cbnz	r0, 8009386 <__multadd+0x5e>
 800937a:	4602      	mov	r2, r0
 800937c:	21b5      	movs	r1, #181	; 0xb5
 800937e:	4b0d      	ldr	r3, [pc, #52]	; (80093b4 <__multadd+0x8c>)
 8009380:	480d      	ldr	r0, [pc, #52]	; (80093b8 <__multadd+0x90>)
 8009382:	f7fe fd31 	bl	8007de8 <__assert_func>
 8009386:	6922      	ldr	r2, [r4, #16]
 8009388:	f104 010c 	add.w	r1, r4, #12
 800938c:	3202      	adds	r2, #2
 800938e:	0092      	lsls	r2, r2, #2
 8009390:	300c      	adds	r0, #12
 8009392:	f7fd fa01 	bl	8006798 <memcpy>
 8009396:	4621      	mov	r1, r4
 8009398:	4638      	mov	r0, r7
 800939a:	f7ff ffa3 	bl	80092e4 <_Bfree>
 800939e:	462c      	mov	r4, r5
 80093a0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80093a4:	3601      	adds	r6, #1
 80093a6:	f8c3 8014 	str.w	r8, [r3, #20]
 80093aa:	6126      	str	r6, [r4, #16]
 80093ac:	4620      	mov	r0, r4
 80093ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b2:	bf00      	nop
 80093b4:	0800c958 	.word	0x0800c958
 80093b8:	0800c9e8 	.word	0x0800c9e8

080093bc <__s2b>:
 80093bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093c0:	4615      	mov	r5, r2
 80093c2:	2209      	movs	r2, #9
 80093c4:	461f      	mov	r7, r3
 80093c6:	3308      	adds	r3, #8
 80093c8:	460c      	mov	r4, r1
 80093ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80093ce:	4606      	mov	r6, r0
 80093d0:	2201      	movs	r2, #1
 80093d2:	2100      	movs	r1, #0
 80093d4:	429a      	cmp	r2, r3
 80093d6:	db09      	blt.n	80093ec <__s2b+0x30>
 80093d8:	4630      	mov	r0, r6
 80093da:	f7ff ff43 	bl	8009264 <_Balloc>
 80093de:	b940      	cbnz	r0, 80093f2 <__s2b+0x36>
 80093e0:	4602      	mov	r2, r0
 80093e2:	21ce      	movs	r1, #206	; 0xce
 80093e4:	4b18      	ldr	r3, [pc, #96]	; (8009448 <__s2b+0x8c>)
 80093e6:	4819      	ldr	r0, [pc, #100]	; (800944c <__s2b+0x90>)
 80093e8:	f7fe fcfe 	bl	8007de8 <__assert_func>
 80093ec:	0052      	lsls	r2, r2, #1
 80093ee:	3101      	adds	r1, #1
 80093f0:	e7f0      	b.n	80093d4 <__s2b+0x18>
 80093f2:	9b08      	ldr	r3, [sp, #32]
 80093f4:	2d09      	cmp	r5, #9
 80093f6:	6143      	str	r3, [r0, #20]
 80093f8:	f04f 0301 	mov.w	r3, #1
 80093fc:	6103      	str	r3, [r0, #16]
 80093fe:	dd16      	ble.n	800942e <__s2b+0x72>
 8009400:	f104 0909 	add.w	r9, r4, #9
 8009404:	46c8      	mov	r8, r9
 8009406:	442c      	add	r4, r5
 8009408:	f818 3b01 	ldrb.w	r3, [r8], #1
 800940c:	4601      	mov	r1, r0
 800940e:	220a      	movs	r2, #10
 8009410:	4630      	mov	r0, r6
 8009412:	3b30      	subs	r3, #48	; 0x30
 8009414:	f7ff ff88 	bl	8009328 <__multadd>
 8009418:	45a0      	cmp	r8, r4
 800941a:	d1f5      	bne.n	8009408 <__s2b+0x4c>
 800941c:	f1a5 0408 	sub.w	r4, r5, #8
 8009420:	444c      	add	r4, r9
 8009422:	1b2d      	subs	r5, r5, r4
 8009424:	1963      	adds	r3, r4, r5
 8009426:	42bb      	cmp	r3, r7
 8009428:	db04      	blt.n	8009434 <__s2b+0x78>
 800942a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800942e:	2509      	movs	r5, #9
 8009430:	340a      	adds	r4, #10
 8009432:	e7f6      	b.n	8009422 <__s2b+0x66>
 8009434:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009438:	4601      	mov	r1, r0
 800943a:	220a      	movs	r2, #10
 800943c:	4630      	mov	r0, r6
 800943e:	3b30      	subs	r3, #48	; 0x30
 8009440:	f7ff ff72 	bl	8009328 <__multadd>
 8009444:	e7ee      	b.n	8009424 <__s2b+0x68>
 8009446:	bf00      	nop
 8009448:	0800c958 	.word	0x0800c958
 800944c:	0800c9e8 	.word	0x0800c9e8

08009450 <__hi0bits>:
 8009450:	0c02      	lsrs	r2, r0, #16
 8009452:	0412      	lsls	r2, r2, #16
 8009454:	4603      	mov	r3, r0
 8009456:	b9ca      	cbnz	r2, 800948c <__hi0bits+0x3c>
 8009458:	0403      	lsls	r3, r0, #16
 800945a:	2010      	movs	r0, #16
 800945c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009460:	bf04      	itt	eq
 8009462:	021b      	lsleq	r3, r3, #8
 8009464:	3008      	addeq	r0, #8
 8009466:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800946a:	bf04      	itt	eq
 800946c:	011b      	lsleq	r3, r3, #4
 800946e:	3004      	addeq	r0, #4
 8009470:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009474:	bf04      	itt	eq
 8009476:	009b      	lsleq	r3, r3, #2
 8009478:	3002      	addeq	r0, #2
 800947a:	2b00      	cmp	r3, #0
 800947c:	db05      	blt.n	800948a <__hi0bits+0x3a>
 800947e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009482:	f100 0001 	add.w	r0, r0, #1
 8009486:	bf08      	it	eq
 8009488:	2020      	moveq	r0, #32
 800948a:	4770      	bx	lr
 800948c:	2000      	movs	r0, #0
 800948e:	e7e5      	b.n	800945c <__hi0bits+0xc>

08009490 <__lo0bits>:
 8009490:	6803      	ldr	r3, [r0, #0]
 8009492:	4602      	mov	r2, r0
 8009494:	f013 0007 	ands.w	r0, r3, #7
 8009498:	d00b      	beq.n	80094b2 <__lo0bits+0x22>
 800949a:	07d9      	lsls	r1, r3, #31
 800949c:	d422      	bmi.n	80094e4 <__lo0bits+0x54>
 800949e:	0798      	lsls	r0, r3, #30
 80094a0:	bf49      	itett	mi
 80094a2:	085b      	lsrmi	r3, r3, #1
 80094a4:	089b      	lsrpl	r3, r3, #2
 80094a6:	2001      	movmi	r0, #1
 80094a8:	6013      	strmi	r3, [r2, #0]
 80094aa:	bf5c      	itt	pl
 80094ac:	2002      	movpl	r0, #2
 80094ae:	6013      	strpl	r3, [r2, #0]
 80094b0:	4770      	bx	lr
 80094b2:	b299      	uxth	r1, r3
 80094b4:	b909      	cbnz	r1, 80094ba <__lo0bits+0x2a>
 80094b6:	2010      	movs	r0, #16
 80094b8:	0c1b      	lsrs	r3, r3, #16
 80094ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80094be:	bf04      	itt	eq
 80094c0:	0a1b      	lsreq	r3, r3, #8
 80094c2:	3008      	addeq	r0, #8
 80094c4:	0719      	lsls	r1, r3, #28
 80094c6:	bf04      	itt	eq
 80094c8:	091b      	lsreq	r3, r3, #4
 80094ca:	3004      	addeq	r0, #4
 80094cc:	0799      	lsls	r1, r3, #30
 80094ce:	bf04      	itt	eq
 80094d0:	089b      	lsreq	r3, r3, #2
 80094d2:	3002      	addeq	r0, #2
 80094d4:	07d9      	lsls	r1, r3, #31
 80094d6:	d403      	bmi.n	80094e0 <__lo0bits+0x50>
 80094d8:	085b      	lsrs	r3, r3, #1
 80094da:	f100 0001 	add.w	r0, r0, #1
 80094de:	d003      	beq.n	80094e8 <__lo0bits+0x58>
 80094e0:	6013      	str	r3, [r2, #0]
 80094e2:	4770      	bx	lr
 80094e4:	2000      	movs	r0, #0
 80094e6:	4770      	bx	lr
 80094e8:	2020      	movs	r0, #32
 80094ea:	4770      	bx	lr

080094ec <__i2b>:
 80094ec:	b510      	push	{r4, lr}
 80094ee:	460c      	mov	r4, r1
 80094f0:	2101      	movs	r1, #1
 80094f2:	f7ff feb7 	bl	8009264 <_Balloc>
 80094f6:	4602      	mov	r2, r0
 80094f8:	b928      	cbnz	r0, 8009506 <__i2b+0x1a>
 80094fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80094fe:	4b04      	ldr	r3, [pc, #16]	; (8009510 <__i2b+0x24>)
 8009500:	4804      	ldr	r0, [pc, #16]	; (8009514 <__i2b+0x28>)
 8009502:	f7fe fc71 	bl	8007de8 <__assert_func>
 8009506:	2301      	movs	r3, #1
 8009508:	6144      	str	r4, [r0, #20]
 800950a:	6103      	str	r3, [r0, #16]
 800950c:	bd10      	pop	{r4, pc}
 800950e:	bf00      	nop
 8009510:	0800c958 	.word	0x0800c958
 8009514:	0800c9e8 	.word	0x0800c9e8

08009518 <__multiply>:
 8009518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951c:	4614      	mov	r4, r2
 800951e:	690a      	ldr	r2, [r1, #16]
 8009520:	6923      	ldr	r3, [r4, #16]
 8009522:	460d      	mov	r5, r1
 8009524:	429a      	cmp	r2, r3
 8009526:	bfbe      	ittt	lt
 8009528:	460b      	movlt	r3, r1
 800952a:	4625      	movlt	r5, r4
 800952c:	461c      	movlt	r4, r3
 800952e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009532:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009536:	68ab      	ldr	r3, [r5, #8]
 8009538:	6869      	ldr	r1, [r5, #4]
 800953a:	eb0a 0709 	add.w	r7, sl, r9
 800953e:	42bb      	cmp	r3, r7
 8009540:	b085      	sub	sp, #20
 8009542:	bfb8      	it	lt
 8009544:	3101      	addlt	r1, #1
 8009546:	f7ff fe8d 	bl	8009264 <_Balloc>
 800954a:	b930      	cbnz	r0, 800955a <__multiply+0x42>
 800954c:	4602      	mov	r2, r0
 800954e:	f240 115d 	movw	r1, #349	; 0x15d
 8009552:	4b41      	ldr	r3, [pc, #260]	; (8009658 <__multiply+0x140>)
 8009554:	4841      	ldr	r0, [pc, #260]	; (800965c <__multiply+0x144>)
 8009556:	f7fe fc47 	bl	8007de8 <__assert_func>
 800955a:	f100 0614 	add.w	r6, r0, #20
 800955e:	4633      	mov	r3, r6
 8009560:	2200      	movs	r2, #0
 8009562:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009566:	4543      	cmp	r3, r8
 8009568:	d31e      	bcc.n	80095a8 <__multiply+0x90>
 800956a:	f105 0c14 	add.w	ip, r5, #20
 800956e:	f104 0314 	add.w	r3, r4, #20
 8009572:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009576:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800957a:	9202      	str	r2, [sp, #8]
 800957c:	ebac 0205 	sub.w	r2, ip, r5
 8009580:	3a15      	subs	r2, #21
 8009582:	f022 0203 	bic.w	r2, r2, #3
 8009586:	3204      	adds	r2, #4
 8009588:	f105 0115 	add.w	r1, r5, #21
 800958c:	458c      	cmp	ip, r1
 800958e:	bf38      	it	cc
 8009590:	2204      	movcc	r2, #4
 8009592:	9201      	str	r2, [sp, #4]
 8009594:	9a02      	ldr	r2, [sp, #8]
 8009596:	9303      	str	r3, [sp, #12]
 8009598:	429a      	cmp	r2, r3
 800959a:	d808      	bhi.n	80095ae <__multiply+0x96>
 800959c:	2f00      	cmp	r7, #0
 800959e:	dc55      	bgt.n	800964c <__multiply+0x134>
 80095a0:	6107      	str	r7, [r0, #16]
 80095a2:	b005      	add	sp, #20
 80095a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a8:	f843 2b04 	str.w	r2, [r3], #4
 80095ac:	e7db      	b.n	8009566 <__multiply+0x4e>
 80095ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80095b2:	f1ba 0f00 	cmp.w	sl, #0
 80095b6:	d020      	beq.n	80095fa <__multiply+0xe2>
 80095b8:	46b1      	mov	r9, r6
 80095ba:	2200      	movs	r2, #0
 80095bc:	f105 0e14 	add.w	lr, r5, #20
 80095c0:	f85e 4b04 	ldr.w	r4, [lr], #4
 80095c4:	f8d9 b000 	ldr.w	fp, [r9]
 80095c8:	b2a1      	uxth	r1, r4
 80095ca:	fa1f fb8b 	uxth.w	fp, fp
 80095ce:	fb0a b101 	mla	r1, sl, r1, fp
 80095d2:	4411      	add	r1, r2
 80095d4:	f8d9 2000 	ldr.w	r2, [r9]
 80095d8:	0c24      	lsrs	r4, r4, #16
 80095da:	0c12      	lsrs	r2, r2, #16
 80095dc:	fb0a 2404 	mla	r4, sl, r4, r2
 80095e0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80095e4:	b289      	uxth	r1, r1
 80095e6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80095ea:	45f4      	cmp	ip, lr
 80095ec:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80095f0:	f849 1b04 	str.w	r1, [r9], #4
 80095f4:	d8e4      	bhi.n	80095c0 <__multiply+0xa8>
 80095f6:	9901      	ldr	r1, [sp, #4]
 80095f8:	5072      	str	r2, [r6, r1]
 80095fa:	9a03      	ldr	r2, [sp, #12]
 80095fc:	3304      	adds	r3, #4
 80095fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009602:	f1b9 0f00 	cmp.w	r9, #0
 8009606:	d01f      	beq.n	8009648 <__multiply+0x130>
 8009608:	46b6      	mov	lr, r6
 800960a:	f04f 0a00 	mov.w	sl, #0
 800960e:	6834      	ldr	r4, [r6, #0]
 8009610:	f105 0114 	add.w	r1, r5, #20
 8009614:	880a      	ldrh	r2, [r1, #0]
 8009616:	f8be b002 	ldrh.w	fp, [lr, #2]
 800961a:	b2a4      	uxth	r4, r4
 800961c:	fb09 b202 	mla	r2, r9, r2, fp
 8009620:	4492      	add	sl, r2
 8009622:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009626:	f84e 4b04 	str.w	r4, [lr], #4
 800962a:	f851 4b04 	ldr.w	r4, [r1], #4
 800962e:	f8be 2000 	ldrh.w	r2, [lr]
 8009632:	0c24      	lsrs	r4, r4, #16
 8009634:	fb09 2404 	mla	r4, r9, r4, r2
 8009638:	458c      	cmp	ip, r1
 800963a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800963e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009642:	d8e7      	bhi.n	8009614 <__multiply+0xfc>
 8009644:	9a01      	ldr	r2, [sp, #4]
 8009646:	50b4      	str	r4, [r6, r2]
 8009648:	3604      	adds	r6, #4
 800964a:	e7a3      	b.n	8009594 <__multiply+0x7c>
 800964c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1a5      	bne.n	80095a0 <__multiply+0x88>
 8009654:	3f01      	subs	r7, #1
 8009656:	e7a1      	b.n	800959c <__multiply+0x84>
 8009658:	0800c958 	.word	0x0800c958
 800965c:	0800c9e8 	.word	0x0800c9e8

08009660 <__pow5mult>:
 8009660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009664:	4615      	mov	r5, r2
 8009666:	f012 0203 	ands.w	r2, r2, #3
 800966a:	4606      	mov	r6, r0
 800966c:	460f      	mov	r7, r1
 800966e:	d007      	beq.n	8009680 <__pow5mult+0x20>
 8009670:	4c25      	ldr	r4, [pc, #148]	; (8009708 <__pow5mult+0xa8>)
 8009672:	3a01      	subs	r2, #1
 8009674:	2300      	movs	r3, #0
 8009676:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800967a:	f7ff fe55 	bl	8009328 <__multadd>
 800967e:	4607      	mov	r7, r0
 8009680:	10ad      	asrs	r5, r5, #2
 8009682:	d03d      	beq.n	8009700 <__pow5mult+0xa0>
 8009684:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009686:	b97c      	cbnz	r4, 80096a8 <__pow5mult+0x48>
 8009688:	2010      	movs	r0, #16
 800968a:	f7ff fdc3 	bl	8009214 <malloc>
 800968e:	4602      	mov	r2, r0
 8009690:	6270      	str	r0, [r6, #36]	; 0x24
 8009692:	b928      	cbnz	r0, 80096a0 <__pow5mult+0x40>
 8009694:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009698:	4b1c      	ldr	r3, [pc, #112]	; (800970c <__pow5mult+0xac>)
 800969a:	481d      	ldr	r0, [pc, #116]	; (8009710 <__pow5mult+0xb0>)
 800969c:	f7fe fba4 	bl	8007de8 <__assert_func>
 80096a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096a4:	6004      	str	r4, [r0, #0]
 80096a6:	60c4      	str	r4, [r0, #12]
 80096a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096b0:	b94c      	cbnz	r4, 80096c6 <__pow5mult+0x66>
 80096b2:	f240 2171 	movw	r1, #625	; 0x271
 80096b6:	4630      	mov	r0, r6
 80096b8:	f7ff ff18 	bl	80094ec <__i2b>
 80096bc:	2300      	movs	r3, #0
 80096be:	4604      	mov	r4, r0
 80096c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80096c4:	6003      	str	r3, [r0, #0]
 80096c6:	f04f 0900 	mov.w	r9, #0
 80096ca:	07eb      	lsls	r3, r5, #31
 80096cc:	d50a      	bpl.n	80096e4 <__pow5mult+0x84>
 80096ce:	4639      	mov	r1, r7
 80096d0:	4622      	mov	r2, r4
 80096d2:	4630      	mov	r0, r6
 80096d4:	f7ff ff20 	bl	8009518 <__multiply>
 80096d8:	4680      	mov	r8, r0
 80096da:	4639      	mov	r1, r7
 80096dc:	4630      	mov	r0, r6
 80096de:	f7ff fe01 	bl	80092e4 <_Bfree>
 80096e2:	4647      	mov	r7, r8
 80096e4:	106d      	asrs	r5, r5, #1
 80096e6:	d00b      	beq.n	8009700 <__pow5mult+0xa0>
 80096e8:	6820      	ldr	r0, [r4, #0]
 80096ea:	b938      	cbnz	r0, 80096fc <__pow5mult+0x9c>
 80096ec:	4622      	mov	r2, r4
 80096ee:	4621      	mov	r1, r4
 80096f0:	4630      	mov	r0, r6
 80096f2:	f7ff ff11 	bl	8009518 <__multiply>
 80096f6:	6020      	str	r0, [r4, #0]
 80096f8:	f8c0 9000 	str.w	r9, [r0]
 80096fc:	4604      	mov	r4, r0
 80096fe:	e7e4      	b.n	80096ca <__pow5mult+0x6a>
 8009700:	4638      	mov	r0, r7
 8009702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009706:	bf00      	nop
 8009708:	0800cb38 	.word	0x0800cb38
 800970c:	0800c838 	.word	0x0800c838
 8009710:	0800c9e8 	.word	0x0800c9e8

08009714 <__lshift>:
 8009714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009718:	460c      	mov	r4, r1
 800971a:	4607      	mov	r7, r0
 800971c:	4691      	mov	r9, r2
 800971e:	6923      	ldr	r3, [r4, #16]
 8009720:	6849      	ldr	r1, [r1, #4]
 8009722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009726:	68a3      	ldr	r3, [r4, #8]
 8009728:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800972c:	f108 0601 	add.w	r6, r8, #1
 8009730:	42b3      	cmp	r3, r6
 8009732:	db0b      	blt.n	800974c <__lshift+0x38>
 8009734:	4638      	mov	r0, r7
 8009736:	f7ff fd95 	bl	8009264 <_Balloc>
 800973a:	4605      	mov	r5, r0
 800973c:	b948      	cbnz	r0, 8009752 <__lshift+0x3e>
 800973e:	4602      	mov	r2, r0
 8009740:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009744:	4b27      	ldr	r3, [pc, #156]	; (80097e4 <__lshift+0xd0>)
 8009746:	4828      	ldr	r0, [pc, #160]	; (80097e8 <__lshift+0xd4>)
 8009748:	f7fe fb4e 	bl	8007de8 <__assert_func>
 800974c:	3101      	adds	r1, #1
 800974e:	005b      	lsls	r3, r3, #1
 8009750:	e7ee      	b.n	8009730 <__lshift+0x1c>
 8009752:	2300      	movs	r3, #0
 8009754:	f100 0114 	add.w	r1, r0, #20
 8009758:	f100 0210 	add.w	r2, r0, #16
 800975c:	4618      	mov	r0, r3
 800975e:	4553      	cmp	r3, sl
 8009760:	db33      	blt.n	80097ca <__lshift+0xb6>
 8009762:	6920      	ldr	r0, [r4, #16]
 8009764:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009768:	f104 0314 	add.w	r3, r4, #20
 800976c:	f019 091f 	ands.w	r9, r9, #31
 8009770:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009774:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009778:	d02b      	beq.n	80097d2 <__lshift+0xbe>
 800977a:	468a      	mov	sl, r1
 800977c:	2200      	movs	r2, #0
 800977e:	f1c9 0e20 	rsb	lr, r9, #32
 8009782:	6818      	ldr	r0, [r3, #0]
 8009784:	fa00 f009 	lsl.w	r0, r0, r9
 8009788:	4302      	orrs	r2, r0
 800978a:	f84a 2b04 	str.w	r2, [sl], #4
 800978e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009792:	459c      	cmp	ip, r3
 8009794:	fa22 f20e 	lsr.w	r2, r2, lr
 8009798:	d8f3      	bhi.n	8009782 <__lshift+0x6e>
 800979a:	ebac 0304 	sub.w	r3, ip, r4
 800979e:	3b15      	subs	r3, #21
 80097a0:	f023 0303 	bic.w	r3, r3, #3
 80097a4:	3304      	adds	r3, #4
 80097a6:	f104 0015 	add.w	r0, r4, #21
 80097aa:	4584      	cmp	ip, r0
 80097ac:	bf38      	it	cc
 80097ae:	2304      	movcc	r3, #4
 80097b0:	50ca      	str	r2, [r1, r3]
 80097b2:	b10a      	cbz	r2, 80097b8 <__lshift+0xa4>
 80097b4:	f108 0602 	add.w	r6, r8, #2
 80097b8:	3e01      	subs	r6, #1
 80097ba:	4638      	mov	r0, r7
 80097bc:	4621      	mov	r1, r4
 80097be:	612e      	str	r6, [r5, #16]
 80097c0:	f7ff fd90 	bl	80092e4 <_Bfree>
 80097c4:	4628      	mov	r0, r5
 80097c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80097ce:	3301      	adds	r3, #1
 80097d0:	e7c5      	b.n	800975e <__lshift+0x4a>
 80097d2:	3904      	subs	r1, #4
 80097d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80097d8:	459c      	cmp	ip, r3
 80097da:	f841 2f04 	str.w	r2, [r1, #4]!
 80097de:	d8f9      	bhi.n	80097d4 <__lshift+0xc0>
 80097e0:	e7ea      	b.n	80097b8 <__lshift+0xa4>
 80097e2:	bf00      	nop
 80097e4:	0800c958 	.word	0x0800c958
 80097e8:	0800c9e8 	.word	0x0800c9e8

080097ec <__mcmp>:
 80097ec:	4603      	mov	r3, r0
 80097ee:	690a      	ldr	r2, [r1, #16]
 80097f0:	6900      	ldr	r0, [r0, #16]
 80097f2:	b530      	push	{r4, r5, lr}
 80097f4:	1a80      	subs	r0, r0, r2
 80097f6:	d10d      	bne.n	8009814 <__mcmp+0x28>
 80097f8:	3314      	adds	r3, #20
 80097fa:	3114      	adds	r1, #20
 80097fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009800:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009804:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009808:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800980c:	4295      	cmp	r5, r2
 800980e:	d002      	beq.n	8009816 <__mcmp+0x2a>
 8009810:	d304      	bcc.n	800981c <__mcmp+0x30>
 8009812:	2001      	movs	r0, #1
 8009814:	bd30      	pop	{r4, r5, pc}
 8009816:	42a3      	cmp	r3, r4
 8009818:	d3f4      	bcc.n	8009804 <__mcmp+0x18>
 800981a:	e7fb      	b.n	8009814 <__mcmp+0x28>
 800981c:	f04f 30ff 	mov.w	r0, #4294967295
 8009820:	e7f8      	b.n	8009814 <__mcmp+0x28>
	...

08009824 <__mdiff>:
 8009824:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009828:	460c      	mov	r4, r1
 800982a:	4606      	mov	r6, r0
 800982c:	4611      	mov	r1, r2
 800982e:	4620      	mov	r0, r4
 8009830:	4692      	mov	sl, r2
 8009832:	f7ff ffdb 	bl	80097ec <__mcmp>
 8009836:	1e05      	subs	r5, r0, #0
 8009838:	d111      	bne.n	800985e <__mdiff+0x3a>
 800983a:	4629      	mov	r1, r5
 800983c:	4630      	mov	r0, r6
 800983e:	f7ff fd11 	bl	8009264 <_Balloc>
 8009842:	4602      	mov	r2, r0
 8009844:	b928      	cbnz	r0, 8009852 <__mdiff+0x2e>
 8009846:	f240 2132 	movw	r1, #562	; 0x232
 800984a:	4b3c      	ldr	r3, [pc, #240]	; (800993c <__mdiff+0x118>)
 800984c:	483c      	ldr	r0, [pc, #240]	; (8009940 <__mdiff+0x11c>)
 800984e:	f7fe facb 	bl	8007de8 <__assert_func>
 8009852:	2301      	movs	r3, #1
 8009854:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009858:	4610      	mov	r0, r2
 800985a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985e:	bfa4      	itt	ge
 8009860:	4653      	movge	r3, sl
 8009862:	46a2      	movge	sl, r4
 8009864:	4630      	mov	r0, r6
 8009866:	f8da 1004 	ldr.w	r1, [sl, #4]
 800986a:	bfa6      	itte	ge
 800986c:	461c      	movge	r4, r3
 800986e:	2500      	movge	r5, #0
 8009870:	2501      	movlt	r5, #1
 8009872:	f7ff fcf7 	bl	8009264 <_Balloc>
 8009876:	4602      	mov	r2, r0
 8009878:	b918      	cbnz	r0, 8009882 <__mdiff+0x5e>
 800987a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800987e:	4b2f      	ldr	r3, [pc, #188]	; (800993c <__mdiff+0x118>)
 8009880:	e7e4      	b.n	800984c <__mdiff+0x28>
 8009882:	f100 0814 	add.w	r8, r0, #20
 8009886:	f8da 7010 	ldr.w	r7, [sl, #16]
 800988a:	60c5      	str	r5, [r0, #12]
 800988c:	f04f 0c00 	mov.w	ip, #0
 8009890:	f10a 0514 	add.w	r5, sl, #20
 8009894:	f10a 0010 	add.w	r0, sl, #16
 8009898:	46c2      	mov	sl, r8
 800989a:	6926      	ldr	r6, [r4, #16]
 800989c:	f104 0914 	add.w	r9, r4, #20
 80098a0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80098a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80098a8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80098ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80098b0:	fa1f f18b 	uxth.w	r1, fp
 80098b4:	4461      	add	r1, ip
 80098b6:	fa1f fc83 	uxth.w	ip, r3
 80098ba:	0c1b      	lsrs	r3, r3, #16
 80098bc:	eba1 010c 	sub.w	r1, r1, ip
 80098c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098c4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80098c8:	b289      	uxth	r1, r1
 80098ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80098ce:	454e      	cmp	r6, r9
 80098d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80098d4:	f84a 3b04 	str.w	r3, [sl], #4
 80098d8:	d8e6      	bhi.n	80098a8 <__mdiff+0x84>
 80098da:	1b33      	subs	r3, r6, r4
 80098dc:	3b15      	subs	r3, #21
 80098de:	f023 0303 	bic.w	r3, r3, #3
 80098e2:	3415      	adds	r4, #21
 80098e4:	3304      	adds	r3, #4
 80098e6:	42a6      	cmp	r6, r4
 80098e8:	bf38      	it	cc
 80098ea:	2304      	movcc	r3, #4
 80098ec:	441d      	add	r5, r3
 80098ee:	4443      	add	r3, r8
 80098f0:	461e      	mov	r6, r3
 80098f2:	462c      	mov	r4, r5
 80098f4:	4574      	cmp	r4, lr
 80098f6:	d30e      	bcc.n	8009916 <__mdiff+0xf2>
 80098f8:	f10e 0103 	add.w	r1, lr, #3
 80098fc:	1b49      	subs	r1, r1, r5
 80098fe:	f021 0103 	bic.w	r1, r1, #3
 8009902:	3d03      	subs	r5, #3
 8009904:	45ae      	cmp	lr, r5
 8009906:	bf38      	it	cc
 8009908:	2100      	movcc	r1, #0
 800990a:	4419      	add	r1, r3
 800990c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009910:	b18b      	cbz	r3, 8009936 <__mdiff+0x112>
 8009912:	6117      	str	r7, [r2, #16]
 8009914:	e7a0      	b.n	8009858 <__mdiff+0x34>
 8009916:	f854 8b04 	ldr.w	r8, [r4], #4
 800991a:	fa1f f188 	uxth.w	r1, r8
 800991e:	4461      	add	r1, ip
 8009920:	1408      	asrs	r0, r1, #16
 8009922:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009926:	b289      	uxth	r1, r1
 8009928:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800992c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009930:	f846 1b04 	str.w	r1, [r6], #4
 8009934:	e7de      	b.n	80098f4 <__mdiff+0xd0>
 8009936:	3f01      	subs	r7, #1
 8009938:	e7e8      	b.n	800990c <__mdiff+0xe8>
 800993a:	bf00      	nop
 800993c:	0800c958 	.word	0x0800c958
 8009940:	0800c9e8 	.word	0x0800c9e8

08009944 <__ulp>:
 8009944:	4b11      	ldr	r3, [pc, #68]	; (800998c <__ulp+0x48>)
 8009946:	400b      	ands	r3, r1
 8009948:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800994c:	2b00      	cmp	r3, #0
 800994e:	dd02      	ble.n	8009956 <__ulp+0x12>
 8009950:	2000      	movs	r0, #0
 8009952:	4619      	mov	r1, r3
 8009954:	4770      	bx	lr
 8009956:	425b      	negs	r3, r3
 8009958:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800995c:	f04f 0000 	mov.w	r0, #0
 8009960:	f04f 0100 	mov.w	r1, #0
 8009964:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009968:	da04      	bge.n	8009974 <__ulp+0x30>
 800996a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800996e:	fa43 f102 	asr.w	r1, r3, r2
 8009972:	4770      	bx	lr
 8009974:	f1a2 0314 	sub.w	r3, r2, #20
 8009978:	2b1e      	cmp	r3, #30
 800997a:	bfd6      	itet	le
 800997c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009980:	2301      	movgt	r3, #1
 8009982:	fa22 f303 	lsrle.w	r3, r2, r3
 8009986:	4618      	mov	r0, r3
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	7ff00000 	.word	0x7ff00000

08009990 <__b2d>:
 8009990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009994:	6907      	ldr	r7, [r0, #16]
 8009996:	f100 0914 	add.w	r9, r0, #20
 800999a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800999e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80099a2:	f1a7 0804 	sub.w	r8, r7, #4
 80099a6:	4630      	mov	r0, r6
 80099a8:	f7ff fd52 	bl	8009450 <__hi0bits>
 80099ac:	f1c0 0320 	rsb	r3, r0, #32
 80099b0:	280a      	cmp	r0, #10
 80099b2:	600b      	str	r3, [r1, #0]
 80099b4:	491f      	ldr	r1, [pc, #124]	; (8009a34 <__b2d+0xa4>)
 80099b6:	dc17      	bgt.n	80099e8 <__b2d+0x58>
 80099b8:	45c1      	cmp	r9, r8
 80099ba:	bf28      	it	cs
 80099bc:	2200      	movcs	r2, #0
 80099be:	f1c0 0c0b 	rsb	ip, r0, #11
 80099c2:	fa26 f30c 	lsr.w	r3, r6, ip
 80099c6:	bf38      	it	cc
 80099c8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80099cc:	ea43 0501 	orr.w	r5, r3, r1
 80099d0:	f100 0315 	add.w	r3, r0, #21
 80099d4:	fa06 f303 	lsl.w	r3, r6, r3
 80099d8:	fa22 f20c 	lsr.w	r2, r2, ip
 80099dc:	ea43 0402 	orr.w	r4, r3, r2
 80099e0:	4620      	mov	r0, r4
 80099e2:	4629      	mov	r1, r5
 80099e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099e8:	45c1      	cmp	r9, r8
 80099ea:	bf2e      	itee	cs
 80099ec:	2200      	movcs	r2, #0
 80099ee:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80099f2:	f1a7 0808 	subcc.w	r8, r7, #8
 80099f6:	f1b0 030b 	subs.w	r3, r0, #11
 80099fa:	d016      	beq.n	8009a2a <__b2d+0x9a>
 80099fc:	f1c3 0720 	rsb	r7, r3, #32
 8009a00:	fa22 f107 	lsr.w	r1, r2, r7
 8009a04:	45c8      	cmp	r8, r9
 8009a06:	fa06 f603 	lsl.w	r6, r6, r3
 8009a0a:	ea46 0601 	orr.w	r6, r6, r1
 8009a0e:	bf94      	ite	ls
 8009a10:	2100      	movls	r1, #0
 8009a12:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009a16:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009a1a:	fa02 f003 	lsl.w	r0, r2, r3
 8009a1e:	40f9      	lsrs	r1, r7
 8009a20:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009a24:	ea40 0401 	orr.w	r4, r0, r1
 8009a28:	e7da      	b.n	80099e0 <__b2d+0x50>
 8009a2a:	4614      	mov	r4, r2
 8009a2c:	ea46 0501 	orr.w	r5, r6, r1
 8009a30:	e7d6      	b.n	80099e0 <__b2d+0x50>
 8009a32:	bf00      	nop
 8009a34:	3ff00000 	.word	0x3ff00000

08009a38 <__d2b>:
 8009a38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009a42:	4690      	mov	r8, r2
 8009a44:	461d      	mov	r5, r3
 8009a46:	f7ff fc0d 	bl	8009264 <_Balloc>
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	b930      	cbnz	r0, 8009a5c <__d2b+0x24>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	f240 310a 	movw	r1, #778	; 0x30a
 8009a54:	4b24      	ldr	r3, [pc, #144]	; (8009ae8 <__d2b+0xb0>)
 8009a56:	4825      	ldr	r0, [pc, #148]	; (8009aec <__d2b+0xb4>)
 8009a58:	f7fe f9c6 	bl	8007de8 <__assert_func>
 8009a5c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009a60:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009a64:	bb2d      	cbnz	r5, 8009ab2 <__d2b+0x7a>
 8009a66:	9301      	str	r3, [sp, #4]
 8009a68:	f1b8 0300 	subs.w	r3, r8, #0
 8009a6c:	d026      	beq.n	8009abc <__d2b+0x84>
 8009a6e:	4668      	mov	r0, sp
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	f7ff fd0d 	bl	8009490 <__lo0bits>
 8009a76:	9900      	ldr	r1, [sp, #0]
 8009a78:	b1f0      	cbz	r0, 8009ab8 <__d2b+0x80>
 8009a7a:	9a01      	ldr	r2, [sp, #4]
 8009a7c:	f1c0 0320 	rsb	r3, r0, #32
 8009a80:	fa02 f303 	lsl.w	r3, r2, r3
 8009a84:	430b      	orrs	r3, r1
 8009a86:	40c2      	lsrs	r2, r0
 8009a88:	6163      	str	r3, [r4, #20]
 8009a8a:	9201      	str	r2, [sp, #4]
 8009a8c:	9b01      	ldr	r3, [sp, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	bf14      	ite	ne
 8009a92:	2102      	movne	r1, #2
 8009a94:	2101      	moveq	r1, #1
 8009a96:	61a3      	str	r3, [r4, #24]
 8009a98:	6121      	str	r1, [r4, #16]
 8009a9a:	b1c5      	cbz	r5, 8009ace <__d2b+0x96>
 8009a9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009aa0:	4405      	add	r5, r0
 8009aa2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009aa6:	603d      	str	r5, [r7, #0]
 8009aa8:	6030      	str	r0, [r6, #0]
 8009aaa:	4620      	mov	r0, r4
 8009aac:	b002      	add	sp, #8
 8009aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ab6:	e7d6      	b.n	8009a66 <__d2b+0x2e>
 8009ab8:	6161      	str	r1, [r4, #20]
 8009aba:	e7e7      	b.n	8009a8c <__d2b+0x54>
 8009abc:	a801      	add	r0, sp, #4
 8009abe:	f7ff fce7 	bl	8009490 <__lo0bits>
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	9b01      	ldr	r3, [sp, #4]
 8009ac6:	6121      	str	r1, [r4, #16]
 8009ac8:	6163      	str	r3, [r4, #20]
 8009aca:	3020      	adds	r0, #32
 8009acc:	e7e5      	b.n	8009a9a <__d2b+0x62>
 8009ace:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009ad2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ad6:	6038      	str	r0, [r7, #0]
 8009ad8:	6918      	ldr	r0, [r3, #16]
 8009ada:	f7ff fcb9 	bl	8009450 <__hi0bits>
 8009ade:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009ae2:	6031      	str	r1, [r6, #0]
 8009ae4:	e7e1      	b.n	8009aaa <__d2b+0x72>
 8009ae6:	bf00      	nop
 8009ae8:	0800c958 	.word	0x0800c958
 8009aec:	0800c9e8 	.word	0x0800c9e8

08009af0 <__ratio>:
 8009af0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af4:	4688      	mov	r8, r1
 8009af6:	4669      	mov	r1, sp
 8009af8:	4681      	mov	r9, r0
 8009afa:	f7ff ff49 	bl	8009990 <__b2d>
 8009afe:	460f      	mov	r7, r1
 8009b00:	4604      	mov	r4, r0
 8009b02:	460d      	mov	r5, r1
 8009b04:	4640      	mov	r0, r8
 8009b06:	a901      	add	r1, sp, #4
 8009b08:	f7ff ff42 	bl	8009990 <__b2d>
 8009b0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b10:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009b14:	468b      	mov	fp, r1
 8009b16:	eba3 0c02 	sub.w	ip, r3, r2
 8009b1a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b1e:	1a9b      	subs	r3, r3, r2
 8009b20:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	bfd5      	itete	le
 8009b28:	460a      	movle	r2, r1
 8009b2a:	462a      	movgt	r2, r5
 8009b2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b30:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b34:	bfd8      	it	le
 8009b36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009b3a:	465b      	mov	r3, fp
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	4639      	mov	r1, r7
 8009b40:	4620      	mov	r0, r4
 8009b42:	f7f6 fdfd 	bl	8000740 <__aeabi_ddiv>
 8009b46:	b003      	add	sp, #12
 8009b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b4c <__copybits>:
 8009b4c:	3901      	subs	r1, #1
 8009b4e:	b570      	push	{r4, r5, r6, lr}
 8009b50:	1149      	asrs	r1, r1, #5
 8009b52:	6914      	ldr	r4, [r2, #16]
 8009b54:	3101      	adds	r1, #1
 8009b56:	f102 0314 	add.w	r3, r2, #20
 8009b5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b62:	1f05      	subs	r5, r0, #4
 8009b64:	42a3      	cmp	r3, r4
 8009b66:	d30c      	bcc.n	8009b82 <__copybits+0x36>
 8009b68:	1aa3      	subs	r3, r4, r2
 8009b6a:	3b11      	subs	r3, #17
 8009b6c:	f023 0303 	bic.w	r3, r3, #3
 8009b70:	3211      	adds	r2, #17
 8009b72:	42a2      	cmp	r2, r4
 8009b74:	bf88      	it	hi
 8009b76:	2300      	movhi	r3, #0
 8009b78:	4418      	add	r0, r3
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	4288      	cmp	r0, r1
 8009b7e:	d305      	bcc.n	8009b8c <__copybits+0x40>
 8009b80:	bd70      	pop	{r4, r5, r6, pc}
 8009b82:	f853 6b04 	ldr.w	r6, [r3], #4
 8009b86:	f845 6f04 	str.w	r6, [r5, #4]!
 8009b8a:	e7eb      	b.n	8009b64 <__copybits+0x18>
 8009b8c:	f840 3b04 	str.w	r3, [r0], #4
 8009b90:	e7f4      	b.n	8009b7c <__copybits+0x30>

08009b92 <__any_on>:
 8009b92:	f100 0214 	add.w	r2, r0, #20
 8009b96:	6900      	ldr	r0, [r0, #16]
 8009b98:	114b      	asrs	r3, r1, #5
 8009b9a:	4298      	cmp	r0, r3
 8009b9c:	b510      	push	{r4, lr}
 8009b9e:	db11      	blt.n	8009bc4 <__any_on+0x32>
 8009ba0:	dd0a      	ble.n	8009bb8 <__any_on+0x26>
 8009ba2:	f011 011f 	ands.w	r1, r1, #31
 8009ba6:	d007      	beq.n	8009bb8 <__any_on+0x26>
 8009ba8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009bac:	fa24 f001 	lsr.w	r0, r4, r1
 8009bb0:	fa00 f101 	lsl.w	r1, r0, r1
 8009bb4:	428c      	cmp	r4, r1
 8009bb6:	d10b      	bne.n	8009bd0 <__any_on+0x3e>
 8009bb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d803      	bhi.n	8009bc8 <__any_on+0x36>
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	bd10      	pop	{r4, pc}
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	e7f7      	b.n	8009bb8 <__any_on+0x26>
 8009bc8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bcc:	2900      	cmp	r1, #0
 8009bce:	d0f5      	beq.n	8009bbc <__any_on+0x2a>
 8009bd0:	2001      	movs	r0, #1
 8009bd2:	e7f6      	b.n	8009bc2 <__any_on+0x30>

08009bd4 <_calloc_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	fb02 f501 	mul.w	r5, r2, r1
 8009bda:	4629      	mov	r1, r5
 8009bdc:	f000 f854 	bl	8009c88 <_malloc_r>
 8009be0:	4604      	mov	r4, r0
 8009be2:	b118      	cbz	r0, 8009bec <_calloc_r+0x18>
 8009be4:	462a      	mov	r2, r5
 8009be6:	2100      	movs	r1, #0
 8009be8:	f7fc fde4 	bl	80067b4 <memset>
 8009bec:	4620      	mov	r0, r4
 8009bee:	bd38      	pop	{r3, r4, r5, pc}

08009bf0 <_free_r>:
 8009bf0:	b538      	push	{r3, r4, r5, lr}
 8009bf2:	4605      	mov	r5, r0
 8009bf4:	2900      	cmp	r1, #0
 8009bf6:	d043      	beq.n	8009c80 <_free_r+0x90>
 8009bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bfc:	1f0c      	subs	r4, r1, #4
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	bfb8      	it	lt
 8009c02:	18e4      	addlt	r4, r4, r3
 8009c04:	f000 fe84 	bl	800a910 <__malloc_lock>
 8009c08:	4a1e      	ldr	r2, [pc, #120]	; (8009c84 <_free_r+0x94>)
 8009c0a:	6813      	ldr	r3, [r2, #0]
 8009c0c:	4610      	mov	r0, r2
 8009c0e:	b933      	cbnz	r3, 8009c1e <_free_r+0x2e>
 8009c10:	6063      	str	r3, [r4, #4]
 8009c12:	6014      	str	r4, [r2, #0]
 8009c14:	4628      	mov	r0, r5
 8009c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c1a:	f000 be7f 	b.w	800a91c <__malloc_unlock>
 8009c1e:	42a3      	cmp	r3, r4
 8009c20:	d90a      	bls.n	8009c38 <_free_r+0x48>
 8009c22:	6821      	ldr	r1, [r4, #0]
 8009c24:	1862      	adds	r2, r4, r1
 8009c26:	4293      	cmp	r3, r2
 8009c28:	bf01      	itttt	eq
 8009c2a:	681a      	ldreq	r2, [r3, #0]
 8009c2c:	685b      	ldreq	r3, [r3, #4]
 8009c2e:	1852      	addeq	r2, r2, r1
 8009c30:	6022      	streq	r2, [r4, #0]
 8009c32:	6063      	str	r3, [r4, #4]
 8009c34:	6004      	str	r4, [r0, #0]
 8009c36:	e7ed      	b.n	8009c14 <_free_r+0x24>
 8009c38:	461a      	mov	r2, r3
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	b10b      	cbz	r3, 8009c42 <_free_r+0x52>
 8009c3e:	42a3      	cmp	r3, r4
 8009c40:	d9fa      	bls.n	8009c38 <_free_r+0x48>
 8009c42:	6811      	ldr	r1, [r2, #0]
 8009c44:	1850      	adds	r0, r2, r1
 8009c46:	42a0      	cmp	r0, r4
 8009c48:	d10b      	bne.n	8009c62 <_free_r+0x72>
 8009c4a:	6820      	ldr	r0, [r4, #0]
 8009c4c:	4401      	add	r1, r0
 8009c4e:	1850      	adds	r0, r2, r1
 8009c50:	4283      	cmp	r3, r0
 8009c52:	6011      	str	r1, [r2, #0]
 8009c54:	d1de      	bne.n	8009c14 <_free_r+0x24>
 8009c56:	6818      	ldr	r0, [r3, #0]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	4401      	add	r1, r0
 8009c5c:	6011      	str	r1, [r2, #0]
 8009c5e:	6053      	str	r3, [r2, #4]
 8009c60:	e7d8      	b.n	8009c14 <_free_r+0x24>
 8009c62:	d902      	bls.n	8009c6a <_free_r+0x7a>
 8009c64:	230c      	movs	r3, #12
 8009c66:	602b      	str	r3, [r5, #0]
 8009c68:	e7d4      	b.n	8009c14 <_free_r+0x24>
 8009c6a:	6820      	ldr	r0, [r4, #0]
 8009c6c:	1821      	adds	r1, r4, r0
 8009c6e:	428b      	cmp	r3, r1
 8009c70:	bf01      	itttt	eq
 8009c72:	6819      	ldreq	r1, [r3, #0]
 8009c74:	685b      	ldreq	r3, [r3, #4]
 8009c76:	1809      	addeq	r1, r1, r0
 8009c78:	6021      	streq	r1, [r4, #0]
 8009c7a:	6063      	str	r3, [r4, #4]
 8009c7c:	6054      	str	r4, [r2, #4]
 8009c7e:	e7c9      	b.n	8009c14 <_free_r+0x24>
 8009c80:	bd38      	pop	{r3, r4, r5, pc}
 8009c82:	bf00      	nop
 8009c84:	20000400 	.word	0x20000400

08009c88 <_malloc_r>:
 8009c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8a:	1ccd      	adds	r5, r1, #3
 8009c8c:	f025 0503 	bic.w	r5, r5, #3
 8009c90:	3508      	adds	r5, #8
 8009c92:	2d0c      	cmp	r5, #12
 8009c94:	bf38      	it	cc
 8009c96:	250c      	movcc	r5, #12
 8009c98:	2d00      	cmp	r5, #0
 8009c9a:	4606      	mov	r6, r0
 8009c9c:	db01      	blt.n	8009ca2 <_malloc_r+0x1a>
 8009c9e:	42a9      	cmp	r1, r5
 8009ca0:	d903      	bls.n	8009caa <_malloc_r+0x22>
 8009ca2:	230c      	movs	r3, #12
 8009ca4:	6033      	str	r3, [r6, #0]
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009caa:	f000 fe31 	bl	800a910 <__malloc_lock>
 8009cae:	4921      	ldr	r1, [pc, #132]	; (8009d34 <_malloc_r+0xac>)
 8009cb0:	680a      	ldr	r2, [r1, #0]
 8009cb2:	4614      	mov	r4, r2
 8009cb4:	b99c      	cbnz	r4, 8009cde <_malloc_r+0x56>
 8009cb6:	4f20      	ldr	r7, [pc, #128]	; (8009d38 <_malloc_r+0xb0>)
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	b923      	cbnz	r3, 8009cc6 <_malloc_r+0x3e>
 8009cbc:	4621      	mov	r1, r4
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	f000 faf6 	bl	800a2b0 <_sbrk_r>
 8009cc4:	6038      	str	r0, [r7, #0]
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f000 faf1 	bl	800a2b0 <_sbrk_r>
 8009cce:	1c43      	adds	r3, r0, #1
 8009cd0:	d123      	bne.n	8009d1a <_malloc_r+0x92>
 8009cd2:	230c      	movs	r3, #12
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	6033      	str	r3, [r6, #0]
 8009cd8:	f000 fe20 	bl	800a91c <__malloc_unlock>
 8009cdc:	e7e3      	b.n	8009ca6 <_malloc_r+0x1e>
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	1b5b      	subs	r3, r3, r5
 8009ce2:	d417      	bmi.n	8009d14 <_malloc_r+0x8c>
 8009ce4:	2b0b      	cmp	r3, #11
 8009ce6:	d903      	bls.n	8009cf0 <_malloc_r+0x68>
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	441c      	add	r4, r3
 8009cec:	6025      	str	r5, [r4, #0]
 8009cee:	e004      	b.n	8009cfa <_malloc_r+0x72>
 8009cf0:	6863      	ldr	r3, [r4, #4]
 8009cf2:	42a2      	cmp	r2, r4
 8009cf4:	bf0c      	ite	eq
 8009cf6:	600b      	streq	r3, [r1, #0]
 8009cf8:	6053      	strne	r3, [r2, #4]
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	f000 fe0e 	bl	800a91c <__malloc_unlock>
 8009d00:	f104 000b 	add.w	r0, r4, #11
 8009d04:	1d23      	adds	r3, r4, #4
 8009d06:	f020 0007 	bic.w	r0, r0, #7
 8009d0a:	1ac2      	subs	r2, r0, r3
 8009d0c:	d0cc      	beq.n	8009ca8 <_malloc_r+0x20>
 8009d0e:	1a1b      	subs	r3, r3, r0
 8009d10:	50a3      	str	r3, [r4, r2]
 8009d12:	e7c9      	b.n	8009ca8 <_malloc_r+0x20>
 8009d14:	4622      	mov	r2, r4
 8009d16:	6864      	ldr	r4, [r4, #4]
 8009d18:	e7cc      	b.n	8009cb4 <_malloc_r+0x2c>
 8009d1a:	1cc4      	adds	r4, r0, #3
 8009d1c:	f024 0403 	bic.w	r4, r4, #3
 8009d20:	42a0      	cmp	r0, r4
 8009d22:	d0e3      	beq.n	8009cec <_malloc_r+0x64>
 8009d24:	1a21      	subs	r1, r4, r0
 8009d26:	4630      	mov	r0, r6
 8009d28:	f000 fac2 	bl	800a2b0 <_sbrk_r>
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	d1dd      	bne.n	8009cec <_malloc_r+0x64>
 8009d30:	e7cf      	b.n	8009cd2 <_malloc_r+0x4a>
 8009d32:	bf00      	nop
 8009d34:	20000400 	.word	0x20000400
 8009d38:	20000404 	.word	0x20000404

08009d3c <__ssputs_r>:
 8009d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d40:	688e      	ldr	r6, [r1, #8]
 8009d42:	4682      	mov	sl, r0
 8009d44:	429e      	cmp	r6, r3
 8009d46:	460c      	mov	r4, r1
 8009d48:	4690      	mov	r8, r2
 8009d4a:	461f      	mov	r7, r3
 8009d4c:	d838      	bhi.n	8009dc0 <__ssputs_r+0x84>
 8009d4e:	898a      	ldrh	r2, [r1, #12]
 8009d50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d54:	d032      	beq.n	8009dbc <__ssputs_r+0x80>
 8009d56:	6825      	ldr	r5, [r4, #0]
 8009d58:	6909      	ldr	r1, [r1, #16]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	eba5 0901 	sub.w	r9, r5, r1
 8009d60:	6965      	ldr	r5, [r4, #20]
 8009d62:	444b      	add	r3, r9
 8009d64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d6c:	106d      	asrs	r5, r5, #1
 8009d6e:	429d      	cmp	r5, r3
 8009d70:	bf38      	it	cc
 8009d72:	461d      	movcc	r5, r3
 8009d74:	0553      	lsls	r3, r2, #21
 8009d76:	d531      	bpl.n	8009ddc <__ssputs_r+0xa0>
 8009d78:	4629      	mov	r1, r5
 8009d7a:	f7ff ff85 	bl	8009c88 <_malloc_r>
 8009d7e:	4606      	mov	r6, r0
 8009d80:	b950      	cbnz	r0, 8009d98 <__ssputs_r+0x5c>
 8009d82:	230c      	movs	r3, #12
 8009d84:	f04f 30ff 	mov.w	r0, #4294967295
 8009d88:	f8ca 3000 	str.w	r3, [sl]
 8009d8c:	89a3      	ldrh	r3, [r4, #12]
 8009d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d92:	81a3      	strh	r3, [r4, #12]
 8009d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d98:	464a      	mov	r2, r9
 8009d9a:	6921      	ldr	r1, [r4, #16]
 8009d9c:	f7fc fcfc 	bl	8006798 <memcpy>
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009daa:	81a3      	strh	r3, [r4, #12]
 8009dac:	6126      	str	r6, [r4, #16]
 8009dae:	444e      	add	r6, r9
 8009db0:	6026      	str	r6, [r4, #0]
 8009db2:	463e      	mov	r6, r7
 8009db4:	6165      	str	r5, [r4, #20]
 8009db6:	eba5 0509 	sub.w	r5, r5, r9
 8009dba:	60a5      	str	r5, [r4, #8]
 8009dbc:	42be      	cmp	r6, r7
 8009dbe:	d900      	bls.n	8009dc2 <__ssputs_r+0x86>
 8009dc0:	463e      	mov	r6, r7
 8009dc2:	4632      	mov	r2, r6
 8009dc4:	4641      	mov	r1, r8
 8009dc6:	6820      	ldr	r0, [r4, #0]
 8009dc8:	f000 fd88 	bl	800a8dc <memmove>
 8009dcc:	68a3      	ldr	r3, [r4, #8]
 8009dce:	6822      	ldr	r2, [r4, #0]
 8009dd0:	1b9b      	subs	r3, r3, r6
 8009dd2:	4432      	add	r2, r6
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	60a3      	str	r3, [r4, #8]
 8009dd8:	6022      	str	r2, [r4, #0]
 8009dda:	e7db      	b.n	8009d94 <__ssputs_r+0x58>
 8009ddc:	462a      	mov	r2, r5
 8009dde:	f000 fda3 	bl	800a928 <_realloc_r>
 8009de2:	4606      	mov	r6, r0
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d1e1      	bne.n	8009dac <__ssputs_r+0x70>
 8009de8:	4650      	mov	r0, sl
 8009dea:	6921      	ldr	r1, [r4, #16]
 8009dec:	f7ff ff00 	bl	8009bf0 <_free_r>
 8009df0:	e7c7      	b.n	8009d82 <__ssputs_r+0x46>
	...

08009df4 <_svfiprintf_r>:
 8009df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df8:	4698      	mov	r8, r3
 8009dfa:	898b      	ldrh	r3, [r1, #12]
 8009dfc:	4607      	mov	r7, r0
 8009dfe:	061b      	lsls	r3, r3, #24
 8009e00:	460d      	mov	r5, r1
 8009e02:	4614      	mov	r4, r2
 8009e04:	b09d      	sub	sp, #116	; 0x74
 8009e06:	d50e      	bpl.n	8009e26 <_svfiprintf_r+0x32>
 8009e08:	690b      	ldr	r3, [r1, #16]
 8009e0a:	b963      	cbnz	r3, 8009e26 <_svfiprintf_r+0x32>
 8009e0c:	2140      	movs	r1, #64	; 0x40
 8009e0e:	f7ff ff3b 	bl	8009c88 <_malloc_r>
 8009e12:	6028      	str	r0, [r5, #0]
 8009e14:	6128      	str	r0, [r5, #16]
 8009e16:	b920      	cbnz	r0, 8009e22 <_svfiprintf_r+0x2e>
 8009e18:	230c      	movs	r3, #12
 8009e1a:	603b      	str	r3, [r7, #0]
 8009e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e20:	e0d1      	b.n	8009fc6 <_svfiprintf_r+0x1d2>
 8009e22:	2340      	movs	r3, #64	; 0x40
 8009e24:	616b      	str	r3, [r5, #20]
 8009e26:	2300      	movs	r3, #0
 8009e28:	9309      	str	r3, [sp, #36]	; 0x24
 8009e2a:	2320      	movs	r3, #32
 8009e2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e30:	2330      	movs	r3, #48	; 0x30
 8009e32:	f04f 0901 	mov.w	r9, #1
 8009e36:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009fe0 <_svfiprintf_r+0x1ec>
 8009e3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e42:	4623      	mov	r3, r4
 8009e44:	469a      	mov	sl, r3
 8009e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e4a:	b10a      	cbz	r2, 8009e50 <_svfiprintf_r+0x5c>
 8009e4c:	2a25      	cmp	r2, #37	; 0x25
 8009e4e:	d1f9      	bne.n	8009e44 <_svfiprintf_r+0x50>
 8009e50:	ebba 0b04 	subs.w	fp, sl, r4
 8009e54:	d00b      	beq.n	8009e6e <_svfiprintf_r+0x7a>
 8009e56:	465b      	mov	r3, fp
 8009e58:	4622      	mov	r2, r4
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	4638      	mov	r0, r7
 8009e5e:	f7ff ff6d 	bl	8009d3c <__ssputs_r>
 8009e62:	3001      	adds	r0, #1
 8009e64:	f000 80aa 	beq.w	8009fbc <_svfiprintf_r+0x1c8>
 8009e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e6a:	445a      	add	r2, fp
 8009e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8009e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f000 80a2 	beq.w	8009fbc <_svfiprintf_r+0x1c8>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e82:	f10a 0a01 	add.w	sl, sl, #1
 8009e86:	9304      	str	r3, [sp, #16]
 8009e88:	9307      	str	r3, [sp, #28]
 8009e8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e8e:	931a      	str	r3, [sp, #104]	; 0x68
 8009e90:	4654      	mov	r4, sl
 8009e92:	2205      	movs	r2, #5
 8009e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e98:	4851      	ldr	r0, [pc, #324]	; (8009fe0 <_svfiprintf_r+0x1ec>)
 8009e9a:	f7ff f9d5 	bl	8009248 <memchr>
 8009e9e:	9a04      	ldr	r2, [sp, #16]
 8009ea0:	b9d8      	cbnz	r0, 8009eda <_svfiprintf_r+0xe6>
 8009ea2:	06d0      	lsls	r0, r2, #27
 8009ea4:	bf44      	itt	mi
 8009ea6:	2320      	movmi	r3, #32
 8009ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eac:	0711      	lsls	r1, r2, #28
 8009eae:	bf44      	itt	mi
 8009eb0:	232b      	movmi	r3, #43	; 0x2b
 8009eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8009eba:	2b2a      	cmp	r3, #42	; 0x2a
 8009ebc:	d015      	beq.n	8009eea <_svfiprintf_r+0xf6>
 8009ebe:	4654      	mov	r4, sl
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	f04f 0c0a 	mov.w	ip, #10
 8009ec6:	9a07      	ldr	r2, [sp, #28]
 8009ec8:	4621      	mov	r1, r4
 8009eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ece:	3b30      	subs	r3, #48	; 0x30
 8009ed0:	2b09      	cmp	r3, #9
 8009ed2:	d94e      	bls.n	8009f72 <_svfiprintf_r+0x17e>
 8009ed4:	b1b0      	cbz	r0, 8009f04 <_svfiprintf_r+0x110>
 8009ed6:	9207      	str	r2, [sp, #28]
 8009ed8:	e014      	b.n	8009f04 <_svfiprintf_r+0x110>
 8009eda:	eba0 0308 	sub.w	r3, r0, r8
 8009ede:	fa09 f303 	lsl.w	r3, r9, r3
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	46a2      	mov	sl, r4
 8009ee6:	9304      	str	r3, [sp, #16]
 8009ee8:	e7d2      	b.n	8009e90 <_svfiprintf_r+0x9c>
 8009eea:	9b03      	ldr	r3, [sp, #12]
 8009eec:	1d19      	adds	r1, r3, #4
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	9103      	str	r1, [sp, #12]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	bfbb      	ittet	lt
 8009ef6:	425b      	neglt	r3, r3
 8009ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8009efc:	9307      	strge	r3, [sp, #28]
 8009efe:	9307      	strlt	r3, [sp, #28]
 8009f00:	bfb8      	it	lt
 8009f02:	9204      	strlt	r2, [sp, #16]
 8009f04:	7823      	ldrb	r3, [r4, #0]
 8009f06:	2b2e      	cmp	r3, #46	; 0x2e
 8009f08:	d10c      	bne.n	8009f24 <_svfiprintf_r+0x130>
 8009f0a:	7863      	ldrb	r3, [r4, #1]
 8009f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8009f0e:	d135      	bne.n	8009f7c <_svfiprintf_r+0x188>
 8009f10:	9b03      	ldr	r3, [sp, #12]
 8009f12:	3402      	adds	r4, #2
 8009f14:	1d1a      	adds	r2, r3, #4
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	9203      	str	r2, [sp, #12]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	bfb8      	it	lt
 8009f1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f22:	9305      	str	r3, [sp, #20]
 8009f24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ff0 <_svfiprintf_r+0x1fc>
 8009f28:	2203      	movs	r2, #3
 8009f2a:	4650      	mov	r0, sl
 8009f2c:	7821      	ldrb	r1, [r4, #0]
 8009f2e:	f7ff f98b 	bl	8009248 <memchr>
 8009f32:	b140      	cbz	r0, 8009f46 <_svfiprintf_r+0x152>
 8009f34:	2340      	movs	r3, #64	; 0x40
 8009f36:	eba0 000a 	sub.w	r0, r0, sl
 8009f3a:	fa03 f000 	lsl.w	r0, r3, r0
 8009f3e:	9b04      	ldr	r3, [sp, #16]
 8009f40:	3401      	adds	r4, #1
 8009f42:	4303      	orrs	r3, r0
 8009f44:	9304      	str	r3, [sp, #16]
 8009f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f4a:	2206      	movs	r2, #6
 8009f4c:	4825      	ldr	r0, [pc, #148]	; (8009fe4 <_svfiprintf_r+0x1f0>)
 8009f4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f52:	f7ff f979 	bl	8009248 <memchr>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d038      	beq.n	8009fcc <_svfiprintf_r+0x1d8>
 8009f5a:	4b23      	ldr	r3, [pc, #140]	; (8009fe8 <_svfiprintf_r+0x1f4>)
 8009f5c:	bb1b      	cbnz	r3, 8009fa6 <_svfiprintf_r+0x1b2>
 8009f5e:	9b03      	ldr	r3, [sp, #12]
 8009f60:	3307      	adds	r3, #7
 8009f62:	f023 0307 	bic.w	r3, r3, #7
 8009f66:	3308      	adds	r3, #8
 8009f68:	9303      	str	r3, [sp, #12]
 8009f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f6c:	4433      	add	r3, r6
 8009f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f70:	e767      	b.n	8009e42 <_svfiprintf_r+0x4e>
 8009f72:	460c      	mov	r4, r1
 8009f74:	2001      	movs	r0, #1
 8009f76:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f7a:	e7a5      	b.n	8009ec8 <_svfiprintf_r+0xd4>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	f04f 0c0a 	mov.w	ip, #10
 8009f82:	4619      	mov	r1, r3
 8009f84:	3401      	adds	r4, #1
 8009f86:	9305      	str	r3, [sp, #20]
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f8e:	3a30      	subs	r2, #48	; 0x30
 8009f90:	2a09      	cmp	r2, #9
 8009f92:	d903      	bls.n	8009f9c <_svfiprintf_r+0x1a8>
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d0c5      	beq.n	8009f24 <_svfiprintf_r+0x130>
 8009f98:	9105      	str	r1, [sp, #20]
 8009f9a:	e7c3      	b.n	8009f24 <_svfiprintf_r+0x130>
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fa4:	e7f0      	b.n	8009f88 <_svfiprintf_r+0x194>
 8009fa6:	ab03      	add	r3, sp, #12
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	462a      	mov	r2, r5
 8009fac:	4638      	mov	r0, r7
 8009fae:	4b0f      	ldr	r3, [pc, #60]	; (8009fec <_svfiprintf_r+0x1f8>)
 8009fb0:	a904      	add	r1, sp, #16
 8009fb2:	f7fc fca5 	bl	8006900 <_printf_float>
 8009fb6:	1c42      	adds	r2, r0, #1
 8009fb8:	4606      	mov	r6, r0
 8009fba:	d1d6      	bne.n	8009f6a <_svfiprintf_r+0x176>
 8009fbc:	89ab      	ldrh	r3, [r5, #12]
 8009fbe:	065b      	lsls	r3, r3, #25
 8009fc0:	f53f af2c 	bmi.w	8009e1c <_svfiprintf_r+0x28>
 8009fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fc6:	b01d      	add	sp, #116	; 0x74
 8009fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fcc:	ab03      	add	r3, sp, #12
 8009fce:	9300      	str	r3, [sp, #0]
 8009fd0:	462a      	mov	r2, r5
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	4b05      	ldr	r3, [pc, #20]	; (8009fec <_svfiprintf_r+0x1f8>)
 8009fd6:	a904      	add	r1, sp, #16
 8009fd8:	f7fc ff2e 	bl	8006e38 <_printf_i>
 8009fdc:	e7eb      	b.n	8009fb6 <_svfiprintf_r+0x1c2>
 8009fde:	bf00      	nop
 8009fe0:	0800cb44 	.word	0x0800cb44
 8009fe4:	0800cb4e 	.word	0x0800cb4e
 8009fe8:	08006901 	.word	0x08006901
 8009fec:	08009d3d 	.word	0x08009d3d
 8009ff0:	0800cb4a 	.word	0x0800cb4a

08009ff4 <__sfputc_r>:
 8009ff4:	6893      	ldr	r3, [r2, #8]
 8009ff6:	b410      	push	{r4}
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	6093      	str	r3, [r2, #8]
 8009ffe:	da07      	bge.n	800a010 <__sfputc_r+0x1c>
 800a000:	6994      	ldr	r4, [r2, #24]
 800a002:	42a3      	cmp	r3, r4
 800a004:	db01      	blt.n	800a00a <__sfputc_r+0x16>
 800a006:	290a      	cmp	r1, #10
 800a008:	d102      	bne.n	800a010 <__sfputc_r+0x1c>
 800a00a:	bc10      	pop	{r4}
 800a00c:	f000 b972 	b.w	800a2f4 <__swbuf_r>
 800a010:	6813      	ldr	r3, [r2, #0]
 800a012:	1c58      	adds	r0, r3, #1
 800a014:	6010      	str	r0, [r2, #0]
 800a016:	7019      	strb	r1, [r3, #0]
 800a018:	4608      	mov	r0, r1
 800a01a:	bc10      	pop	{r4}
 800a01c:	4770      	bx	lr

0800a01e <__sfputs_r>:
 800a01e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a020:	4606      	mov	r6, r0
 800a022:	460f      	mov	r7, r1
 800a024:	4614      	mov	r4, r2
 800a026:	18d5      	adds	r5, r2, r3
 800a028:	42ac      	cmp	r4, r5
 800a02a:	d101      	bne.n	800a030 <__sfputs_r+0x12>
 800a02c:	2000      	movs	r0, #0
 800a02e:	e007      	b.n	800a040 <__sfputs_r+0x22>
 800a030:	463a      	mov	r2, r7
 800a032:	4630      	mov	r0, r6
 800a034:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a038:	f7ff ffdc 	bl	8009ff4 <__sfputc_r>
 800a03c:	1c43      	adds	r3, r0, #1
 800a03e:	d1f3      	bne.n	800a028 <__sfputs_r+0xa>
 800a040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a044 <_vfiprintf_r>:
 800a044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a048:	460d      	mov	r5, r1
 800a04a:	4614      	mov	r4, r2
 800a04c:	4698      	mov	r8, r3
 800a04e:	4606      	mov	r6, r0
 800a050:	b09d      	sub	sp, #116	; 0x74
 800a052:	b118      	cbz	r0, 800a05c <_vfiprintf_r+0x18>
 800a054:	6983      	ldr	r3, [r0, #24]
 800a056:	b90b      	cbnz	r3, 800a05c <_vfiprintf_r+0x18>
 800a058:	f000 fb3c 	bl	800a6d4 <__sinit>
 800a05c:	4b89      	ldr	r3, [pc, #548]	; (800a284 <_vfiprintf_r+0x240>)
 800a05e:	429d      	cmp	r5, r3
 800a060:	d11b      	bne.n	800a09a <_vfiprintf_r+0x56>
 800a062:	6875      	ldr	r5, [r6, #4]
 800a064:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a066:	07d9      	lsls	r1, r3, #31
 800a068:	d405      	bmi.n	800a076 <_vfiprintf_r+0x32>
 800a06a:	89ab      	ldrh	r3, [r5, #12]
 800a06c:	059a      	lsls	r2, r3, #22
 800a06e:	d402      	bmi.n	800a076 <_vfiprintf_r+0x32>
 800a070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a072:	f000 fbcd 	bl	800a810 <__retarget_lock_acquire_recursive>
 800a076:	89ab      	ldrh	r3, [r5, #12]
 800a078:	071b      	lsls	r3, r3, #28
 800a07a:	d501      	bpl.n	800a080 <_vfiprintf_r+0x3c>
 800a07c:	692b      	ldr	r3, [r5, #16]
 800a07e:	b9eb      	cbnz	r3, 800a0bc <_vfiprintf_r+0x78>
 800a080:	4629      	mov	r1, r5
 800a082:	4630      	mov	r0, r6
 800a084:	f000 f996 	bl	800a3b4 <__swsetup_r>
 800a088:	b1c0      	cbz	r0, 800a0bc <_vfiprintf_r+0x78>
 800a08a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a08c:	07dc      	lsls	r4, r3, #31
 800a08e:	d50e      	bpl.n	800a0ae <_vfiprintf_r+0x6a>
 800a090:	f04f 30ff 	mov.w	r0, #4294967295
 800a094:	b01d      	add	sp, #116	; 0x74
 800a096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09a:	4b7b      	ldr	r3, [pc, #492]	; (800a288 <_vfiprintf_r+0x244>)
 800a09c:	429d      	cmp	r5, r3
 800a09e:	d101      	bne.n	800a0a4 <_vfiprintf_r+0x60>
 800a0a0:	68b5      	ldr	r5, [r6, #8]
 800a0a2:	e7df      	b.n	800a064 <_vfiprintf_r+0x20>
 800a0a4:	4b79      	ldr	r3, [pc, #484]	; (800a28c <_vfiprintf_r+0x248>)
 800a0a6:	429d      	cmp	r5, r3
 800a0a8:	bf08      	it	eq
 800a0aa:	68f5      	ldreq	r5, [r6, #12]
 800a0ac:	e7da      	b.n	800a064 <_vfiprintf_r+0x20>
 800a0ae:	89ab      	ldrh	r3, [r5, #12]
 800a0b0:	0598      	lsls	r0, r3, #22
 800a0b2:	d4ed      	bmi.n	800a090 <_vfiprintf_r+0x4c>
 800a0b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0b6:	f000 fbac 	bl	800a812 <__retarget_lock_release_recursive>
 800a0ba:	e7e9      	b.n	800a090 <_vfiprintf_r+0x4c>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	9309      	str	r3, [sp, #36]	; 0x24
 800a0c0:	2320      	movs	r3, #32
 800a0c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0c6:	2330      	movs	r3, #48	; 0x30
 800a0c8:	f04f 0901 	mov.w	r9, #1
 800a0cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a290 <_vfiprintf_r+0x24c>
 800a0d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0d8:	4623      	mov	r3, r4
 800a0da:	469a      	mov	sl, r3
 800a0dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0e0:	b10a      	cbz	r2, 800a0e6 <_vfiprintf_r+0xa2>
 800a0e2:	2a25      	cmp	r2, #37	; 0x25
 800a0e4:	d1f9      	bne.n	800a0da <_vfiprintf_r+0x96>
 800a0e6:	ebba 0b04 	subs.w	fp, sl, r4
 800a0ea:	d00b      	beq.n	800a104 <_vfiprintf_r+0xc0>
 800a0ec:	465b      	mov	r3, fp
 800a0ee:	4622      	mov	r2, r4
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	f7ff ff93 	bl	800a01e <__sfputs_r>
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	f000 80aa 	beq.w	800a252 <_vfiprintf_r+0x20e>
 800a0fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a100:	445a      	add	r2, fp
 800a102:	9209      	str	r2, [sp, #36]	; 0x24
 800a104:	f89a 3000 	ldrb.w	r3, [sl]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 80a2 	beq.w	800a252 <_vfiprintf_r+0x20e>
 800a10e:	2300      	movs	r3, #0
 800a110:	f04f 32ff 	mov.w	r2, #4294967295
 800a114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a118:	f10a 0a01 	add.w	sl, sl, #1
 800a11c:	9304      	str	r3, [sp, #16]
 800a11e:	9307      	str	r3, [sp, #28]
 800a120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a124:	931a      	str	r3, [sp, #104]	; 0x68
 800a126:	4654      	mov	r4, sl
 800a128:	2205      	movs	r2, #5
 800a12a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a12e:	4858      	ldr	r0, [pc, #352]	; (800a290 <_vfiprintf_r+0x24c>)
 800a130:	f7ff f88a 	bl	8009248 <memchr>
 800a134:	9a04      	ldr	r2, [sp, #16]
 800a136:	b9d8      	cbnz	r0, 800a170 <_vfiprintf_r+0x12c>
 800a138:	06d1      	lsls	r1, r2, #27
 800a13a:	bf44      	itt	mi
 800a13c:	2320      	movmi	r3, #32
 800a13e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a142:	0713      	lsls	r3, r2, #28
 800a144:	bf44      	itt	mi
 800a146:	232b      	movmi	r3, #43	; 0x2b
 800a148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a14c:	f89a 3000 	ldrb.w	r3, [sl]
 800a150:	2b2a      	cmp	r3, #42	; 0x2a
 800a152:	d015      	beq.n	800a180 <_vfiprintf_r+0x13c>
 800a154:	4654      	mov	r4, sl
 800a156:	2000      	movs	r0, #0
 800a158:	f04f 0c0a 	mov.w	ip, #10
 800a15c:	9a07      	ldr	r2, [sp, #28]
 800a15e:	4621      	mov	r1, r4
 800a160:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a164:	3b30      	subs	r3, #48	; 0x30
 800a166:	2b09      	cmp	r3, #9
 800a168:	d94e      	bls.n	800a208 <_vfiprintf_r+0x1c4>
 800a16a:	b1b0      	cbz	r0, 800a19a <_vfiprintf_r+0x156>
 800a16c:	9207      	str	r2, [sp, #28]
 800a16e:	e014      	b.n	800a19a <_vfiprintf_r+0x156>
 800a170:	eba0 0308 	sub.w	r3, r0, r8
 800a174:	fa09 f303 	lsl.w	r3, r9, r3
 800a178:	4313      	orrs	r3, r2
 800a17a:	46a2      	mov	sl, r4
 800a17c:	9304      	str	r3, [sp, #16]
 800a17e:	e7d2      	b.n	800a126 <_vfiprintf_r+0xe2>
 800a180:	9b03      	ldr	r3, [sp, #12]
 800a182:	1d19      	adds	r1, r3, #4
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	9103      	str	r1, [sp, #12]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	bfbb      	ittet	lt
 800a18c:	425b      	neglt	r3, r3
 800a18e:	f042 0202 	orrlt.w	r2, r2, #2
 800a192:	9307      	strge	r3, [sp, #28]
 800a194:	9307      	strlt	r3, [sp, #28]
 800a196:	bfb8      	it	lt
 800a198:	9204      	strlt	r2, [sp, #16]
 800a19a:	7823      	ldrb	r3, [r4, #0]
 800a19c:	2b2e      	cmp	r3, #46	; 0x2e
 800a19e:	d10c      	bne.n	800a1ba <_vfiprintf_r+0x176>
 800a1a0:	7863      	ldrb	r3, [r4, #1]
 800a1a2:	2b2a      	cmp	r3, #42	; 0x2a
 800a1a4:	d135      	bne.n	800a212 <_vfiprintf_r+0x1ce>
 800a1a6:	9b03      	ldr	r3, [sp, #12]
 800a1a8:	3402      	adds	r4, #2
 800a1aa:	1d1a      	adds	r2, r3, #4
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	9203      	str	r2, [sp, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	bfb8      	it	lt
 800a1b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1b8:	9305      	str	r3, [sp, #20]
 800a1ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a2a0 <_vfiprintf_r+0x25c>
 800a1be:	2203      	movs	r2, #3
 800a1c0:	4650      	mov	r0, sl
 800a1c2:	7821      	ldrb	r1, [r4, #0]
 800a1c4:	f7ff f840 	bl	8009248 <memchr>
 800a1c8:	b140      	cbz	r0, 800a1dc <_vfiprintf_r+0x198>
 800a1ca:	2340      	movs	r3, #64	; 0x40
 800a1cc:	eba0 000a 	sub.w	r0, r0, sl
 800a1d0:	fa03 f000 	lsl.w	r0, r3, r0
 800a1d4:	9b04      	ldr	r3, [sp, #16]
 800a1d6:	3401      	adds	r4, #1
 800a1d8:	4303      	orrs	r3, r0
 800a1da:	9304      	str	r3, [sp, #16]
 800a1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e0:	2206      	movs	r2, #6
 800a1e2:	482c      	ldr	r0, [pc, #176]	; (800a294 <_vfiprintf_r+0x250>)
 800a1e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1e8:	f7ff f82e 	bl	8009248 <memchr>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	d03f      	beq.n	800a270 <_vfiprintf_r+0x22c>
 800a1f0:	4b29      	ldr	r3, [pc, #164]	; (800a298 <_vfiprintf_r+0x254>)
 800a1f2:	bb1b      	cbnz	r3, 800a23c <_vfiprintf_r+0x1f8>
 800a1f4:	9b03      	ldr	r3, [sp, #12]
 800a1f6:	3307      	adds	r3, #7
 800a1f8:	f023 0307 	bic.w	r3, r3, #7
 800a1fc:	3308      	adds	r3, #8
 800a1fe:	9303      	str	r3, [sp, #12]
 800a200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a202:	443b      	add	r3, r7
 800a204:	9309      	str	r3, [sp, #36]	; 0x24
 800a206:	e767      	b.n	800a0d8 <_vfiprintf_r+0x94>
 800a208:	460c      	mov	r4, r1
 800a20a:	2001      	movs	r0, #1
 800a20c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a210:	e7a5      	b.n	800a15e <_vfiprintf_r+0x11a>
 800a212:	2300      	movs	r3, #0
 800a214:	f04f 0c0a 	mov.w	ip, #10
 800a218:	4619      	mov	r1, r3
 800a21a:	3401      	adds	r4, #1
 800a21c:	9305      	str	r3, [sp, #20]
 800a21e:	4620      	mov	r0, r4
 800a220:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a224:	3a30      	subs	r2, #48	; 0x30
 800a226:	2a09      	cmp	r2, #9
 800a228:	d903      	bls.n	800a232 <_vfiprintf_r+0x1ee>
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0c5      	beq.n	800a1ba <_vfiprintf_r+0x176>
 800a22e:	9105      	str	r1, [sp, #20]
 800a230:	e7c3      	b.n	800a1ba <_vfiprintf_r+0x176>
 800a232:	4604      	mov	r4, r0
 800a234:	2301      	movs	r3, #1
 800a236:	fb0c 2101 	mla	r1, ip, r1, r2
 800a23a:	e7f0      	b.n	800a21e <_vfiprintf_r+0x1da>
 800a23c:	ab03      	add	r3, sp, #12
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	462a      	mov	r2, r5
 800a242:	4630      	mov	r0, r6
 800a244:	4b15      	ldr	r3, [pc, #84]	; (800a29c <_vfiprintf_r+0x258>)
 800a246:	a904      	add	r1, sp, #16
 800a248:	f7fc fb5a 	bl	8006900 <_printf_float>
 800a24c:	4607      	mov	r7, r0
 800a24e:	1c78      	adds	r0, r7, #1
 800a250:	d1d6      	bne.n	800a200 <_vfiprintf_r+0x1bc>
 800a252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a254:	07d9      	lsls	r1, r3, #31
 800a256:	d405      	bmi.n	800a264 <_vfiprintf_r+0x220>
 800a258:	89ab      	ldrh	r3, [r5, #12]
 800a25a:	059a      	lsls	r2, r3, #22
 800a25c:	d402      	bmi.n	800a264 <_vfiprintf_r+0x220>
 800a25e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a260:	f000 fad7 	bl	800a812 <__retarget_lock_release_recursive>
 800a264:	89ab      	ldrh	r3, [r5, #12]
 800a266:	065b      	lsls	r3, r3, #25
 800a268:	f53f af12 	bmi.w	800a090 <_vfiprintf_r+0x4c>
 800a26c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a26e:	e711      	b.n	800a094 <_vfiprintf_r+0x50>
 800a270:	ab03      	add	r3, sp, #12
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	462a      	mov	r2, r5
 800a276:	4630      	mov	r0, r6
 800a278:	4b08      	ldr	r3, [pc, #32]	; (800a29c <_vfiprintf_r+0x258>)
 800a27a:	a904      	add	r1, sp, #16
 800a27c:	f7fc fddc 	bl	8006e38 <_printf_i>
 800a280:	e7e4      	b.n	800a24c <_vfiprintf_r+0x208>
 800a282:	bf00      	nop
 800a284:	0800cc78 	.word	0x0800cc78
 800a288:	0800cc98 	.word	0x0800cc98
 800a28c:	0800cc58 	.word	0x0800cc58
 800a290:	0800cb44 	.word	0x0800cb44
 800a294:	0800cb4e 	.word	0x0800cb4e
 800a298:	08006901 	.word	0x08006901
 800a29c:	0800a01f 	.word	0x0800a01f
 800a2a0:	0800cb4a 	.word	0x0800cb4a

0800a2a4 <nan>:
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	4901      	ldr	r1, [pc, #4]	; (800a2ac <nan+0x8>)
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	7ff80000 	.word	0x7ff80000

0800a2b0 <_sbrk_r>:
 800a2b0:	b538      	push	{r3, r4, r5, lr}
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	4d05      	ldr	r5, [pc, #20]	; (800a2cc <_sbrk_r+0x1c>)
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	4608      	mov	r0, r1
 800a2ba:	602b      	str	r3, [r5, #0]
 800a2bc:	f7f8 fbac 	bl	8002a18 <_sbrk>
 800a2c0:	1c43      	adds	r3, r0, #1
 800a2c2:	d102      	bne.n	800a2ca <_sbrk_r+0x1a>
 800a2c4:	682b      	ldr	r3, [r5, #0]
 800a2c6:	b103      	cbz	r3, 800a2ca <_sbrk_r+0x1a>
 800a2c8:	6023      	str	r3, [r4, #0]
 800a2ca:	bd38      	pop	{r3, r4, r5, pc}
 800a2cc:	200009b4 	.word	0x200009b4

0800a2d0 <strncmp>:
 800a2d0:	b510      	push	{r4, lr}
 800a2d2:	b16a      	cbz	r2, 800a2f0 <strncmp+0x20>
 800a2d4:	3901      	subs	r1, #1
 800a2d6:	1884      	adds	r4, r0, r2
 800a2d8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a2dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d103      	bne.n	800a2ec <strncmp+0x1c>
 800a2e4:	42a0      	cmp	r0, r4
 800a2e6:	d001      	beq.n	800a2ec <strncmp+0x1c>
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d1f5      	bne.n	800a2d8 <strncmp+0x8>
 800a2ec:	1a98      	subs	r0, r3, r2
 800a2ee:	bd10      	pop	{r4, pc}
 800a2f0:	4610      	mov	r0, r2
 800a2f2:	e7fc      	b.n	800a2ee <strncmp+0x1e>

0800a2f4 <__swbuf_r>:
 800a2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f6:	460e      	mov	r6, r1
 800a2f8:	4614      	mov	r4, r2
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	b118      	cbz	r0, 800a306 <__swbuf_r+0x12>
 800a2fe:	6983      	ldr	r3, [r0, #24]
 800a300:	b90b      	cbnz	r3, 800a306 <__swbuf_r+0x12>
 800a302:	f000 f9e7 	bl	800a6d4 <__sinit>
 800a306:	4b21      	ldr	r3, [pc, #132]	; (800a38c <__swbuf_r+0x98>)
 800a308:	429c      	cmp	r4, r3
 800a30a:	d12b      	bne.n	800a364 <__swbuf_r+0x70>
 800a30c:	686c      	ldr	r4, [r5, #4]
 800a30e:	69a3      	ldr	r3, [r4, #24]
 800a310:	60a3      	str	r3, [r4, #8]
 800a312:	89a3      	ldrh	r3, [r4, #12]
 800a314:	071a      	lsls	r2, r3, #28
 800a316:	d52f      	bpl.n	800a378 <__swbuf_r+0x84>
 800a318:	6923      	ldr	r3, [r4, #16]
 800a31a:	b36b      	cbz	r3, 800a378 <__swbuf_r+0x84>
 800a31c:	6923      	ldr	r3, [r4, #16]
 800a31e:	6820      	ldr	r0, [r4, #0]
 800a320:	b2f6      	uxtb	r6, r6
 800a322:	1ac0      	subs	r0, r0, r3
 800a324:	6963      	ldr	r3, [r4, #20]
 800a326:	4637      	mov	r7, r6
 800a328:	4283      	cmp	r3, r0
 800a32a:	dc04      	bgt.n	800a336 <__swbuf_r+0x42>
 800a32c:	4621      	mov	r1, r4
 800a32e:	4628      	mov	r0, r5
 800a330:	f000 f93c 	bl	800a5ac <_fflush_r>
 800a334:	bb30      	cbnz	r0, 800a384 <__swbuf_r+0x90>
 800a336:	68a3      	ldr	r3, [r4, #8]
 800a338:	3001      	adds	r0, #1
 800a33a:	3b01      	subs	r3, #1
 800a33c:	60a3      	str	r3, [r4, #8]
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	1c5a      	adds	r2, r3, #1
 800a342:	6022      	str	r2, [r4, #0]
 800a344:	701e      	strb	r6, [r3, #0]
 800a346:	6963      	ldr	r3, [r4, #20]
 800a348:	4283      	cmp	r3, r0
 800a34a:	d004      	beq.n	800a356 <__swbuf_r+0x62>
 800a34c:	89a3      	ldrh	r3, [r4, #12]
 800a34e:	07db      	lsls	r3, r3, #31
 800a350:	d506      	bpl.n	800a360 <__swbuf_r+0x6c>
 800a352:	2e0a      	cmp	r6, #10
 800a354:	d104      	bne.n	800a360 <__swbuf_r+0x6c>
 800a356:	4621      	mov	r1, r4
 800a358:	4628      	mov	r0, r5
 800a35a:	f000 f927 	bl	800a5ac <_fflush_r>
 800a35e:	b988      	cbnz	r0, 800a384 <__swbuf_r+0x90>
 800a360:	4638      	mov	r0, r7
 800a362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a364:	4b0a      	ldr	r3, [pc, #40]	; (800a390 <__swbuf_r+0x9c>)
 800a366:	429c      	cmp	r4, r3
 800a368:	d101      	bne.n	800a36e <__swbuf_r+0x7a>
 800a36a:	68ac      	ldr	r4, [r5, #8]
 800a36c:	e7cf      	b.n	800a30e <__swbuf_r+0x1a>
 800a36e:	4b09      	ldr	r3, [pc, #36]	; (800a394 <__swbuf_r+0xa0>)
 800a370:	429c      	cmp	r4, r3
 800a372:	bf08      	it	eq
 800a374:	68ec      	ldreq	r4, [r5, #12]
 800a376:	e7ca      	b.n	800a30e <__swbuf_r+0x1a>
 800a378:	4621      	mov	r1, r4
 800a37a:	4628      	mov	r0, r5
 800a37c:	f000 f81a 	bl	800a3b4 <__swsetup_r>
 800a380:	2800      	cmp	r0, #0
 800a382:	d0cb      	beq.n	800a31c <__swbuf_r+0x28>
 800a384:	f04f 37ff 	mov.w	r7, #4294967295
 800a388:	e7ea      	b.n	800a360 <__swbuf_r+0x6c>
 800a38a:	bf00      	nop
 800a38c:	0800cc78 	.word	0x0800cc78
 800a390:	0800cc98 	.word	0x0800cc98
 800a394:	0800cc58 	.word	0x0800cc58

0800a398 <__ascii_wctomb>:
 800a398:	4603      	mov	r3, r0
 800a39a:	4608      	mov	r0, r1
 800a39c:	b141      	cbz	r1, 800a3b0 <__ascii_wctomb+0x18>
 800a39e:	2aff      	cmp	r2, #255	; 0xff
 800a3a0:	d904      	bls.n	800a3ac <__ascii_wctomb+0x14>
 800a3a2:	228a      	movs	r2, #138	; 0x8a
 800a3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a8:	601a      	str	r2, [r3, #0]
 800a3aa:	4770      	bx	lr
 800a3ac:	2001      	movs	r0, #1
 800a3ae:	700a      	strb	r2, [r1, #0]
 800a3b0:	4770      	bx	lr
	...

0800a3b4 <__swsetup_r>:
 800a3b4:	4b32      	ldr	r3, [pc, #200]	; (800a480 <__swsetup_r+0xcc>)
 800a3b6:	b570      	push	{r4, r5, r6, lr}
 800a3b8:	681d      	ldr	r5, [r3, #0]
 800a3ba:	4606      	mov	r6, r0
 800a3bc:	460c      	mov	r4, r1
 800a3be:	b125      	cbz	r5, 800a3ca <__swsetup_r+0x16>
 800a3c0:	69ab      	ldr	r3, [r5, #24]
 800a3c2:	b913      	cbnz	r3, 800a3ca <__swsetup_r+0x16>
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	f000 f985 	bl	800a6d4 <__sinit>
 800a3ca:	4b2e      	ldr	r3, [pc, #184]	; (800a484 <__swsetup_r+0xd0>)
 800a3cc:	429c      	cmp	r4, r3
 800a3ce:	d10f      	bne.n	800a3f0 <__swsetup_r+0x3c>
 800a3d0:	686c      	ldr	r4, [r5, #4]
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3d8:	0719      	lsls	r1, r3, #28
 800a3da:	d42c      	bmi.n	800a436 <__swsetup_r+0x82>
 800a3dc:	06dd      	lsls	r5, r3, #27
 800a3de:	d411      	bmi.n	800a404 <__swsetup_r+0x50>
 800a3e0:	2309      	movs	r3, #9
 800a3e2:	6033      	str	r3, [r6, #0]
 800a3e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ec:	81a3      	strh	r3, [r4, #12]
 800a3ee:	e03e      	b.n	800a46e <__swsetup_r+0xba>
 800a3f0:	4b25      	ldr	r3, [pc, #148]	; (800a488 <__swsetup_r+0xd4>)
 800a3f2:	429c      	cmp	r4, r3
 800a3f4:	d101      	bne.n	800a3fa <__swsetup_r+0x46>
 800a3f6:	68ac      	ldr	r4, [r5, #8]
 800a3f8:	e7eb      	b.n	800a3d2 <__swsetup_r+0x1e>
 800a3fa:	4b24      	ldr	r3, [pc, #144]	; (800a48c <__swsetup_r+0xd8>)
 800a3fc:	429c      	cmp	r4, r3
 800a3fe:	bf08      	it	eq
 800a400:	68ec      	ldreq	r4, [r5, #12]
 800a402:	e7e6      	b.n	800a3d2 <__swsetup_r+0x1e>
 800a404:	0758      	lsls	r0, r3, #29
 800a406:	d512      	bpl.n	800a42e <__swsetup_r+0x7a>
 800a408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a40a:	b141      	cbz	r1, 800a41e <__swsetup_r+0x6a>
 800a40c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a410:	4299      	cmp	r1, r3
 800a412:	d002      	beq.n	800a41a <__swsetup_r+0x66>
 800a414:	4630      	mov	r0, r6
 800a416:	f7ff fbeb 	bl	8009bf0 <_free_r>
 800a41a:	2300      	movs	r3, #0
 800a41c:	6363      	str	r3, [r4, #52]	; 0x34
 800a41e:	89a3      	ldrh	r3, [r4, #12]
 800a420:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a424:	81a3      	strh	r3, [r4, #12]
 800a426:	2300      	movs	r3, #0
 800a428:	6063      	str	r3, [r4, #4]
 800a42a:	6923      	ldr	r3, [r4, #16]
 800a42c:	6023      	str	r3, [r4, #0]
 800a42e:	89a3      	ldrh	r3, [r4, #12]
 800a430:	f043 0308 	orr.w	r3, r3, #8
 800a434:	81a3      	strh	r3, [r4, #12]
 800a436:	6923      	ldr	r3, [r4, #16]
 800a438:	b94b      	cbnz	r3, 800a44e <__swsetup_r+0x9a>
 800a43a:	89a3      	ldrh	r3, [r4, #12]
 800a43c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a444:	d003      	beq.n	800a44e <__swsetup_r+0x9a>
 800a446:	4621      	mov	r1, r4
 800a448:	4630      	mov	r0, r6
 800a44a:	f000 fa07 	bl	800a85c <__smakebuf_r>
 800a44e:	89a0      	ldrh	r0, [r4, #12]
 800a450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a454:	f010 0301 	ands.w	r3, r0, #1
 800a458:	d00a      	beq.n	800a470 <__swsetup_r+0xbc>
 800a45a:	2300      	movs	r3, #0
 800a45c:	60a3      	str	r3, [r4, #8]
 800a45e:	6963      	ldr	r3, [r4, #20]
 800a460:	425b      	negs	r3, r3
 800a462:	61a3      	str	r3, [r4, #24]
 800a464:	6923      	ldr	r3, [r4, #16]
 800a466:	b943      	cbnz	r3, 800a47a <__swsetup_r+0xc6>
 800a468:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a46c:	d1ba      	bne.n	800a3e4 <__swsetup_r+0x30>
 800a46e:	bd70      	pop	{r4, r5, r6, pc}
 800a470:	0781      	lsls	r1, r0, #30
 800a472:	bf58      	it	pl
 800a474:	6963      	ldrpl	r3, [r4, #20]
 800a476:	60a3      	str	r3, [r4, #8]
 800a478:	e7f4      	b.n	800a464 <__swsetup_r+0xb0>
 800a47a:	2000      	movs	r0, #0
 800a47c:	e7f7      	b.n	800a46e <__swsetup_r+0xba>
 800a47e:	bf00      	nop
 800a480:	2000003c 	.word	0x2000003c
 800a484:	0800cc78 	.word	0x0800cc78
 800a488:	0800cc98 	.word	0x0800cc98
 800a48c:	0800cc58 	.word	0x0800cc58

0800a490 <abort>:
 800a490:	2006      	movs	r0, #6
 800a492:	b508      	push	{r3, lr}
 800a494:	f000 fa96 	bl	800a9c4 <raise>
 800a498:	2001      	movs	r0, #1
 800a49a:	f7f8 fa4a 	bl	8002932 <_exit>
	...

0800a4a0 <__sflush_r>:
 800a4a0:	898a      	ldrh	r2, [r1, #12]
 800a4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a6:	4605      	mov	r5, r0
 800a4a8:	0710      	lsls	r0, r2, #28
 800a4aa:	460c      	mov	r4, r1
 800a4ac:	d458      	bmi.n	800a560 <__sflush_r+0xc0>
 800a4ae:	684b      	ldr	r3, [r1, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	dc05      	bgt.n	800a4c0 <__sflush_r+0x20>
 800a4b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	dc02      	bgt.n	800a4c0 <__sflush_r+0x20>
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4c2:	2e00      	cmp	r6, #0
 800a4c4:	d0f9      	beq.n	800a4ba <__sflush_r+0x1a>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4cc:	682f      	ldr	r7, [r5, #0]
 800a4ce:	602b      	str	r3, [r5, #0]
 800a4d0:	d032      	beq.n	800a538 <__sflush_r+0x98>
 800a4d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4d4:	89a3      	ldrh	r3, [r4, #12]
 800a4d6:	075a      	lsls	r2, r3, #29
 800a4d8:	d505      	bpl.n	800a4e6 <__sflush_r+0x46>
 800a4da:	6863      	ldr	r3, [r4, #4]
 800a4dc:	1ac0      	subs	r0, r0, r3
 800a4de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4e0:	b10b      	cbz	r3, 800a4e6 <__sflush_r+0x46>
 800a4e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4e4:	1ac0      	subs	r0, r0, r3
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	6a21      	ldr	r1, [r4, #32]
 800a4f0:	47b0      	blx	r6
 800a4f2:	1c43      	adds	r3, r0, #1
 800a4f4:	89a3      	ldrh	r3, [r4, #12]
 800a4f6:	d106      	bne.n	800a506 <__sflush_r+0x66>
 800a4f8:	6829      	ldr	r1, [r5, #0]
 800a4fa:	291d      	cmp	r1, #29
 800a4fc:	d82c      	bhi.n	800a558 <__sflush_r+0xb8>
 800a4fe:	4a2a      	ldr	r2, [pc, #168]	; (800a5a8 <__sflush_r+0x108>)
 800a500:	40ca      	lsrs	r2, r1
 800a502:	07d6      	lsls	r6, r2, #31
 800a504:	d528      	bpl.n	800a558 <__sflush_r+0xb8>
 800a506:	2200      	movs	r2, #0
 800a508:	6062      	str	r2, [r4, #4]
 800a50a:	6922      	ldr	r2, [r4, #16]
 800a50c:	04d9      	lsls	r1, r3, #19
 800a50e:	6022      	str	r2, [r4, #0]
 800a510:	d504      	bpl.n	800a51c <__sflush_r+0x7c>
 800a512:	1c42      	adds	r2, r0, #1
 800a514:	d101      	bne.n	800a51a <__sflush_r+0x7a>
 800a516:	682b      	ldr	r3, [r5, #0]
 800a518:	b903      	cbnz	r3, 800a51c <__sflush_r+0x7c>
 800a51a:	6560      	str	r0, [r4, #84]	; 0x54
 800a51c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a51e:	602f      	str	r7, [r5, #0]
 800a520:	2900      	cmp	r1, #0
 800a522:	d0ca      	beq.n	800a4ba <__sflush_r+0x1a>
 800a524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a528:	4299      	cmp	r1, r3
 800a52a:	d002      	beq.n	800a532 <__sflush_r+0x92>
 800a52c:	4628      	mov	r0, r5
 800a52e:	f7ff fb5f 	bl	8009bf0 <_free_r>
 800a532:	2000      	movs	r0, #0
 800a534:	6360      	str	r0, [r4, #52]	; 0x34
 800a536:	e7c1      	b.n	800a4bc <__sflush_r+0x1c>
 800a538:	6a21      	ldr	r1, [r4, #32]
 800a53a:	2301      	movs	r3, #1
 800a53c:	4628      	mov	r0, r5
 800a53e:	47b0      	blx	r6
 800a540:	1c41      	adds	r1, r0, #1
 800a542:	d1c7      	bne.n	800a4d4 <__sflush_r+0x34>
 800a544:	682b      	ldr	r3, [r5, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d0c4      	beq.n	800a4d4 <__sflush_r+0x34>
 800a54a:	2b1d      	cmp	r3, #29
 800a54c:	d001      	beq.n	800a552 <__sflush_r+0xb2>
 800a54e:	2b16      	cmp	r3, #22
 800a550:	d101      	bne.n	800a556 <__sflush_r+0xb6>
 800a552:	602f      	str	r7, [r5, #0]
 800a554:	e7b1      	b.n	800a4ba <__sflush_r+0x1a>
 800a556:	89a3      	ldrh	r3, [r4, #12]
 800a558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a55c:	81a3      	strh	r3, [r4, #12]
 800a55e:	e7ad      	b.n	800a4bc <__sflush_r+0x1c>
 800a560:	690f      	ldr	r7, [r1, #16]
 800a562:	2f00      	cmp	r7, #0
 800a564:	d0a9      	beq.n	800a4ba <__sflush_r+0x1a>
 800a566:	0793      	lsls	r3, r2, #30
 800a568:	bf18      	it	ne
 800a56a:	2300      	movne	r3, #0
 800a56c:	680e      	ldr	r6, [r1, #0]
 800a56e:	bf08      	it	eq
 800a570:	694b      	ldreq	r3, [r1, #20]
 800a572:	eba6 0807 	sub.w	r8, r6, r7
 800a576:	600f      	str	r7, [r1, #0]
 800a578:	608b      	str	r3, [r1, #8]
 800a57a:	f1b8 0f00 	cmp.w	r8, #0
 800a57e:	dd9c      	ble.n	800a4ba <__sflush_r+0x1a>
 800a580:	4643      	mov	r3, r8
 800a582:	463a      	mov	r2, r7
 800a584:	4628      	mov	r0, r5
 800a586:	6a21      	ldr	r1, [r4, #32]
 800a588:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a58a:	47b0      	blx	r6
 800a58c:	2800      	cmp	r0, #0
 800a58e:	dc06      	bgt.n	800a59e <__sflush_r+0xfe>
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	f04f 30ff 	mov.w	r0, #4294967295
 800a596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a59a:	81a3      	strh	r3, [r4, #12]
 800a59c:	e78e      	b.n	800a4bc <__sflush_r+0x1c>
 800a59e:	4407      	add	r7, r0
 800a5a0:	eba8 0800 	sub.w	r8, r8, r0
 800a5a4:	e7e9      	b.n	800a57a <__sflush_r+0xda>
 800a5a6:	bf00      	nop
 800a5a8:	20400001 	.word	0x20400001

0800a5ac <_fflush_r>:
 800a5ac:	b538      	push	{r3, r4, r5, lr}
 800a5ae:	690b      	ldr	r3, [r1, #16]
 800a5b0:	4605      	mov	r5, r0
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	b913      	cbnz	r3, 800a5bc <_fflush_r+0x10>
 800a5b6:	2500      	movs	r5, #0
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	bd38      	pop	{r3, r4, r5, pc}
 800a5bc:	b118      	cbz	r0, 800a5c6 <_fflush_r+0x1a>
 800a5be:	6983      	ldr	r3, [r0, #24]
 800a5c0:	b90b      	cbnz	r3, 800a5c6 <_fflush_r+0x1a>
 800a5c2:	f000 f887 	bl	800a6d4 <__sinit>
 800a5c6:	4b14      	ldr	r3, [pc, #80]	; (800a618 <_fflush_r+0x6c>)
 800a5c8:	429c      	cmp	r4, r3
 800a5ca:	d11b      	bne.n	800a604 <_fflush_r+0x58>
 800a5cc:	686c      	ldr	r4, [r5, #4]
 800a5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d0ef      	beq.n	800a5b6 <_fflush_r+0xa>
 800a5d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5d8:	07d0      	lsls	r0, r2, #31
 800a5da:	d404      	bmi.n	800a5e6 <_fflush_r+0x3a>
 800a5dc:	0599      	lsls	r1, r3, #22
 800a5de:	d402      	bmi.n	800a5e6 <_fflush_r+0x3a>
 800a5e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5e2:	f000 f915 	bl	800a810 <__retarget_lock_acquire_recursive>
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	f7ff ff59 	bl	800a4a0 <__sflush_r>
 800a5ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5f0:	4605      	mov	r5, r0
 800a5f2:	07da      	lsls	r2, r3, #31
 800a5f4:	d4e0      	bmi.n	800a5b8 <_fflush_r+0xc>
 800a5f6:	89a3      	ldrh	r3, [r4, #12]
 800a5f8:	059b      	lsls	r3, r3, #22
 800a5fa:	d4dd      	bmi.n	800a5b8 <_fflush_r+0xc>
 800a5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5fe:	f000 f908 	bl	800a812 <__retarget_lock_release_recursive>
 800a602:	e7d9      	b.n	800a5b8 <_fflush_r+0xc>
 800a604:	4b05      	ldr	r3, [pc, #20]	; (800a61c <_fflush_r+0x70>)
 800a606:	429c      	cmp	r4, r3
 800a608:	d101      	bne.n	800a60e <_fflush_r+0x62>
 800a60a:	68ac      	ldr	r4, [r5, #8]
 800a60c:	e7df      	b.n	800a5ce <_fflush_r+0x22>
 800a60e:	4b04      	ldr	r3, [pc, #16]	; (800a620 <_fflush_r+0x74>)
 800a610:	429c      	cmp	r4, r3
 800a612:	bf08      	it	eq
 800a614:	68ec      	ldreq	r4, [r5, #12]
 800a616:	e7da      	b.n	800a5ce <_fflush_r+0x22>
 800a618:	0800cc78 	.word	0x0800cc78
 800a61c:	0800cc98 	.word	0x0800cc98
 800a620:	0800cc58 	.word	0x0800cc58

0800a624 <std>:
 800a624:	2300      	movs	r3, #0
 800a626:	b510      	push	{r4, lr}
 800a628:	4604      	mov	r4, r0
 800a62a:	e9c0 3300 	strd	r3, r3, [r0]
 800a62e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a632:	6083      	str	r3, [r0, #8]
 800a634:	8181      	strh	r1, [r0, #12]
 800a636:	6643      	str	r3, [r0, #100]	; 0x64
 800a638:	81c2      	strh	r2, [r0, #14]
 800a63a:	6183      	str	r3, [r0, #24]
 800a63c:	4619      	mov	r1, r3
 800a63e:	2208      	movs	r2, #8
 800a640:	305c      	adds	r0, #92	; 0x5c
 800a642:	f7fc f8b7 	bl	80067b4 <memset>
 800a646:	4b05      	ldr	r3, [pc, #20]	; (800a65c <std+0x38>)
 800a648:	6224      	str	r4, [r4, #32]
 800a64a:	6263      	str	r3, [r4, #36]	; 0x24
 800a64c:	4b04      	ldr	r3, [pc, #16]	; (800a660 <std+0x3c>)
 800a64e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a650:	4b04      	ldr	r3, [pc, #16]	; (800a664 <std+0x40>)
 800a652:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a654:	4b04      	ldr	r3, [pc, #16]	; (800a668 <std+0x44>)
 800a656:	6323      	str	r3, [r4, #48]	; 0x30
 800a658:	bd10      	pop	{r4, pc}
 800a65a:	bf00      	nop
 800a65c:	0800a9fd 	.word	0x0800a9fd
 800a660:	0800aa1f 	.word	0x0800aa1f
 800a664:	0800aa57 	.word	0x0800aa57
 800a668:	0800aa7b 	.word	0x0800aa7b

0800a66c <_cleanup_r>:
 800a66c:	4901      	ldr	r1, [pc, #4]	; (800a674 <_cleanup_r+0x8>)
 800a66e:	f000 b8af 	b.w	800a7d0 <_fwalk_reent>
 800a672:	bf00      	nop
 800a674:	0800a5ad 	.word	0x0800a5ad

0800a678 <__sfmoreglue>:
 800a678:	b570      	push	{r4, r5, r6, lr}
 800a67a:	2568      	movs	r5, #104	; 0x68
 800a67c:	1e4a      	subs	r2, r1, #1
 800a67e:	4355      	muls	r5, r2
 800a680:	460e      	mov	r6, r1
 800a682:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a686:	f7ff faff 	bl	8009c88 <_malloc_r>
 800a68a:	4604      	mov	r4, r0
 800a68c:	b140      	cbz	r0, 800a6a0 <__sfmoreglue+0x28>
 800a68e:	2100      	movs	r1, #0
 800a690:	e9c0 1600 	strd	r1, r6, [r0]
 800a694:	300c      	adds	r0, #12
 800a696:	60a0      	str	r0, [r4, #8]
 800a698:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a69c:	f7fc f88a 	bl	80067b4 <memset>
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	bd70      	pop	{r4, r5, r6, pc}

0800a6a4 <__sfp_lock_acquire>:
 800a6a4:	4801      	ldr	r0, [pc, #4]	; (800a6ac <__sfp_lock_acquire+0x8>)
 800a6a6:	f000 b8b3 	b.w	800a810 <__retarget_lock_acquire_recursive>
 800a6aa:	bf00      	nop
 800a6ac:	200009b0 	.word	0x200009b0

0800a6b0 <__sfp_lock_release>:
 800a6b0:	4801      	ldr	r0, [pc, #4]	; (800a6b8 <__sfp_lock_release+0x8>)
 800a6b2:	f000 b8ae 	b.w	800a812 <__retarget_lock_release_recursive>
 800a6b6:	bf00      	nop
 800a6b8:	200009b0 	.word	0x200009b0

0800a6bc <__sinit_lock_acquire>:
 800a6bc:	4801      	ldr	r0, [pc, #4]	; (800a6c4 <__sinit_lock_acquire+0x8>)
 800a6be:	f000 b8a7 	b.w	800a810 <__retarget_lock_acquire_recursive>
 800a6c2:	bf00      	nop
 800a6c4:	200009ab 	.word	0x200009ab

0800a6c8 <__sinit_lock_release>:
 800a6c8:	4801      	ldr	r0, [pc, #4]	; (800a6d0 <__sinit_lock_release+0x8>)
 800a6ca:	f000 b8a2 	b.w	800a812 <__retarget_lock_release_recursive>
 800a6ce:	bf00      	nop
 800a6d0:	200009ab 	.word	0x200009ab

0800a6d4 <__sinit>:
 800a6d4:	b510      	push	{r4, lr}
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	f7ff fff0 	bl	800a6bc <__sinit_lock_acquire>
 800a6dc:	69a3      	ldr	r3, [r4, #24]
 800a6de:	b11b      	cbz	r3, 800a6e8 <__sinit+0x14>
 800a6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6e4:	f7ff bff0 	b.w	800a6c8 <__sinit_lock_release>
 800a6e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a6ec:	6523      	str	r3, [r4, #80]	; 0x50
 800a6ee:	4b13      	ldr	r3, [pc, #76]	; (800a73c <__sinit+0x68>)
 800a6f0:	4a13      	ldr	r2, [pc, #76]	; (800a740 <__sinit+0x6c>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a6f6:	42a3      	cmp	r3, r4
 800a6f8:	bf08      	it	eq
 800a6fa:	2301      	moveq	r3, #1
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	bf08      	it	eq
 800a700:	61a3      	streq	r3, [r4, #24]
 800a702:	f000 f81f 	bl	800a744 <__sfp>
 800a706:	6060      	str	r0, [r4, #4]
 800a708:	4620      	mov	r0, r4
 800a70a:	f000 f81b 	bl	800a744 <__sfp>
 800a70e:	60a0      	str	r0, [r4, #8]
 800a710:	4620      	mov	r0, r4
 800a712:	f000 f817 	bl	800a744 <__sfp>
 800a716:	2200      	movs	r2, #0
 800a718:	2104      	movs	r1, #4
 800a71a:	60e0      	str	r0, [r4, #12]
 800a71c:	6860      	ldr	r0, [r4, #4]
 800a71e:	f7ff ff81 	bl	800a624 <std>
 800a722:	2201      	movs	r2, #1
 800a724:	2109      	movs	r1, #9
 800a726:	68a0      	ldr	r0, [r4, #8]
 800a728:	f7ff ff7c 	bl	800a624 <std>
 800a72c:	2202      	movs	r2, #2
 800a72e:	2112      	movs	r1, #18
 800a730:	68e0      	ldr	r0, [r4, #12]
 800a732:	f7ff ff77 	bl	800a624 <std>
 800a736:	2301      	movs	r3, #1
 800a738:	61a3      	str	r3, [r4, #24]
 800a73a:	e7d1      	b.n	800a6e0 <__sinit+0xc>
 800a73c:	0800c7ac 	.word	0x0800c7ac
 800a740:	0800a66d 	.word	0x0800a66d

0800a744 <__sfp>:
 800a744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a746:	4607      	mov	r7, r0
 800a748:	f7ff ffac 	bl	800a6a4 <__sfp_lock_acquire>
 800a74c:	4b1e      	ldr	r3, [pc, #120]	; (800a7c8 <__sfp+0x84>)
 800a74e:	681e      	ldr	r6, [r3, #0]
 800a750:	69b3      	ldr	r3, [r6, #24]
 800a752:	b913      	cbnz	r3, 800a75a <__sfp+0x16>
 800a754:	4630      	mov	r0, r6
 800a756:	f7ff ffbd 	bl	800a6d4 <__sinit>
 800a75a:	3648      	adds	r6, #72	; 0x48
 800a75c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a760:	3b01      	subs	r3, #1
 800a762:	d503      	bpl.n	800a76c <__sfp+0x28>
 800a764:	6833      	ldr	r3, [r6, #0]
 800a766:	b30b      	cbz	r3, 800a7ac <__sfp+0x68>
 800a768:	6836      	ldr	r6, [r6, #0]
 800a76a:	e7f7      	b.n	800a75c <__sfp+0x18>
 800a76c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a770:	b9d5      	cbnz	r5, 800a7a8 <__sfp+0x64>
 800a772:	4b16      	ldr	r3, [pc, #88]	; (800a7cc <__sfp+0x88>)
 800a774:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a778:	60e3      	str	r3, [r4, #12]
 800a77a:	6665      	str	r5, [r4, #100]	; 0x64
 800a77c:	f000 f847 	bl	800a80e <__retarget_lock_init_recursive>
 800a780:	f7ff ff96 	bl	800a6b0 <__sfp_lock_release>
 800a784:	2208      	movs	r2, #8
 800a786:	4629      	mov	r1, r5
 800a788:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a78c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a790:	6025      	str	r5, [r4, #0]
 800a792:	61a5      	str	r5, [r4, #24]
 800a794:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a798:	f7fc f80c 	bl	80067b4 <memset>
 800a79c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a7a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7a8:	3468      	adds	r4, #104	; 0x68
 800a7aa:	e7d9      	b.n	800a760 <__sfp+0x1c>
 800a7ac:	2104      	movs	r1, #4
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	f7ff ff62 	bl	800a678 <__sfmoreglue>
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	6030      	str	r0, [r6, #0]
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d1d5      	bne.n	800a768 <__sfp+0x24>
 800a7bc:	f7ff ff78 	bl	800a6b0 <__sfp_lock_release>
 800a7c0:	230c      	movs	r3, #12
 800a7c2:	603b      	str	r3, [r7, #0]
 800a7c4:	e7ee      	b.n	800a7a4 <__sfp+0x60>
 800a7c6:	bf00      	nop
 800a7c8:	0800c7ac 	.word	0x0800c7ac
 800a7cc:	ffff0001 	.word	0xffff0001

0800a7d0 <_fwalk_reent>:
 800a7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	4688      	mov	r8, r1
 800a7d8:	2700      	movs	r7, #0
 800a7da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a7de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7e2:	f1b9 0901 	subs.w	r9, r9, #1
 800a7e6:	d505      	bpl.n	800a7f4 <_fwalk_reent+0x24>
 800a7e8:	6824      	ldr	r4, [r4, #0]
 800a7ea:	2c00      	cmp	r4, #0
 800a7ec:	d1f7      	bne.n	800a7de <_fwalk_reent+0xe>
 800a7ee:	4638      	mov	r0, r7
 800a7f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7f4:	89ab      	ldrh	r3, [r5, #12]
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d907      	bls.n	800a80a <_fwalk_reent+0x3a>
 800a7fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7fe:	3301      	adds	r3, #1
 800a800:	d003      	beq.n	800a80a <_fwalk_reent+0x3a>
 800a802:	4629      	mov	r1, r5
 800a804:	4630      	mov	r0, r6
 800a806:	47c0      	blx	r8
 800a808:	4307      	orrs	r7, r0
 800a80a:	3568      	adds	r5, #104	; 0x68
 800a80c:	e7e9      	b.n	800a7e2 <_fwalk_reent+0x12>

0800a80e <__retarget_lock_init_recursive>:
 800a80e:	4770      	bx	lr

0800a810 <__retarget_lock_acquire_recursive>:
 800a810:	4770      	bx	lr

0800a812 <__retarget_lock_release_recursive>:
 800a812:	4770      	bx	lr

0800a814 <__swhatbuf_r>:
 800a814:	b570      	push	{r4, r5, r6, lr}
 800a816:	460e      	mov	r6, r1
 800a818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a81c:	4614      	mov	r4, r2
 800a81e:	2900      	cmp	r1, #0
 800a820:	461d      	mov	r5, r3
 800a822:	b096      	sub	sp, #88	; 0x58
 800a824:	da07      	bge.n	800a836 <__swhatbuf_r+0x22>
 800a826:	2300      	movs	r3, #0
 800a828:	602b      	str	r3, [r5, #0]
 800a82a:	89b3      	ldrh	r3, [r6, #12]
 800a82c:	061a      	lsls	r2, r3, #24
 800a82e:	d410      	bmi.n	800a852 <__swhatbuf_r+0x3e>
 800a830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a834:	e00e      	b.n	800a854 <__swhatbuf_r+0x40>
 800a836:	466a      	mov	r2, sp
 800a838:	f000 f946 	bl	800aac8 <_fstat_r>
 800a83c:	2800      	cmp	r0, #0
 800a83e:	dbf2      	blt.n	800a826 <__swhatbuf_r+0x12>
 800a840:	9a01      	ldr	r2, [sp, #4]
 800a842:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a846:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a84a:	425a      	negs	r2, r3
 800a84c:	415a      	adcs	r2, r3
 800a84e:	602a      	str	r2, [r5, #0]
 800a850:	e7ee      	b.n	800a830 <__swhatbuf_r+0x1c>
 800a852:	2340      	movs	r3, #64	; 0x40
 800a854:	2000      	movs	r0, #0
 800a856:	6023      	str	r3, [r4, #0]
 800a858:	b016      	add	sp, #88	; 0x58
 800a85a:	bd70      	pop	{r4, r5, r6, pc}

0800a85c <__smakebuf_r>:
 800a85c:	898b      	ldrh	r3, [r1, #12]
 800a85e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a860:	079d      	lsls	r5, r3, #30
 800a862:	4606      	mov	r6, r0
 800a864:	460c      	mov	r4, r1
 800a866:	d507      	bpl.n	800a878 <__smakebuf_r+0x1c>
 800a868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a86c:	6023      	str	r3, [r4, #0]
 800a86e:	6123      	str	r3, [r4, #16]
 800a870:	2301      	movs	r3, #1
 800a872:	6163      	str	r3, [r4, #20]
 800a874:	b002      	add	sp, #8
 800a876:	bd70      	pop	{r4, r5, r6, pc}
 800a878:	466a      	mov	r2, sp
 800a87a:	ab01      	add	r3, sp, #4
 800a87c:	f7ff ffca 	bl	800a814 <__swhatbuf_r>
 800a880:	9900      	ldr	r1, [sp, #0]
 800a882:	4605      	mov	r5, r0
 800a884:	4630      	mov	r0, r6
 800a886:	f7ff f9ff 	bl	8009c88 <_malloc_r>
 800a88a:	b948      	cbnz	r0, 800a8a0 <__smakebuf_r+0x44>
 800a88c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a890:	059a      	lsls	r2, r3, #22
 800a892:	d4ef      	bmi.n	800a874 <__smakebuf_r+0x18>
 800a894:	f023 0303 	bic.w	r3, r3, #3
 800a898:	f043 0302 	orr.w	r3, r3, #2
 800a89c:	81a3      	strh	r3, [r4, #12]
 800a89e:	e7e3      	b.n	800a868 <__smakebuf_r+0xc>
 800a8a0:	4b0d      	ldr	r3, [pc, #52]	; (800a8d8 <__smakebuf_r+0x7c>)
 800a8a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8a4:	89a3      	ldrh	r3, [r4, #12]
 800a8a6:	6020      	str	r0, [r4, #0]
 800a8a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8ac:	81a3      	strh	r3, [r4, #12]
 800a8ae:	9b00      	ldr	r3, [sp, #0]
 800a8b0:	6120      	str	r0, [r4, #16]
 800a8b2:	6163      	str	r3, [r4, #20]
 800a8b4:	9b01      	ldr	r3, [sp, #4]
 800a8b6:	b15b      	cbz	r3, 800a8d0 <__smakebuf_r+0x74>
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8be:	f000 f915 	bl	800aaec <_isatty_r>
 800a8c2:	b128      	cbz	r0, 800a8d0 <__smakebuf_r+0x74>
 800a8c4:	89a3      	ldrh	r3, [r4, #12]
 800a8c6:	f023 0303 	bic.w	r3, r3, #3
 800a8ca:	f043 0301 	orr.w	r3, r3, #1
 800a8ce:	81a3      	strh	r3, [r4, #12]
 800a8d0:	89a0      	ldrh	r0, [r4, #12]
 800a8d2:	4305      	orrs	r5, r0
 800a8d4:	81a5      	strh	r5, [r4, #12]
 800a8d6:	e7cd      	b.n	800a874 <__smakebuf_r+0x18>
 800a8d8:	0800a66d 	.word	0x0800a66d

0800a8dc <memmove>:
 800a8dc:	4288      	cmp	r0, r1
 800a8de:	b510      	push	{r4, lr}
 800a8e0:	eb01 0402 	add.w	r4, r1, r2
 800a8e4:	d902      	bls.n	800a8ec <memmove+0x10>
 800a8e6:	4284      	cmp	r4, r0
 800a8e8:	4623      	mov	r3, r4
 800a8ea:	d807      	bhi.n	800a8fc <memmove+0x20>
 800a8ec:	1e43      	subs	r3, r0, #1
 800a8ee:	42a1      	cmp	r1, r4
 800a8f0:	d008      	beq.n	800a904 <memmove+0x28>
 800a8f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8fa:	e7f8      	b.n	800a8ee <memmove+0x12>
 800a8fc:	4601      	mov	r1, r0
 800a8fe:	4402      	add	r2, r0
 800a900:	428a      	cmp	r2, r1
 800a902:	d100      	bne.n	800a906 <memmove+0x2a>
 800a904:	bd10      	pop	{r4, pc}
 800a906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a90a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a90e:	e7f7      	b.n	800a900 <memmove+0x24>

0800a910 <__malloc_lock>:
 800a910:	4801      	ldr	r0, [pc, #4]	; (800a918 <__malloc_lock+0x8>)
 800a912:	f7ff bf7d 	b.w	800a810 <__retarget_lock_acquire_recursive>
 800a916:	bf00      	nop
 800a918:	200009ac 	.word	0x200009ac

0800a91c <__malloc_unlock>:
 800a91c:	4801      	ldr	r0, [pc, #4]	; (800a924 <__malloc_unlock+0x8>)
 800a91e:	f7ff bf78 	b.w	800a812 <__retarget_lock_release_recursive>
 800a922:	bf00      	nop
 800a924:	200009ac 	.word	0x200009ac

0800a928 <_realloc_r>:
 800a928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a92a:	4607      	mov	r7, r0
 800a92c:	4614      	mov	r4, r2
 800a92e:	460e      	mov	r6, r1
 800a930:	b921      	cbnz	r1, 800a93c <_realloc_r+0x14>
 800a932:	4611      	mov	r1, r2
 800a934:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a938:	f7ff b9a6 	b.w	8009c88 <_malloc_r>
 800a93c:	b922      	cbnz	r2, 800a948 <_realloc_r+0x20>
 800a93e:	f7ff f957 	bl	8009bf0 <_free_r>
 800a942:	4625      	mov	r5, r4
 800a944:	4628      	mov	r0, r5
 800a946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a948:	f000 f8f2 	bl	800ab30 <_malloc_usable_size_r>
 800a94c:	42a0      	cmp	r0, r4
 800a94e:	d20f      	bcs.n	800a970 <_realloc_r+0x48>
 800a950:	4621      	mov	r1, r4
 800a952:	4638      	mov	r0, r7
 800a954:	f7ff f998 	bl	8009c88 <_malloc_r>
 800a958:	4605      	mov	r5, r0
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d0f2      	beq.n	800a944 <_realloc_r+0x1c>
 800a95e:	4631      	mov	r1, r6
 800a960:	4622      	mov	r2, r4
 800a962:	f7fb ff19 	bl	8006798 <memcpy>
 800a966:	4631      	mov	r1, r6
 800a968:	4638      	mov	r0, r7
 800a96a:	f7ff f941 	bl	8009bf0 <_free_r>
 800a96e:	e7e9      	b.n	800a944 <_realloc_r+0x1c>
 800a970:	4635      	mov	r5, r6
 800a972:	e7e7      	b.n	800a944 <_realloc_r+0x1c>

0800a974 <_raise_r>:
 800a974:	291f      	cmp	r1, #31
 800a976:	b538      	push	{r3, r4, r5, lr}
 800a978:	4604      	mov	r4, r0
 800a97a:	460d      	mov	r5, r1
 800a97c:	d904      	bls.n	800a988 <_raise_r+0x14>
 800a97e:	2316      	movs	r3, #22
 800a980:	6003      	str	r3, [r0, #0]
 800a982:	f04f 30ff 	mov.w	r0, #4294967295
 800a986:	bd38      	pop	{r3, r4, r5, pc}
 800a988:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a98a:	b112      	cbz	r2, 800a992 <_raise_r+0x1e>
 800a98c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a990:	b94b      	cbnz	r3, 800a9a6 <_raise_r+0x32>
 800a992:	4620      	mov	r0, r4
 800a994:	f000 f830 	bl	800a9f8 <_getpid_r>
 800a998:	462a      	mov	r2, r5
 800a99a:	4601      	mov	r1, r0
 800a99c:	4620      	mov	r0, r4
 800a99e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9a2:	f000 b817 	b.w	800a9d4 <_kill_r>
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d00a      	beq.n	800a9c0 <_raise_r+0x4c>
 800a9aa:	1c59      	adds	r1, r3, #1
 800a9ac:	d103      	bne.n	800a9b6 <_raise_r+0x42>
 800a9ae:	2316      	movs	r3, #22
 800a9b0:	6003      	str	r3, [r0, #0]
 800a9b2:	2001      	movs	r0, #1
 800a9b4:	e7e7      	b.n	800a986 <_raise_r+0x12>
 800a9b6:	2400      	movs	r4, #0
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9be:	4798      	blx	r3
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	e7e0      	b.n	800a986 <_raise_r+0x12>

0800a9c4 <raise>:
 800a9c4:	4b02      	ldr	r3, [pc, #8]	; (800a9d0 <raise+0xc>)
 800a9c6:	4601      	mov	r1, r0
 800a9c8:	6818      	ldr	r0, [r3, #0]
 800a9ca:	f7ff bfd3 	b.w	800a974 <_raise_r>
 800a9ce:	bf00      	nop
 800a9d0:	2000003c 	.word	0x2000003c

0800a9d4 <_kill_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	4d06      	ldr	r5, [pc, #24]	; (800a9f4 <_kill_r+0x20>)
 800a9da:	4604      	mov	r4, r0
 800a9dc:	4608      	mov	r0, r1
 800a9de:	4611      	mov	r1, r2
 800a9e0:	602b      	str	r3, [r5, #0]
 800a9e2:	f7f7 ff96 	bl	8002912 <_kill>
 800a9e6:	1c43      	adds	r3, r0, #1
 800a9e8:	d102      	bne.n	800a9f0 <_kill_r+0x1c>
 800a9ea:	682b      	ldr	r3, [r5, #0]
 800a9ec:	b103      	cbz	r3, 800a9f0 <_kill_r+0x1c>
 800a9ee:	6023      	str	r3, [r4, #0]
 800a9f0:	bd38      	pop	{r3, r4, r5, pc}
 800a9f2:	bf00      	nop
 800a9f4:	200009b4 	.word	0x200009b4

0800a9f8 <_getpid_r>:
 800a9f8:	f7f7 bf84 	b.w	8002904 <_getpid>

0800a9fc <__sread>:
 800a9fc:	b510      	push	{r4, lr}
 800a9fe:	460c      	mov	r4, r1
 800aa00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa04:	f000 f89c 	bl	800ab40 <_read_r>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	bfab      	itete	ge
 800aa0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa0e:	89a3      	ldrhlt	r3, [r4, #12]
 800aa10:	181b      	addge	r3, r3, r0
 800aa12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa16:	bfac      	ite	ge
 800aa18:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa1a:	81a3      	strhlt	r3, [r4, #12]
 800aa1c:	bd10      	pop	{r4, pc}

0800aa1e <__swrite>:
 800aa1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa22:	461f      	mov	r7, r3
 800aa24:	898b      	ldrh	r3, [r1, #12]
 800aa26:	4605      	mov	r5, r0
 800aa28:	05db      	lsls	r3, r3, #23
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	4616      	mov	r6, r2
 800aa2e:	d505      	bpl.n	800aa3c <__swrite+0x1e>
 800aa30:	2302      	movs	r3, #2
 800aa32:	2200      	movs	r2, #0
 800aa34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa38:	f000 f868 	bl	800ab0c <_lseek_r>
 800aa3c:	89a3      	ldrh	r3, [r4, #12]
 800aa3e:	4632      	mov	r2, r6
 800aa40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa44:	81a3      	strh	r3, [r4, #12]
 800aa46:	4628      	mov	r0, r5
 800aa48:	463b      	mov	r3, r7
 800aa4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa52:	f000 b817 	b.w	800aa84 <_write_r>

0800aa56 <__sseek>:
 800aa56:	b510      	push	{r4, lr}
 800aa58:	460c      	mov	r4, r1
 800aa5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa5e:	f000 f855 	bl	800ab0c <_lseek_r>
 800aa62:	1c43      	adds	r3, r0, #1
 800aa64:	89a3      	ldrh	r3, [r4, #12]
 800aa66:	bf15      	itete	ne
 800aa68:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa72:	81a3      	strheq	r3, [r4, #12]
 800aa74:	bf18      	it	ne
 800aa76:	81a3      	strhne	r3, [r4, #12]
 800aa78:	bd10      	pop	{r4, pc}

0800aa7a <__sclose>:
 800aa7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa7e:	f000 b813 	b.w	800aaa8 <_close_r>
	...

0800aa84 <_write_r>:
 800aa84:	b538      	push	{r3, r4, r5, lr}
 800aa86:	4604      	mov	r4, r0
 800aa88:	4608      	mov	r0, r1
 800aa8a:	4611      	mov	r1, r2
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	4d05      	ldr	r5, [pc, #20]	; (800aaa4 <_write_r+0x20>)
 800aa90:	602a      	str	r2, [r5, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	f7f7 ff74 	bl	8002980 <_write>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	d102      	bne.n	800aaa2 <_write_r+0x1e>
 800aa9c:	682b      	ldr	r3, [r5, #0]
 800aa9e:	b103      	cbz	r3, 800aaa2 <_write_r+0x1e>
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	200009b4 	.word	0x200009b4

0800aaa8 <_close_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	2300      	movs	r3, #0
 800aaac:	4d05      	ldr	r5, [pc, #20]	; (800aac4 <_close_r+0x1c>)
 800aaae:	4604      	mov	r4, r0
 800aab0:	4608      	mov	r0, r1
 800aab2:	602b      	str	r3, [r5, #0]
 800aab4:	f7f7 ff80 	bl	80029b8 <_close>
 800aab8:	1c43      	adds	r3, r0, #1
 800aaba:	d102      	bne.n	800aac2 <_close_r+0x1a>
 800aabc:	682b      	ldr	r3, [r5, #0]
 800aabe:	b103      	cbz	r3, 800aac2 <_close_r+0x1a>
 800aac0:	6023      	str	r3, [r4, #0]
 800aac2:	bd38      	pop	{r3, r4, r5, pc}
 800aac4:	200009b4 	.word	0x200009b4

0800aac8 <_fstat_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	2300      	movs	r3, #0
 800aacc:	4d06      	ldr	r5, [pc, #24]	; (800aae8 <_fstat_r+0x20>)
 800aace:	4604      	mov	r4, r0
 800aad0:	4608      	mov	r0, r1
 800aad2:	4611      	mov	r1, r2
 800aad4:	602b      	str	r3, [r5, #0]
 800aad6:	f7f7 ff7a 	bl	80029ce <_fstat>
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	d102      	bne.n	800aae4 <_fstat_r+0x1c>
 800aade:	682b      	ldr	r3, [r5, #0]
 800aae0:	b103      	cbz	r3, 800aae4 <_fstat_r+0x1c>
 800aae2:	6023      	str	r3, [r4, #0]
 800aae4:	bd38      	pop	{r3, r4, r5, pc}
 800aae6:	bf00      	nop
 800aae8:	200009b4 	.word	0x200009b4

0800aaec <_isatty_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	2300      	movs	r3, #0
 800aaf0:	4d05      	ldr	r5, [pc, #20]	; (800ab08 <_isatty_r+0x1c>)
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	4608      	mov	r0, r1
 800aaf6:	602b      	str	r3, [r5, #0]
 800aaf8:	f7f7 ff78 	bl	80029ec <_isatty>
 800aafc:	1c43      	adds	r3, r0, #1
 800aafe:	d102      	bne.n	800ab06 <_isatty_r+0x1a>
 800ab00:	682b      	ldr	r3, [r5, #0]
 800ab02:	b103      	cbz	r3, 800ab06 <_isatty_r+0x1a>
 800ab04:	6023      	str	r3, [r4, #0]
 800ab06:	bd38      	pop	{r3, r4, r5, pc}
 800ab08:	200009b4 	.word	0x200009b4

0800ab0c <_lseek_r>:
 800ab0c:	b538      	push	{r3, r4, r5, lr}
 800ab0e:	4604      	mov	r4, r0
 800ab10:	4608      	mov	r0, r1
 800ab12:	4611      	mov	r1, r2
 800ab14:	2200      	movs	r2, #0
 800ab16:	4d05      	ldr	r5, [pc, #20]	; (800ab2c <_lseek_r+0x20>)
 800ab18:	602a      	str	r2, [r5, #0]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	f7f7 ff70 	bl	8002a00 <_lseek>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d102      	bne.n	800ab2a <_lseek_r+0x1e>
 800ab24:	682b      	ldr	r3, [r5, #0]
 800ab26:	b103      	cbz	r3, 800ab2a <_lseek_r+0x1e>
 800ab28:	6023      	str	r3, [r4, #0]
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	200009b4 	.word	0x200009b4

0800ab30 <_malloc_usable_size_r>:
 800ab30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab34:	1f18      	subs	r0, r3, #4
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	bfbc      	itt	lt
 800ab3a:	580b      	ldrlt	r3, [r1, r0]
 800ab3c:	18c0      	addlt	r0, r0, r3
 800ab3e:	4770      	bx	lr

0800ab40 <_read_r>:
 800ab40:	b538      	push	{r3, r4, r5, lr}
 800ab42:	4604      	mov	r4, r0
 800ab44:	4608      	mov	r0, r1
 800ab46:	4611      	mov	r1, r2
 800ab48:	2200      	movs	r2, #0
 800ab4a:	4d05      	ldr	r5, [pc, #20]	; (800ab60 <_read_r+0x20>)
 800ab4c:	602a      	str	r2, [r5, #0]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	f7f7 fef9 	bl	8002946 <_read>
 800ab54:	1c43      	adds	r3, r0, #1
 800ab56:	d102      	bne.n	800ab5e <_read_r+0x1e>
 800ab58:	682b      	ldr	r3, [r5, #0]
 800ab5a:	b103      	cbz	r3, 800ab5e <_read_r+0x1e>
 800ab5c:	6023      	str	r3, [r4, #0]
 800ab5e:	bd38      	pop	{r3, r4, r5, pc}
 800ab60:	200009b4 	.word	0x200009b4

0800ab64 <_init>:
 800ab64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab66:	bf00      	nop
 800ab68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab6a:	bc08      	pop	{r3}
 800ab6c:	469e      	mov	lr, r3
 800ab6e:	4770      	bx	lr

0800ab70 <_fini>:
 800ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab72:	bf00      	nop
 800ab74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab76:	bc08      	pop	{r3}
 800ab78:	469e      	mov	lr, r3
 800ab7a:	4770      	bx	lr
